{"version":3,"sources":["System/Time/TimeSpan.js","System/Time/TimeSpan.ts"],"names":["define","require","exports","Types_1","TimeUnit_1","ClockTime_1","TimeQuantity_1","extends_1","__extends","TimeSpan","_super","value","units","TimeUnit","Milliseconds","ms","toMilliseconds","call","this","_","ticks","milliseconds","seconds","minutes","hours","days","Object","defineProperty","prototype","get","enumerable","configurable","t","_time","ClockTime","getTotalMilliseconds","add","other","Type","isNumber","Error","total","addUnit","from","fromDays","Days","fromHours","Hours","fromMinutes","Minutes","fromSeconds","Seconds","fromMilliseconds","fromTicks","Ticks","timeSpanZero","TimeQuantity"],"mappings":";;;;;AAKAA,QAAQ,UAAW,UAAW,WAAY,aAAc,cAAe,iBAAkB,iBAAkB,SAAUC,EAASC,EAASC,EAASC,EAAYC,EAAaC,EAAgBC,GACrL,YCQJ,IAAMC,GAAYD,EAAAA,WAMlBE,EAAA,SAAAC,GAWC,QAAAD,GAAYE,EAAcC,GAAA,SAAAA,IAAAA,EAAiBR,EAAAS,SAASC,aAEnD,IAAIC,GAAKX,EAAAS,SAASG,eAAeL,EAAOC,EACxCF,GAAAO,KAAAC,KAAMH,EAEN,IAAII,GAAID,IACRC,GAAEC,MAAW,IAAHL,EACVI,EAAEE,aAAeN,EACjBI,EAAEG,QAAUP,EAAG,IACfI,EAAEI,QAAUR,EAAG,IACfI,EAAEK,MAAQT,EAAG,KACbI,EAAEM,KAAOV,EAAG,MA8Ed,MApG8BP,GAAAC,EAAAC,GA6B7BgB,OAAAC,eAAIlB,EAAAmB,UAAA,SD1BOC,IC0BX,WAEC,MAAOX,ODzBGY,YAAY,EACZC,cAAc,IC6BzBL,OAAAC,eAAIlB,EAAAmB,UAAA,QD1BOC,IC0BX,WAEC,GAAIV,GAAID,KAAMc,EAAIb,EAAEc,KAEpB,OADID,KAAGb,EAAEc,MAAQD,EAAI,GAAI3B,GAAA6B,UAAUf,EAAEgB,yBAC9BH,GDxBGF,YAAY,EACZC,cAAc,IC0BzBtB,EAAAmB,UAAAQ,IAAA,SAAIC,GAEH,GAAGlC,EAAAmC,KAAKC,SAASF,GAChB,KAAM,IAAIG,OACT,yKAIF,OAAO,IAAI/B,GAASS,KAAKiB,uBAAyBE,EAAMI,MAAMpB,eAG/DZ,EAAAmB,UAAAc,QAAA,SAAQ/B,EAAcC,GAErB,MAFqB,UAAAA,IAAAA,EAAiBR,EAAAS,SAASC,cAExC,GAAIL,GAASS,KAAKiB,uBAAyB/B,EAAAS,SAASG,eAAeL,EAAOC,KAI3EH,EAAAkC,KAAP,SAAYhC,EAAcC,GAEzB,MAAO,IAAIH,GAASE,EAAOC,IAGrBH,EAAAmC,SAAP,SAAgBjC,GAEf,MAAO,IAAIF,GAASE,EAAOP,EAAAS,SAASgC,OAG9BpC,EAAAqC,UAAP,SAAiBnC,GAEhB,MAAO,IAAIF,GAASE,EAAOP,EAAAS,SAASkC,QAG9BtC,EAAAuC,YAAP,SAAmBrC,GAElB,MAAO,IAAIF,GAASE,EAAOP,EAAAS,SAASoC,UAG9BxC,EAAAyC,YAAP,SAAmBvC,GAElB,MAAO,IAAIF,GAASE,EAAOP,EAAAS,SAASsC,UAG9B1C,EAAA2C,iBAAP,SAAwBzC,GAEvB,MAAO,IAAIF,GAASE,EAAOP,EAAAS,SAASC,eAG9BL,EAAA4C,UAAP,SAAiB1C,GAEhB,MAAO,IAAIF,GAASE,EAAOP,EAAAS,SAASyC,QAIrC5B,OAAAC,eAAWlB,EAAA,QD7CAoB,IC6CX,WAEC,MAAO0B,KAAiBA,EAAe,GAAI9C,GAAS,KD5C1CqB,YAAY,EACZC,cAAc,IC6C1BtB,GApG8BH,EAAAkD,aAAjBtD,GAAAO,SAAQA,CAuGrB,IAAI8C,EAEJ7B,QAAAC,eAAAzB,EAAA,cAAAS,OAAA,ID3CIT,EAAAA,WC2CWO","file":"System/Time/TimeSpan.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Originally based upon .NET source but with many additions and improvements.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"../Types\", \"./TimeUnit\", \"./ClockTime\", \"./TimeQuantity\", \"../../extends\"], function (require, exports, Types_1, TimeUnit_1, ClockTime_1, TimeQuantity_1, extends_1) {\n    \"use strict\";\n    var __extends = extends_1.default;\n    var TimeSpan = (function (_super) {\n        __extends(TimeSpan, _super);\n        function TimeSpan(value, units) {\n            if (units === void 0) { units = TimeUnit_1.TimeUnit.Milliseconds; }\n            var ms = TimeUnit_1.TimeUnit.toMilliseconds(value, units);\n            _super.call(this, ms);\n            var _ = this;\n            _.ticks = ms * 10000;\n            _.milliseconds = ms;\n            _.seconds = ms / 1000;\n            _.minutes = ms / 60000;\n            _.hours = ms / 3600000;\n            _.days = ms / 86400000;\n        }\n        Object.defineProperty(TimeSpan.prototype, \"total\", {\n            get: function () {\n                return this;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TimeSpan.prototype, \"time\", {\n            get: function () {\n                var _ = this, t = _._time;\n                if (!t)\n                    _._time = t = new ClockTime_1.ClockTime(_.getTotalMilliseconds());\n                return t;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TimeSpan.prototype.add = function (other) {\n            if (Types_1.Type.isNumber(other))\n                throw new Error(\"Use .addUnit(value:number,units:TimeUnit) to add a numerical value amount.  Default units are milliseconds.\\n\" +\n                    \".add only supports quantifiable time values (ITimeTotal).\");\n            return new TimeSpan(this.getTotalMilliseconds() + other.total.milliseconds);\n        };\n        TimeSpan.prototype.addUnit = function (value, units) {\n            if (units === void 0) { units = TimeUnit_1.TimeUnit.Milliseconds; }\n            return new TimeSpan(this.getTotalMilliseconds() + TimeUnit_1.TimeUnit.toMilliseconds(value, units));\n        };\n        TimeSpan.from = function (value, units) {\n            return new TimeSpan(value, units);\n        };\n        TimeSpan.fromDays = function (value) {\n            return new TimeSpan(value, TimeUnit_1.TimeUnit.Days);\n        };\n        TimeSpan.fromHours = function (value) {\n            return new TimeSpan(value, TimeUnit_1.TimeUnit.Hours);\n        };\n        TimeSpan.fromMinutes = function (value) {\n            return new TimeSpan(value, TimeUnit_1.TimeUnit.Minutes);\n        };\n        TimeSpan.fromSeconds = function (value) {\n            return new TimeSpan(value, TimeUnit_1.TimeUnit.Seconds);\n        };\n        TimeSpan.fromMilliseconds = function (value) {\n            return new TimeSpan(value, TimeUnit_1.TimeUnit.Milliseconds);\n        };\n        TimeSpan.fromTicks = function (value) {\n            return new TimeSpan(value, TimeUnit_1.TimeUnit.Ticks);\n        };\n        Object.defineProperty(TimeSpan, \"zero\", {\n            get: function () {\n                return timeSpanZero || (timeSpanZero = new TimeSpan(0));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return TimeSpan;\n    }(TimeQuantity_1.TimeQuantity));\n    exports.TimeSpan = TimeSpan;\n    var timeSpanZero;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = TimeSpan;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../Types\";\r\nimport {TimeUnit} from \"./TimeUnit\";\r\nimport {ClockTime} from \"./ClockTime\";\r\nimport {TimeQuantity} from \"./TimeQuantity\";\r\nimport {Milliseconds, Ticks} from \"./HowMany\";\r\nimport {ITimeMeasurement} from \"./ITimeMeasurement\";\r\nimport {ITimeQuantity} from \"./ITimeQuantity\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n\r\n/**\r\n * TimeSpan expands on TimeQuantity to provide an class that is similar to .NET's TimeSpan including many useful static methods.\r\n */\r\nexport class TimeSpan extends TimeQuantity implements ITimeMeasurement\r\n{\r\n\r\n\tticks:number;\r\n\tmilliseconds:number;\r\n\tseconds:number;\r\n\tminutes:number;\r\n\thours:number;\r\n\tdays:number;\r\n\r\n\t// In .NET the default type is Ticks, but for JavaScript, we will use Milliseconds.\r\n\tconstructor(value:number, units:TimeUnit = TimeUnit.Milliseconds)\r\n\t{\r\n\t\tvar ms = TimeUnit.toMilliseconds(value, units);\r\n\t\tsuper(ms);\r\n\r\n\t\tvar _ = this;\r\n\t\t_.ticks = ms*Ticks.Per.Millisecond;\r\n\t\t_.milliseconds = ms;\r\n\t\t_.seconds = ms/Milliseconds.Per.Second;\r\n\t\t_.minutes = ms/Milliseconds.Per.Minute;\r\n\t\t_.hours = ms/Milliseconds.Per.Hour;\r\n\t\t_.days = ms/Milliseconds.Per.Day;\r\n\t}\r\n\r\n\t/**\r\n\t * Provides an standard interface for acquiring the total time.\r\n\t * @returns {TimeSpan}\r\n\t */\r\n\tget total():TimeSpan\r\n\t{\r\n\t\treturn this;\r\n\t}\r\n\r\n\tprivate _time:ClockTime;\r\n\t// Instead of the confusing getTotal versus unit name, expose a 'ClockTime' value which reports the individual components.\r\n\tget time():ClockTime\r\n\t{\r\n\t\tvar _ = this, t = _._time;\r\n\t\tif(!t) _._time = t = new ClockTime(_.getTotalMilliseconds());\r\n\t\treturn t;\r\n\t}\r\n\r\n\tadd(other:ITimeQuantity):TimeSpan\r\n\t{\r\n\t\tif(Type.isNumber(other))\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Use .addUnit(value:number,units:TimeUnit) to add a numerical value amount.  Default units are milliseconds.\\n\" +\r\n\t\t\t\t\".add only supports quantifiable time values (ITimeTotal).\"\r\n\t\t\t);\r\n\r\n\t\treturn new TimeSpan(this.getTotalMilliseconds() + other.total.milliseconds);\r\n\t}\r\n\r\n\taddUnit(value:number, units:TimeUnit = TimeUnit.Milliseconds):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(this.getTotalMilliseconds() + TimeUnit.toMilliseconds(value, units));\r\n\t}\r\n\r\n\r\n\tstatic from(value:number, units:TimeUnit)\r\n\t{\r\n\t\treturn new TimeSpan(value, units);\r\n\t}\r\n\r\n\tstatic fromDays(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Days);\r\n\t}\r\n\r\n\tstatic fromHours(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Hours);\r\n\t}\r\n\r\n\tstatic fromMinutes(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Minutes);\r\n\t}\r\n\r\n\tstatic fromSeconds(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Seconds);\r\n\t}\r\n\r\n\tstatic fromMilliseconds(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Milliseconds);\r\n\t}\r\n\r\n\tstatic fromTicks(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Ticks);\r\n\t}\r\n\r\n\r\n\tstatic get zero():TimeSpan\r\n\t{\r\n\t\treturn timeSpanZero || (timeSpanZero = new TimeSpan(0));\r\n\t}\r\n}\r\n\r\n\r\nvar timeSpanZero:TimeSpan;\r\n\r\nexport default TimeSpan;"]}