/*!
 * @author electricessence / https://github.com/electricessence/
 * Originally based upon .NET source but with many additions and improvements.
 * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md
 */
define(["require","exports","../Types","./TimeUnit","./ClockTime","./TimeQuantity","../../extends"],function(e,n,i,t,o,r,u){"use strict";var s=u["default"],l=function(e){function n(n,i){void 0===i&&(i=t.TimeUnit.Milliseconds);var o=t.TimeUnit.toMilliseconds(n,i);e.call(this,o);var r=this;r.ticks=1e4*o,r.milliseconds=o,r.seconds=o/1e3,r.minutes=o/6e4,r.hours=o/36e5,r.days=o/864e5}return s(n,e),Object.defineProperty(n.prototype,"total",{get:function(){return this},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"time",{get:function(){var e=this,n=e._time;return n||(e._time=n=new o.ClockTime(e.getTotalMilliseconds())),n},enumerable:!0,configurable:!0}),n.prototype.add=function(e){if(i.Type.isNumber(e))throw new Error("Use .addUnit(value:number,units:TimeUnit) to add a numerical value amount.  Default units are milliseconds.\n.add only supports quantifiable time values (ITimeTotal).");return new n(this.getTotalMilliseconds()+e.total.milliseconds)},n.prototype.addUnit=function(e,i){return void 0===i&&(i=t.TimeUnit.Milliseconds),new n(this.getTotalMilliseconds()+t.TimeUnit.toMilliseconds(e,i))},n.from=function(e,i){return new n(e,i)},n.fromDays=function(e){return new n(e,t.TimeUnit.Days)},n.fromHours=function(e){return new n(e,t.TimeUnit.Hours)},n.fromMinutes=function(e){return new n(e,t.TimeUnit.Minutes)},n.fromSeconds=function(e){return new n(e,t.TimeUnit.Seconds)},n.fromMilliseconds=function(e){return new n(e,t.TimeUnit.Milliseconds)},n.fromTicks=function(e){return new n(e,t.TimeUnit.Ticks)},Object.defineProperty(n,"zero",{get:function(){return c||(c=new n(0))},enumerable:!0,configurable:!0}),n}(r.TimeQuantity);n.TimeSpan=l;var c;Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=l});
//# sourceMappingURL=TimeSpan.js.map
