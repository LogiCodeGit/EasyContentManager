{"version":3,"sources":["System/Lazy.js","System/Lazy.ts"],"names":["define","require","exports","ResolverBase_1","extends_1","__extends","Lazy","_super","valueFactory","trapExceptions","allowReset","call","this","_disposableObjectName","_isValueCreated","Object","defineProperty","prototype","get","enumerable","configurable","getValue","equals","other","valueEquals","value","ResolverBase","ResettableLazy"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,iBAAkB,cAAe,SAAUC,EAASC,EAASC,EAAgBC,GACvG,YCIJ,IAAMC,GAAYD,EAAAA,WAIlBE,EAAA,SAAAC,GAGC,QAAAD,GAAYE,EAAsBC,EAAgCC,GAAhC,SAAAD,IAAAA,GAAA,GAAgC,SAAAC,IAAAA,GAAA,GAEjEH,EAAAI,KAAAC,KAAMJ,EAAcC,EAAgBC,GACpCE,KAAKC,sBAAwB,OAC7BD,KAAKE,iBAAkB,EAuBzB,MA9B6BT,GAAAC,EAAAC,GAU5BQ,OAAAC,eAAIV,EAAAW,UAAA,kBDNOC,ICMX,WAEC,QAASN,KAAKE,iBDLJK,YAAY,EACZC,cAAc,ICOzBL,OAAAC,eAAIV,EAAAW,UAAA,SDJOC,ICIX,WAEC,MAAON,MAAKS,YDHFF,YAAY,EACZC,cAAc,ICKzBd,EAAAW,UAAAK,OAAA,SAAOC,GAEN,MAAOX,OAAMW,GAGdjB,EAAAW,UAAAO,YAAA,SAAYD,GAEX,MAAOX,MAAKU,OAAOC,IAAUX,KAAKa,QAAQF,EAAME,OAGlDnB,GA9B6BH,EAAAuB,aAAhBxB,GAAAI,KAAIA,CAgCjB,IAAAqB,GAAA,SAAApB,GAEC,QAAAoB,GAAYnB,EAAsBC,GAAA,SAAAA,IAAAA,GAAA,GAEjCF,EAAAI,KAAAC,KAAMJ,EAAcC,GAAgB,GAEtC,MANuCJ,GAAAsB,EAAApB,GAMvCoB,GANuCrB,EAA1BJ,GAAAyB,eAAcA,EAQ3BZ,OAAAC,eAAAd,EAAA,cAAAuB,OAAA,IDJIvB,EAAAA,WCIWI","file":"System/Lazy.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"./ResolverBase\", \"../extends\"], function (require, exports, ResolverBase_1, extends_1) {\n    \"use strict\";\n    var __extends = extends_1.default;\n    var Lazy = (function (_super) {\n        __extends(Lazy, _super);\n        function Lazy(valueFactory, trapExceptions, allowReset) {\n            if (trapExceptions === void 0) { trapExceptions = false; }\n            if (allowReset === void 0) { allowReset = false; }\n            _super.call(this, valueFactory, trapExceptions, allowReset);\n            this._disposableObjectName = 'Lazy';\n            this._isValueCreated = false;\n        }\n        Object.defineProperty(Lazy.prototype, \"isValueCreated\", {\n            get: function () {\n                return !!this._isValueCreated;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Lazy.prototype, \"value\", {\n            get: function () {\n                return this.getValue();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Lazy.prototype.equals = function (other) {\n            return this == other;\n        };\n        Lazy.prototype.valueEquals = function (other) {\n            return this.equals(other) || this.value === other.value;\n        };\n        return Lazy;\n    }(ResolverBase_1.ResolverBase));\n    exports.Lazy = Lazy;\n    var ResettableLazy = (function (_super) {\n        __extends(ResettableLazy, _super);\n        function ResettableLazy(valueFactory, trapExceptions) {\n            if (trapExceptions === void 0) { trapExceptions = false; }\n            _super.call(this, valueFactory, trapExceptions, true);\n        }\n        return ResettableLazy;\n    }(Lazy));\n    exports.ResettableLazy = ResettableLazy;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Lazy;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ILazy} from \"./ILazy\";\r\nimport {Func} from \"./FunctionTypes\";\r\nimport {ResolverBase} from \"./ResolverBase\";\r\nimport __extendsImport from \"../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n\r\n// We need a non-resettable lazy to ensure it can be passed safely around.\r\nexport class Lazy<T> extends ResolverBase<T> implements ILazy<T>\r\n{\r\n\r\n\tconstructor(valueFactory:Func<T>, trapExceptions:boolean = false, allowReset:boolean = false)\r\n\t{\r\n\t\tsuper(valueFactory, trapExceptions, allowReset);\r\n\t\tthis._disposableObjectName = 'Lazy';\r\n\t\tthis._isValueCreated = false;\r\n\t}\r\n\r\n\tget isValueCreated():boolean\r\n\t{\r\n\t\treturn !!this._isValueCreated;\r\n\t}\r\n\r\n\tget value():T\r\n\t{\r\n\t\treturn this.getValue();\r\n\t}\r\n\r\n\tequals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this==other;\r\n\t}\r\n\r\n\tvalueEquals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this.equals(other) || this.value===other.value;\r\n\t}\r\n\r\n}\r\n\r\nexport class ResettableLazy<T> extends Lazy<T>\r\n{\r\n\tconstructor(valueFactory:Func<T>, trapExceptions:boolean = false)\r\n\t{\r\n\t\tsuper(valueFactory, trapExceptions, true);\r\n\t}\r\n}\r\n\r\nexport default Lazy;"]}