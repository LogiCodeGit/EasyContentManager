{"version":3,"sources":["System/Exceptions/ArgumentException.js","System/Exceptions/ArgumentException.ts"],"names":["define","require","exports","SystemException_1","Utility_1","extends_1","__extends","NAME","ArgumentException","_super","paramName","message","innerException","beforeSealing","pn","call","this","trim","_","prototype","getName","SystemException","Object","defineProperty","value"],"mappings":";;;;;AAKAA,QAAQ,UAAW,UAAW,oBAAqB,kBAAmB,iBAAkB,SAAUC,EAASC,EAASC,EAAmBC,EAAWC,GAC9I,YCIJ,IAAMC,GAAYD,EAAAA,WAEZE,EAAc,oBAEpBC,EAAA,SAAAC,GAMC,QAAAD,GACCE,EACAC,EACAC,EACAC,GAFA,SAAAF,IAAAA,EAAA,MACA,SAAAC,IAAAA,EAAA,KAGA,IAAIE,GAAKJ,EAAa,IAAMA,EAAY,KAAQ,EAChDD,GAAAM,KAAAC,KAAMZ,EAAAa,KAAKH,GAAMH,GAAS,KAAMC,EAAgB,SAACM,GAChDA,EAAER,UAAYA,EACXG,GAAeA,EAAcK,KAUnC,MAzBuCZ,GAAAE,EAAAC,GAoB5BD,EAAAW,UAAAC,QAAV,WAEC,MAAOb,IAGTC,GAzBuCL,EAAAkB,gBAA1BnB,GAAAM,kBAAiBA,EA2B9Bc,OAAAC,eAAArB,EAAA,cAAAsB,OAAA,IDbItB,EAAAA,WCaWM","file":"System/Exceptions/ArgumentException.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\n */\ndefine([\"require\", \"exports\", \"./SystemException\", \"../Text/Utility\", \"../../extends\"], function (require, exports, SystemException_1, Utility_1, extends_1) {\n    \"use strict\";\n    var __extends = extends_1.default;\n    var NAME = 'ArgumentException';\n    var ArgumentException = (function (_super) {\n        __extends(ArgumentException, _super);\n        function ArgumentException(paramName, message, innerException, beforeSealing) {\n            if (message === void 0) { message = null; }\n            if (innerException === void 0) { innerException = null; }\n            var pn = paramName ? ('{' + paramName + '} ') : '';\n            _super.call(this, Utility_1.trim(pn + (message || '')), innerException, function (_) {\n                _.paramName = paramName;\n                if (beforeSealing)\n                    beforeSealing(_);\n            });\n        }\n        ArgumentException.prototype.getName = function () {\n            return NAME;\n        };\n        return ArgumentException;\n    }(SystemException_1.SystemException));\n    exports.ArgumentException = ArgumentException;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ArgumentException;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\r\n */\r\n\r\n\r\nimport {SystemException} from \"./SystemException\";\r\nimport {trim} from \"../Text/Utility\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nconst NAME:string = 'ArgumentException';\r\n\r\nexport class ArgumentException extends SystemException\r\n{\r\n\r\n\tparamName:string;\r\n\r\n\t// For simplicity and consistency, lets stick with 1 signature.\r\n\tconstructor(\r\n\t\tparamName:string,\r\n\t\tmessage:string = null,\r\n\t\tinnerException:Error = null,\r\n\t\tbeforeSealing?:(ex:any)=>void)\r\n\t{\r\n\t\tvar pn = paramName ? ('{' + paramName + '} ') : '';\r\n\t\tsuper(trim(pn + (message||'')), innerException, (_)=>{\r\n\t\t\t_.paramName = paramName;\r\n\t\t\tif(beforeSealing) beforeSealing(_);\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tprotected getName():string\r\n\t{\r\n\t\treturn NAME;\r\n\t}\r\n\r\n}\r\n\r\nexport default ArgumentException;"]}