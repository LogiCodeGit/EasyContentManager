{"version":3,"sources":["System/Collections/LinkedList.js","System/Collections/LinkedList.ts"],"names":["define","require","exports","Compare_1","LinkedNodeList_1","InvalidOperationException_1","ArgumentNullException_1","CollectionBase_1","extends_1","ensureExternal","node","list","ArgumentNullException","external","LinkedListNode","getInternal","InvalidOperationException","n","_nodeInternal","__extends","InternalNode","value","previous","next","this","prototype","assertDetached","LinkedList","_super","source","equalityComparer","areEqual","call","_","_listInternal","LinkedNodeList","_importEntries","getCount","unsafeCount","_addInternal","entry","addNode","_removeInternal","max","Infinity","equals","_equalityComparer","removedCount","forEach","removeNode","_clearInternal","clear","action","useCopy","i","getEnumerator","valueEnumeratorFrom","_findFirst","first","_findLast","prev","last","removeOnce","remove","Object","defineProperty","get","enumerable","configurable","getValueAt","index","getNodeAt","find","findLast","addFirst","addNodeBefore","_signalModification","addLast","add","removeFirst","removeLast","addBefore","before","addAfter","after","addNodeAfter","CollectionBase","_list","set","v"],"mappings":"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","file":"System/Collections/LinkedList.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based Upon: http://msdn.microsoft.com/en-us/library/he2s3bh7%28v=vs.110%29.aspx\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"../Compare\", \"./LinkedNodeList\", \"../Exceptions/InvalidOperationException\", \"../Exceptions/ArgumentNullException\", \"./CollectionBase\", \"../../extends\"], function (require, exports, Compare_1, LinkedNodeList_1, InvalidOperationException_1, ArgumentNullException_1, CollectionBase_1, extends_1) {\n    \"use strict\";\n    var __extends = extends_1.default;\n    var InternalNode = (function () {\n        function InternalNode(value, previous, next) {\n            this.value = value;\n            this.previous = previous;\n            this.next = next;\n        }\n        InternalNode.prototype.assertDetached = function () {\n            if (this.next || this.previous)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Adding a node that is already placed.\");\n        };\n        return InternalNode;\n    }());\n    function ensureExternal(node, list) {\n        if (!node)\n            return null;\n        if (!list)\n            throw new ArgumentNullException_1.ArgumentNullException(\"list\");\n        var external = node.external;\n        if (!external)\n            node.external = external = new LinkedListNode(list, node);\n        return external;\n    }\n    function getInternal(node, list) {\n        if (!node)\n            throw new ArgumentNullException_1.ArgumentNullException(\"node\");\n        if (!list)\n            throw new ArgumentNullException_1.ArgumentNullException(\"list\");\n        if (node.list != list)\n            throw new InvalidOperationException_1.InvalidOperationException(\"Provided node does not belong to this list.\");\n        var n = node._nodeInternal;\n        if (!n)\n            throw new InvalidOperationException_1.InvalidOperationException(\"Provided node is not valid.\");\n        return n;\n    }\n    var LinkedList = (function (_super) {\n        __extends(LinkedList, _super);\n        function LinkedList(source, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n            _super.call(this, null, equalityComparer);\n            var _ = this;\n            _._listInternal = new LinkedNodeList_1.LinkedNodeList();\n            _._importEntries(source);\n        }\n        LinkedList.prototype.getCount = function () {\n            return this._listInternal.unsafeCount;\n        };\n        LinkedList.prototype._addInternal = function (entry) {\n            this._listInternal.addNode(new InternalNode(entry));\n            return true;\n        };\n        LinkedList.prototype._removeInternal = function (entry, max) {\n            if (max === void 0) { max = Infinity; }\n            var _ = this, equals = _._equalityComparer, list = _._listInternal, removedCount = 0;\n            list.forEach(function (node) {\n                if (equals(entry, node.value) && list.removeNode(node))\n                    removedCount++;\n                return removedCount < max;\n            });\n            return removedCount;\n        };\n        LinkedList.prototype._clearInternal = function () {\n            return this._listInternal.clear();\n        };\n        LinkedList.prototype.forEach = function (action, useCopy) {\n            if (useCopy === void 0) { useCopy = false; }\n            return useCopy\n                ? _super.prototype.forEach.call(this, action, useCopy)\n                : this._listInternal.forEach(function (node, i) { return action(node.value, i); });\n        };\n        LinkedList.prototype.getEnumerator = function () {\n            return LinkedNodeList_1.LinkedNodeList.valueEnumeratorFrom(this._listInternal);\n        };\n        LinkedList.prototype._findFirst = function (entry) {\n            var _ = this, equals = _._equalityComparer, next = _._listInternal.first;\n            while (next) {\n                if (equals(entry, next.value))\n                    return next;\n                next = next.next;\n            }\n            return null;\n        };\n        LinkedList.prototype._findLast = function (entry) {\n            var _ = this, equals = _._equalityComparer, prev = _._listInternal.last;\n            while (prev) {\n                if (equals(entry, prev.value))\n                    return prev;\n                prev = prev.previous;\n            }\n            return null;\n        };\n        LinkedList.prototype.removeOnce = function (entry) {\n            return this.remove(entry, 1) !== 0;\n        };\n        Object.defineProperty(LinkedList.prototype, \"first\", {\n            get: function () {\n                return ensureExternal(this._listInternal.first, this);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedList.prototype, \"last\", {\n            get: function () {\n                return ensureExternal(this._listInternal.last, this);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        LinkedList.prototype.getValueAt = function (index) {\n            var node = this._listInternal.getNodeAt(index);\n            if (!node)\n                return node && node.value || void (0);\n        };\n        LinkedList.prototype.getNodeAt = function (index) {\n            return ensureExternal(this._listInternal.getNodeAt(index), this);\n        };\n        LinkedList.prototype.find = function (entry) {\n            return ensureExternal(this._findFirst(entry), this);\n        };\n        LinkedList.prototype.findLast = function (entry) {\n            return ensureExternal(this._findLast(entry), this);\n        };\n        LinkedList.prototype.addFirst = function (entry) {\n            this._listInternal.addNodeBefore(new InternalNode(entry));\n            this._signalModification(true);\n        };\n        LinkedList.prototype.addLast = function (entry) {\n            this.add(entry);\n        };\n        LinkedList.prototype.removeFirst = function () {\n            var _ = this, first = _._listInternal.first;\n            if (first && _._listInternal.removeNode(first))\n                _._signalModification(true);\n        };\n        LinkedList.prototype.removeLast = function () {\n            var _ = this, last = _._listInternal.last;\n            if (last && _._listInternal.removeNode(last))\n                _._signalModification(true);\n        };\n        LinkedList.prototype.removeNode = function (node) {\n            var _ = this;\n            if (_._listInternal.removeNode(getInternal(node, _))) {\n                _._signalModification(true);\n                return true;\n            }\n            return false;\n        };\n        LinkedList.prototype.addBefore = function (before, entry) {\n            var _ = this;\n            _._listInternal.addNodeBefore(new InternalNode(entry), getInternal(before, _));\n            _._signalModification(true);\n        };\n        LinkedList.prototype.addAfter = function (after, entry) {\n            var _ = this;\n            _._listInternal.addNodeAfter(new InternalNode(entry), getInternal(after, _));\n            _._signalModification(true);\n        };\n        LinkedList.prototype.addNodeBefore = function (node, before) {\n            var _ = this;\n            _._listInternal.addNodeBefore(getInternal(before, _), getInternal(node, _));\n            _._signalModification(true);\n        };\n        LinkedList.prototype.addNodeAfter = function (node, after) {\n            var _ = this;\n            this._listInternal.addNodeAfter(getInternal(after, _), getInternal(node, _));\n            _._signalModification(true);\n        };\n        return LinkedList;\n    }(CollectionBase_1.CollectionBase));\n    exports.LinkedList = LinkedList;\n    var LinkedListNode = (function () {\n        function LinkedListNode(_list, _nodeInternal) {\n            this._list = _list;\n            this._nodeInternal = _nodeInternal;\n        }\n        Object.defineProperty(LinkedListNode.prototype, \"list\", {\n            get: function () {\n                return this._list;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedListNode.prototype, \"previous\", {\n            get: function () {\n                return ensureExternal(this._nodeInternal.previous, this._list);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedListNode.prototype, \"next\", {\n            get: function () {\n                return ensureExternal(this._nodeInternal.next, this._list);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedListNode.prototype, \"value\", {\n            get: function () {\n                return this._nodeInternal.value;\n            },\n            set: function (v) {\n                this._nodeInternal.value = v;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        LinkedListNode.prototype.addBefore = function (entry) {\n            this._list.addBefore(this, entry);\n        };\n        LinkedListNode.prototype.addAfter = function (entry) {\n            this._list.addAfter(this, entry);\n        };\n        LinkedListNode.prototype.addNodeBefore = function (before) {\n            this._list.addNodeBefore(this, before);\n        };\n        LinkedListNode.prototype.addNodeAfter = function (after) {\n            this._list.addNodeAfter(this, after);\n        };\n        LinkedListNode.prototype.remove = function () {\n            this._list.removeNode(this);\n        };\n        return LinkedListNode;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = LinkedList;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based Upon: http://msdn.microsoft.com/en-us/library/he2s3bh7%28v=vs.110%29.aspx\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {areEqual} from \"../Compare\";\r\nimport {LinkedNodeList} from \"./LinkedNodeList\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {ILinkedListNode, ILinkedNode, INodeWithValue} from \"./ILinkedListNode\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {Predicate, Action, EqualityComparison} from \"../FunctionTypes\";\r\nimport {ILinkedList} from \"./ILinkedList\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n/*****************************\r\n * IMPORTANT NOTES ABOUT PERFORMANCE:\r\n * http://jsperf.com/simulating-a-queue\r\n *\r\n * Adding to an array is very fast, but modifying is slow.\r\n * LinkedList wins when modifying contents.\r\n * http://stackoverflow.com/questions/166884/array-versus-linked-list\r\n *****************************/\r\n\r\n/*\r\n * An internal node is used to manage the order without exposing underlying link chain to the consumer.\r\n */\r\nclass InternalNode<T>\r\nimplements ILinkedNode<InternalNode<T>>, INodeWithValue<T>\r\n{\r\n\tconstructor(\r\n\t\tpublic value?:T,\r\n\t\tpublic previous?:InternalNode<T>,\r\n\t\tpublic next?:InternalNode<T>)\r\n\t{\r\n\t}\r\n\r\n\texternal:ILinkedListNode<T>;\r\n\r\n\tassertDetached():void\r\n\t{\r\n\t\tif(this.next || this.previous)\r\n\t\t\tthrow new InvalidOperationException(\r\n\t\t\t\t\"Adding a node that is already placed.\");\r\n\t}\r\n\r\n}\r\n\r\nfunction ensureExternal<T>(node:InternalNode<T>, list:LinkedList<T>):ILinkedListNode<T>\r\n{\r\n\tif(!node)\r\n\t\treturn null;\r\n\tif(!list)\r\n\t\tthrow new ArgumentNullException(\"list\");\r\n\r\n\tvar external:ILinkedListNode<T> = node.external;\r\n\tif(!external)\r\n\t\tnode.external = external = new LinkedListNode<T>(list, node);\r\n\r\n\treturn external;\r\n}\r\n\r\nfunction getInternal<T>(node:ILinkedListNode<T>, list:LinkedList<T>):InternalNode<T>\r\n{\r\n\tif(!node)\r\n\t\tthrow new ArgumentNullException(\"node\");\r\n\tif(!list)\r\n\t\tthrow new ArgumentNullException(\"list\");\r\n\r\n\tif(node.list!=list)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node does not belong to this list.\");\r\n\r\n\tvar n:InternalNode<T> = (<any>node)._nodeInternal;\r\n\tif(!n)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node is not valid.\");\r\n\r\n\treturn n;\r\n}\r\n\r\nexport class LinkedList<T>\r\nextends CollectionBase<T> implements ILinkedList<T>\r\n{\r\n\tprivate _listInternal:LinkedNodeList<InternalNode<T>>;\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(null, equalityComparer);\r\n\t\tvar _ = this;\r\n\t\t_._listInternal = new LinkedNodeList<InternalNode<T>>();\r\n\t\t_._importEntries(source);\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._listInternal.unsafeCount;\r\n\t}\r\n\r\n\tprotected _addInternal(entry:T):boolean\r\n\t{\r\n\t\tthis._listInternal.addNode(new InternalNode(entry));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\tvar _            = this,\r\n\t\t    equals       = _._equalityComparer,\r\n\t\t    list         = _._listInternal,\r\n\t\t    removedCount = 0;\r\n\r\n\t\tlist.forEach(node=>\r\n\t\t{\r\n\t\t\tif(equals(entry, node.value) && list.removeNode(node))\r\n\t\t\t\tremovedCount++;\r\n\r\n\t\t\treturn removedCount<max;\r\n\t\t});\r\n\r\n\t\treturn removedCount;\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\treturn this._listInternal.clear();\r\n\t}\r\n\r\n\r\n\tforEach(\r\n\t\taction:Predicate<T> | Action<T>,\r\n\t\tuseCopy:boolean = false):number\r\n\t{\r\n\t\treturn useCopy\r\n\t\t\t? super.forEach(action, useCopy)\r\n\t\t\t: this._listInternal.forEach((node, i)=>action(node.value, i));\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IEnumerable<T>\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\treturn LinkedNodeList.valueEnumeratorFrom<T>(<any>this._listInternal);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tprivate _findFirst(entry:T):InternalNode<T>\r\n\t{\r\n\t\t//noinspection UnnecessaryLocalVariableJS\r\n\t\tvar _      = this,\r\n\t\t    equals = _._equalityComparer,\r\n\t\t    next   = _._listInternal.first;\r\n\t\twhile(next)\r\n\t\t{\r\n\t\t\tif(equals(entry, next.value))\r\n\t\t\t\treturn next;\r\n\t\t\tnext = next.next;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate _findLast(entry:T):InternalNode<T>\r\n\t{\r\n\t\t//noinspection UnnecessaryLocalVariableJS\r\n\t\tvar _      = this,\r\n\t\t    equals = _._equalityComparer,\r\n\t\t    prev   = _._listInternal.last;\r\n\t\twhile(prev)\r\n\t\t{\r\n\t\t\tif(equals(entry, prev.value))\r\n\t\t\t\treturn prev;\r\n\t\t\tprev = prev.previous;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tremoveOnce(entry:T):boolean\r\n\t{\r\n\t\treturn this.remove(entry, 1)!==0;\r\n\t}\r\n\r\n\tget first():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._listInternal.first, this);\r\n\t}\r\n\r\n\tget last():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._listInternal.last, this);\r\n\t}\r\n\r\n\t// get methods are available for convenience but is an n*index operation.\r\n\r\n\r\n\tgetValueAt(index:number):T\r\n\t{\r\n\t\tvar node = this._listInternal.getNodeAt(index);\r\n\t\tif(!node)\r\n\t\t\treturn node && node.value || void(0);\r\n\t}\r\n\r\n\tgetNodeAt(index:number):ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._listInternal.getNodeAt(index), this);\r\n\t}\r\n\r\n\tfind(entry:T):ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._findFirst(entry), this);\r\n\t}\r\n\r\n\tfindLast(entry:T):ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._findLast(entry), this);\r\n\t}\r\n\r\n\taddFirst(entry:T):void\r\n\t{\r\n\t\tthis._listInternal.addNodeBefore(new InternalNode(entry));\r\n\t\tthis._signalModification(true);\r\n\t}\r\n\r\n\taddLast(entry:T):void\r\n\t{\r\n\t\tthis.add(entry);\r\n\t}\r\n\r\n\tremoveFirst():void\r\n\t{\r\n\t\tvar _ = this, first = _._listInternal.first;\r\n\t\tif(first && _._listInternal.removeNode(first))\r\n\t\t\t_._signalModification(true);\r\n\t}\r\n\r\n\tremoveLast():void\r\n\t{\r\n\t\tvar _ = this, last = _._listInternal.last;\r\n\t\tif(last && _._listInternal.removeNode(last))\r\n\t\t\t_._signalModification(true);\r\n\t}\r\n\r\n\t// Returns true if successful and false if not found (already removed).\r\n\tremoveNode(node:ILinkedListNode<T>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(_._listInternal.removeNode(getInternal(node, _)))\r\n\t\t{\r\n\t\t\t_._signalModification(true);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\taddBefore(before:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._listInternal.addNodeBefore(\r\n\t\t\tnew InternalNode(entry),\r\n\t\t\tgetInternal(before, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\taddAfter(after:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._listInternal.addNodeAfter(\r\n\t\t\tnew InternalNode(entry),\r\n\t\t\tgetInternal(after, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\taddNodeBefore(node:ILinkedListNode<T>, before:ILinkedListNode<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._listInternal.addNodeBefore(\r\n\t\t\tgetInternal(before, _),\r\n\t\t\tgetInternal(node, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\taddNodeAfter(node:ILinkedListNode<T>, after:ILinkedListNode<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tthis._listInternal.addNodeAfter(\r\n\t\t\tgetInternal(after, _),\r\n\t\t\tgetInternal(node, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\r\n}\r\n\r\n// Use an internal node class to prevent mucking up the LinkedList.\r\nclass LinkedListNode<T> implements ILinkedListNode<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate _list:LinkedList<T>,\r\n\t\tprivate _nodeInternal:InternalNode<T>)\r\n\t{\r\n\t}\r\n\r\n\tget list():LinkedList<T>\r\n\t{\r\n\t\treturn this._list;\r\n\t}\r\n\r\n\tget previous():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._nodeInternal.previous, this._list);\r\n\t}\r\n\r\n\tget next():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._nodeInternal.next, this._list);\r\n\t}\r\n\r\n\tget value():T\r\n\t{\r\n\t\treturn this._nodeInternal.value;\r\n\t}\r\n\r\n\tset value(v:T)\r\n\t{\r\n\t\tthis._nodeInternal.value = v;\r\n\t}\r\n\r\n\taddBefore(entry:T):void\r\n\t{\r\n\t\tthis._list.addBefore(this, entry);\r\n\t}\r\n\r\n\taddAfter(entry:T):void\r\n\t{\r\n\t\tthis._list.addAfter(this, entry);\r\n\t}\r\n\r\n\taddNodeBefore(before:ILinkedListNode<T>):void\r\n\t{\r\n\t\tthis._list.addNodeBefore(this, before);\r\n\t}\r\n\r\n\taddNodeAfter(after:ILinkedListNode<T>):void\r\n\t{\r\n\t\tthis._list.addNodeAfter(this, after);\r\n\t}\r\n\r\n\tremove():void\r\n\t{\r\n\t\tthis._list.removeNode(this);\r\n\t}\r\n\r\n}\r\n\r\nexport default LinkedList;\r\n"]}