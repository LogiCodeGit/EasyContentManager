{"version":3,"sources":["System/Collections/Set.js","System/Collections/Set.ts"],"names":["define","require","exports","Types_1","ArgumentException_1","SetBase_1","extends_1","wipe","map","depth","_i","_a","Object","keys","length","key","v","__extends","Set","_super","apply","this","arguments","prototype","newUsing","source","_addInternal","item","_","contains","type","Type","isPrimitive","ArgumentException","r","_registry","t","node","value","_getSet","addNode","_clearInternal","call","_onDispose","_getNode","_removeInternal","max","Infinity","s","_set","removeNode","SetBase","defineProperty"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,WAAY,kCAAmC,YAAa,iBAAkB,SAAUC,EAASC,EAASC,EAASC,EAAqBC,EAAWC,GAC7K,YCsFJ,SAAAC,GAAcC,EAAeC,GAE5B,GAF4B,SAAAA,IAAAA,EAAA,GAEzBD,GAAOC,EAET,IAAe,GAAAC,GAAA,EAAAC,EAAAC,OAAOC,KAAKL,GAAZE,EAAAC,EAAAG,OAAAJ,IAAiB,CAA5B,GAAIK,GAAGJ,EAAAD,GAENM,EAAIR,EAAIO,SACLP,GAAIO,GACXR,EAAKS,EAAGP,EAAQ,IArFnB,GAAMQ,GAAYX,EAAAA,WAIlBY,EAAA,SAAAC,GAAA,QAAAD,KACQC,EAAAC,MAAAC,KAAAC,WAsER,MAtEQL,GAAAC,EAAAC,GAEGD,EAAAK,UAAAC,SAAV,SAAmBC,GAElB,MAAO,IAAIP,GAAOO,IAKTP,EAAAK,UAAAG,aAAV,SAAuBC,GAEtB,GAAIC,GAAIP,IACR,KAAIO,EAAEC,SAASF,GACf,CACC,GAAIG,SAAcH,EAClB,KAAIxB,EAAA4B,KAAKC,YAAYF,GACpB,KAAM,IAAI1B,GAAA6B,kBAAkB,OAAQ,uEAErC,IAAIC,GAAIN,EAAEO,UACNC,EAAIF,GAAKA,EAAEJ,EACXI,KAAGN,EAAEO,UAAYD,MACjBE,IAAGF,EAAEJ,GAAQM,KACjB,IAAIC,IAAgCC,MAAOX,EAG3C,OAFAC,GAAEW,UAAUC,QAAQH,GACpBD,EAAOT,GAAQU,GACR,EAER,OAAO,GAGEnB,EAAAK,UAAAkB,eAAV,WAGC,MADAlC,GAAKc,KAAKc,UAAW,GACdhB,EAAAI,UAAMkB,eAAcC,KAAArB,OAGlBH,EAAAK,UAAAoB,WAAV,WAECxB,EAAAI,UAAMoB,WAAUD,KAAArB,MAChBA,KAAKc,UAAY,MAGRjB,EAAAK,UAAAqB,SAAV,SAAmBjB,GAElB,GAAIO,GAAIb,KAAKc,UAAWC,EAAIF,GAAKA,QAASP,GAE1C,OAAOS,IAAKA,EAAOT,IAGVT,EAAAK,UAAAsB,gBAAV,SAA0BlB,EAAQmB,GAEjC,GAFiC,SAAAA,IAAAA,EAAAC,EAAAA,GAExB,IAAND,EAAS,MAAO,EAEnB,IAAIZ,GAAOb,KAAKc,UACZC,EAAOF,GAAKA,QAASP,IACrBU,EAAOD,GAAKA,EAAOT,EAEvB,IAAGU,EACH,OACQD,GAAOT,EACd,IAAIqB,GAAI3B,KAAK4B,IACb,IAAGD,GAAKA,EAAEE,WAAWb,GAEpB,MAAO,GAIT,MAAO,IAGTnB,GAtEQb,EAAA8C,QADKjD,GAAAgB,IAAGA,EAsFhBN,OAAAwC,eAAAlD,EAAA,cAAAoC,OAAA,ID5BIpC,EAAAA,WC4BWgB","file":"System/Collections/Set.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"../Types\", \"../Exceptions/ArgumentException\", \"./SetBase\", \"../../extends\"], function (require, exports, Types_1, ArgumentException_1, SetBase_1, extends_1) {\n    \"use strict\";\n    var __extends = extends_1.default;\n    var OTHER = 'other';\n    var Set = (function (_super) {\n        __extends(Set, _super);\n        function Set() {\n            _super.apply(this, arguments);\n        }\n        Set.prototype.newUsing = function (source) {\n            return new Set(source);\n        };\n        Set.prototype._addInternal = function (item) {\n            var _ = this;\n            if (!_.contains(item)) {\n                var type = typeof item;\n                if (!Types_1.Type.isPrimitive(type))\n                    throw new ArgumentException_1.ArgumentException(\"item\", \"A Set can only index primitives.  Complex objects require a HashSet.\");\n                var r = _._registry;\n                var t = r && r[type];\n                if (!r)\n                    _._registry = r = {};\n                if (!t)\n                    r[type] = t = {};\n                var node = { value: item };\n                _._getSet().addNode(node);\n                t[item] = node;\n                return true;\n            }\n            return false;\n        };\n        Set.prototype._clearInternal = function () {\n            wipe(this._registry, 2);\n            return _super.prototype._clearInternal.call(this);\n        };\n        Set.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._registry = null;\n        };\n        Set.prototype._getNode = function (item) {\n            var r = this._registry, t = r && r[typeof item];\n            return t && t[item];\n        };\n        Set.prototype._removeInternal = function (item, max) {\n            if (max === void 0) { max = Infinity; }\n            if (max === 0)\n                return 0;\n            var r = this._registry, t = r && r[typeof item], node = t && t[item];\n            if (node) {\n                delete t[item];\n                var s = this._set;\n                if (s && s.removeNode(node)) {\n                    return 1;\n                }\n            }\n            return 0;\n        };\n        return Set;\n    }(SetBase_1.SetBase));\n    exports.Set = Set;\n    function wipe(map, depth) {\n        if (depth === void 0) { depth = 1; }\n        if (map && depth) {\n            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {\n                var key = _a[_i];\n                var v = map[key];\n                delete map[key];\n                wipe(v, depth - 1);\n            }\n        }\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Set;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {Type} from \"../Types\";\r\nimport {ArgumentException} from \"../Exceptions/ArgumentException\";\r\nimport {SetBase} from \"./SetBase\";\r\nimport {IMap} from \"./Dictionaries/IDictionary\";\r\nimport {ILinkedNodeWithValue} from \"./ILinkedListNode\";\r\nimport {Primitive} from \"../Primitive\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nconst OTHER = 'other';\r\n\r\nexport class Set<T extends Primitive>\r\nextends SetBase<T>\r\n{\r\n\tprotected newUsing(source?:IEnumerableOrArray<T>):Set<T>\r\n\t{\r\n\t\treturn new Set<T>(source);\r\n\t}\r\n\r\n\tprivate _registry:IMap<IMap<ILinkedNodeWithValue<T>>>;\r\n\r\n\tprotected _addInternal(item:T):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!_.contains(item))\r\n\t\t{\r\n\t\t\tvar type = typeof item;\r\n\t\t\tif(!Type.isPrimitive(type))\r\n\t\t\t\tthrow new ArgumentException(\"item\", \"A Set can only index primitives.  Complex objects require a HashSet.\");\r\n\r\n\t\t\tvar r = _._registry;\r\n\t\t\tvar t = r && r[type];\r\n\t\t\tif(!r) _._registry = r = {};\r\n\t\t\tif(!t) r[type] = t = {};\r\n\t\t\tvar node:ILinkedNodeWithValue<T> = {value: item};\r\n\t\t\t_._getSet().addNode(node);\r\n\t\t\tt[<any>item] = node;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\twipe(this._registry, 2);\r\n\t\treturn super._clearInternal();\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._registry = null;\r\n\t}\r\n\r\n\tprotected _getNode(item:T):ILinkedNodeWithValue<T>\r\n\t{\r\n\t\tvar r = this._registry, t = r && r[typeof item];\r\n\r\n\t\treturn t && t[<any>item];\r\n\t}\r\n\r\n\tprotected _removeInternal(item:T, max:number = Infinity):number\r\n\t{\r\n\t\tif(max===0) return 0;\r\n\r\n\t\tvar r    = this._registry,\r\n\t\t    t    = r && r[typeof item],\r\n\t\t    node = t && t[<any>item];\r\n\r\n\t\tif(node)\r\n\t\t{\r\n\t\t\tdelete t[<any>item];\r\n\t\t\tvar s = this._set;\r\n\t\t\tif(s && s.removeNode(node))\r\n\t\t\t{\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n}\r\n\r\nfunction wipe(map:IMap<any>, depth:number = 1):void\r\n{\r\n\tif(map && depth)\r\n\t{\r\n\t\tfor(var key of Object.keys(map))\r\n\t\t{\r\n\t\t\tvar v = map[key];\r\n\t\t\tdelete map[key];\r\n\t\t\twipe(v, depth - 1);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Set;"]}