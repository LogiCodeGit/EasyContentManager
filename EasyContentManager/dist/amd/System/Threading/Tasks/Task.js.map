{"version":3,"sources":["System/Threading/Tasks/Task.js","System/Threading/Tasks/Task.ts"],"names":["define","require","exports","TaskHandlerBase_1","ArgumentNullException_1","Lazy_1","extends_1","__extends","Task","_super","valueFactory","call","this","ArgumentNullException","_result","Lazy","prototype","_onExecute","getValue","getResult","value","getState","r","status","getStatus","result","isValueCreated","error","start","defer","runSynchronously","Object","defineProperty","get","enumerable","configurable","throwIfDisposed","_onDispose","dispose","TaskHandlerBase"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,oBAAqB,yCAA0C,aAAc,oBAAqB,SAAUC,EAASC,EAASC,EAAmBC,EAAyBC,EAAQC,GAC5M,YCOJ,IAAMC,GAAYD,EAAAA,WAMlBE,EAAA,SAAAC,GAIC,QAAAD,GAAYE,GAGX,GADAD,EAAAE,KAAAC,OACIF,EAAc,KAAM,IAAIN,GAAAS,sBAAsB,eAClDD,MAAKE,QAAU,GAAIT,GAAAU,KAAKL,GAAc,GAqExC,MA7E6BH,GAAAC,EAAAC,GAWlBD,EAAAQ,UAAAC,WAAV,WAECL,KAAKE,QAAQI,YAGJV,EAAAQ,UAAAG,UAAV,WAEC,MAAOP,MAAKE,QAAQM,OAGXZ,EAAAQ,UAAAK,SAAV,WAEC,GAAIC,GAAIV,KAAKE,OACb,OAAOQ,KACLC,OAAQX,KAAKY,YACbC,OAAQH,EAAEI,eAAiBJ,EAAEF,MAAQ,OACrCO,MAAOL,EAAEK,QAKZnB,EAAAQ,UAAAY,MAAA,SAAMC,GAEgB,GAAlBjB,KAAKY,aAEPf,EAAAO,UAAMY,MAAKjB,KAAAC,KAACiB,IAIdrB,EAAAQ,UAAAc,iBAAA,WAEsB,GAAlBlB,KAAKY,aAEPf,EAAAO,UAAMc,iBAAgBnB,KAAAC,OAIxBmB,OAAAC,eAAIxB,EAAAQ,UAAA,SD1BOiB,IC0BX,WAEC,MAAOrB,MAAKS,YDzBFa,YAAY,EACZC,cAAc,IC2BzBJ,OAAAC,eAAIxB,EAAAQ,UAAA,UDxBOiB,ICwBX,WAIC,MAFArB,MAAKwB,kBACLxB,KAAKkB,mBACElB,KAAKO,aDvBFe,YAAY,EACZC,cAAc,ICyBzBJ,OAAAC,eAAIxB,EAAAQ,UAAA,SDtBOiB,ICsBX,WAGC,MADArB,MAAKwB,kBACExB,KAAKE,QAAQa,ODrBVO,YAAY,EACZC,cAAc,ICuBf3B,EAAAQ,UAAAqB,WAAV,WAEC5B,EAAAO,UAAMqB,WAAU1B,KAAAC,KAChB,IAAIU,GAAIV,KAAKE,OAEVQ,KAEFV,KAAKE,QAAU,KACfQ,EAAEgB,YAGL9B,GA7E6BL,EAAAoC,gBAAhBrC,GAAAM,KAAIA,EA+EjBuB,OAAAC,eAAA9B,EAAA,cAAAkB,OAAA,IDtBIlB,EAAAA,WCsBWM","file":"System/Threading/Tasks/Task.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"./TaskHandlerBase\", \"../../Exceptions/ArgumentNullException\", \"../../Lazy\", \"../../../extends\"], function (require, exports, TaskHandlerBase_1, ArgumentNullException_1, Lazy_1, extends_1) {\n    \"use strict\";\n    var __extends = extends_1.default;\n    var Task = (function (_super) {\n        __extends(Task, _super);\n        function Task(valueFactory) {\n            _super.call(this);\n            if (!valueFactory)\n                throw new ArgumentNullException_1.ArgumentNullException('valueFactory');\n            this._result = new Lazy_1.Lazy(valueFactory, false);\n        }\n        Task.prototype._onExecute = function () {\n            this._result.getValue();\n        };\n        Task.prototype.getResult = function () {\n            return this._result.value;\n        };\n        Task.prototype.getState = function () {\n            var r = this._result;\n            return r && {\n                status: this.getStatus(),\n                result: r.isValueCreated ? r.value : void 0,\n                error: r.error\n            };\n        };\n        Task.prototype.start = function (defer) {\n            if (this.getStatus() == 0) {\n                _super.prototype.start.call(this, defer);\n            }\n        };\n        Task.prototype.runSynchronously = function () {\n            if (this.getStatus() == 0) {\n                _super.prototype.runSynchronously.call(this);\n            }\n        };\n        Object.defineProperty(Task.prototype, \"state\", {\n            get: function () {\n                return this.getState();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Task.prototype, \"result\", {\n            get: function () {\n                this.throwIfDisposed();\n                this.runSynchronously();\n                return this.getResult();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Task.prototype, \"error\", {\n            get: function () {\n                this.throwIfDisposed();\n                return this._result.error;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Task.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            var r = this._result;\n            if (r) {\n                this._result = null;\n                r.dispose();\n            }\n        };\n        return Task;\n    }(TaskHandlerBase_1.TaskHandlerBase));\n    exports.Task = Task;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Task;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {TaskHandlerBase} from \"./TaskHandlerBase\";\r\nimport {ArgumentNullException} from \"../../Exceptions/ArgumentNullException\";\r\nimport {Func} from \"../../FunctionTypes\";\r\nimport {Lazy} from \"../../Lazy\";\r\nimport {ITaskState} from \"./ITaskState\";\r\nimport {TaskStatus} from \"./TaskStatus\";\r\nimport __extendsImport from \"../../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * A simplified synchronous (but deferrable) version of Task<T>\r\n * Asynchronous operations should use Promise<T>.\r\n */\r\nexport class Task<T> extends TaskHandlerBase\r\n{\r\n\tprivate _result:Lazy<T>;\r\n\r\n\tconstructor(valueFactory:Func<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!valueFactory) throw new ArgumentNullException('valueFactory');\r\n\t\tthis._result = new Lazy(valueFactory, false);\r\n\t}\r\n\r\n\tprotected _onExecute():void\r\n\t{\r\n\t\tthis._result.getValue();\r\n\t}\r\n\r\n\tprotected getResult():T\r\n\t{\r\n\t\treturn this._result.value; // This will detect any potential recursion.\r\n\t}\r\n\r\n\tprotected getState():ITaskState<T>\r\n\t{\r\n\t\tvar r = this._result;\r\n\t\treturn r && {\r\n\t\t\t\tstatus: this.getStatus(),\r\n\t\t\t\tresult: r.isValueCreated ? r.value : void 0,\r\n\t\t\t\terror: r.error\r\n\t\t\t};\r\n\t}\r\n\r\n\r\n\tstart(defer?:number):void\r\n\t{\r\n\t\tif(this.getStatus()==TaskStatus.Created)\r\n\t\t{\r\n\t\t\tsuper.start(defer);\r\n\t\t}\r\n\t}\r\n\r\n\trunSynchronously():void\r\n\t{\r\n\t\tif(this.getStatus()==TaskStatus.Created)\r\n\t\t{\r\n\t\t\tsuper.runSynchronously();\r\n\t\t}\r\n\t}\r\n\r\n\tget state():ITaskState<T>\r\n\t{\r\n\t\treturn this.getState();\r\n\t}\r\n\r\n\tget result():T\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis.runSynchronously();\r\n\t\treturn this.getResult();\r\n\t}\r\n\r\n\tget error():any\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this._result.error;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tvar r = this._result;\r\n\r\n\t\tif(r)\r\n\t\t{\r\n\t\t\tthis._result = null;\r\n\t\t\tr.dispose();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Task;"]}