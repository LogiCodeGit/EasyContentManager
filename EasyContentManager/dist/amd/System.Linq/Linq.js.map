{"version":3,"sources":["System.Linq/Linq.js","System.Linq/Linq.ts"],"names":["define","require","exports","Values","Arrays","ArrayUtility","Enumerator_1","EmptyEnumerator_1","Types_1","Integer_1","Functions_1","ArrayEnumerator_1","EnumeratorBase_1","Dictionary_1","Queue_1","dispose_1","DisposableBase_1","UnsupportedEnumerableException_1","ObjectDisposedException_1","KeySortedContext_1","ArgumentNullException_1","ArgumentOutOfRangeException_1","extends_1","getEmptyEnumerator","EmptyEnumerator","nextEnumerator","queue","e","moveNext","enqueue","dispose","createSortContext","orderedEnumerable","currentContext","context","KeySortedContext","keySelector","order","comparer","parent","throwIfDisposed","disposed","ObjectDisposedException","__extends","INVALID_DEFAULT","VOID0","BREAK","element","LinqFunctions","_super","apply","this","arguments","prototype","Greater","a","b","Lesser","Functions","Object","freeze","InfiniteEnumerable","_enumeratorFactory","finalizer","call","_isEndless","defineProperty","get","enumerable","configurable","getEnumerator","_onDispose","asEnumerable","_","doAction","action","initializer","isEndless","Enumerable","enumerator","index","EnumeratorBase","yielder","actionResult","current","yieldBreak","yieldReturn","force","skip","count","isFinite","Integer","assert","empty","take","ArgumentOutOfRangeException","elementAt","v","elementAtOrDefault","defaultValue","assertZeroOrGreater","n","using","i","first","firstOrDefault","Error","single","value","singleOrDefault","any","isEmpty","traverseBreadthFirst","childrenSelector","resultSelector","Identity","buffer","len","nestLevel","next","from","selectMany","length","traverseDepthFirst","enumeratorStack","fromAny","these","flatten","middleEnumerator","c","Type","isString","pairwise","selector","prev","scan","func","seed","isUseSeed","isFirst","select","_selectMany","collectionSelector","undefined","middleSeq","_choose","result","choose","where","predicate","ofType","type","typeName","Number","NUMBER","String","STRING","Boolean","BOOLEAN","Function","FUNCTION","x","except","second","compareSelector","keys","Dictionary","forEach","key","addByKeyValue","containsKey","clear","distinct","distinctUntilChanged","compareKey","initial","areEqual","defaultIfEmpty","zip","firstEnumerator","secondEnumerator","zipMultiple","secondTemp","Queue","dequeue","join","inner","outerKeySelector","innerKeySelector","outerEnumerator","lookup","innerElements","innerCount","toLookup","innerElement","groupJoin","merge","enumerables","concat","_i","union","insertAt","other","isEnumerated","alternateMultiple","sequence","mode","alternateEnumerator","ArrayEnumerator","toArray","hasAtLeastOne","reset","latest","another","alternateSingle","make","alternate","catchError","handler","finallyAction","size","array","initialize","share","sharedEnumerator","DisposableBase","enumeratorFactory","source","UnsupportedEnumerableException","defaultEnumerable","isObject","isArrayLike","ArrayEnumerable","isEnumerable","fromOrEmpty","choice","values","random","chooseFrom","args","cycle","cycleThrough","FiniteEnumerable","repeat","Infinity","repeatWithFinalize","range","start","step","rangeDown","Math","abs","toInfinity","toNegativeInfinity","rangeTo","to","isNaN","matches","input","pattern","flags","ArgumentNullException","RegExp","indexOf","regex","match","exec","generate","factory","unfold","valueFactory","skipSeed","max","map","takeUntil","aggregate","min","weave","mainEnumerator","dump","skipWhile","takeWhile","includeUntilValue","found","throwIfEndless","copyTo","target","elementSelector","dict","getValue","push","Lookup","toMap","obj","toDictionary","toJoinedString","separator","takeExceptLast","q","skipToLast","reverse","shuffle","capacity","selectedIndex","selectedValue","all","every","some","contains","lastIndexOf","intersect","outs","sequenceEqual","equalityComparer","e1","e2","orderBy","OrderedEnumerable","orderUsing","comparison","orderUsingReversed","orderByDescending","groupBy","_this","partitionBy","elements","Grouping","group","hasNext","lastOrDefault","average","numberOrNaN","sum","NaN","maxBy","minBy","sumInfinite","product","exists","quotient","last","memoize","cache","_source","_disposableObjectName","s","Array","isArray","_groupKey","_dictionary","compare","createOrderedEnumerable","thenBy","thenUsing","thenByDescending","thenUsingReversed","indexes","generateSortedIndexes"],"mappings":";;;;;AAKAA,QAAQ,UAAW,UAAW,oBAAqB,sCAAuC,sCAAuC,+CAAgD,oDAAqD,kBAAmB,oBAAqB,sBAAuB,oDAAqD,mDAAoD,gDAAiD,8BAA+B,+BAAgC,sCAAuC,mEAAoE,+CAAgD,iDAAkD,6CAA8C,mDAAoD,cAAe,SAAUC,EAASC,EAASC,EAAQC,EAAQC,EAAcC,EAAcC,EAAmBC,EAASC,EAAWC,EAAaC,EAAmBC,EAAkBC,EAAcC,EAASC,EAAWC,EAAkBC,EAAkCC,EAA2BC,EAAoBC,EAAyBC,EAA+BC,GACtpC,YC0EJ,SAAAC,KAEC,MAAOhB,GAAAiB,gBAirHR,QAAAC,GAA2BC,EAA6BC,GAcvD,MAZGA,KAECA,EAAEC,WAEJF,EAAMG,QAAQF,IAIdZ,EAAAe,QAAQH,GACRA,EAAI,OAGCA,EASR,QAAAI,GACCC,EACAC,GAAA,SAAAA,IAAAA,EAAA,KAGA,IAAIC,GAAU,GAAIf,GAAAgB,iBACjBF,EACAD,EAAkBI,YAClBJ,EAAkBK,MAClBL,EAAkBM,SAEnB,OAAGN,GAAkBO,OACbR,EAAkBC,EAAkBO,OAAQL,GAE7CA,EAMR,QAAAM,GAAyBC,GAExB,GAAGA,EAAU,KAAM,IAAIvB,GAAAwB,wBAAwB,cA3vHhD,GAAMC,GAAYrB,EAAAA,WAKZsB,KACAC,EAAY,OACZC,EAAkC,SAAAC,GAAW,MAAA,IAGnDC,EAAA,SAAAC,GAAA,QAAAD,KAA4BC,EAAAC,MAAAC,KAAAC,WAW5B,MAX4BT,GAAAK,EAAAC,GAE3BD,EAAAK,UAAAC,QAAA,SAAWC,EAAKC,GAEf,MAAOD,GAAEC,EAAID,EAAIC,GAGlBR,EAAAK,UAAAI,OAAA,SAAUF,EAAKC,GAEd,MAASA,GAAFD,EAAMA,EAAIC,GAEnBR,GAX4BtC,EAAAgD,WAaxBA,EAAY,GAAIV,EACpBW,QAAOC,OAAOF,EAqBd,IAAAG,GAAA,SAAAZ,GAGC,QAAAY,GACWC,EACVC,GAEAd,EAAAe,KAAAb,KAAMY,GAHIZ,KAAAW,mBAAAA,EAIVX,KAAKc,YAAa,EA4qDpB,MAnrDQtB,GAAAkB,EAAAZ,GAWPU,OAAAO,eAAIL,EAAAR,UAAA,aDzEOc,ICyEX,WAEC,MAAOhB,MAAKc,YDxEFG,YAAY,EACZC,cAAc,IC2EzBR,EAAAR,UAAAiB,cAAA,WAKC,MAFAnB,MAAKX,kBAEEW,KAAKW,sBAMHD,EAAAR,UAAAkB,WAAV,WAECtB,EAAAI,UAAMkB,WAAUP,KAAAb,MAChBA,KAAKW,mBAAqB,MAM3BD,EAAAR,UAAAmB,aAAA,WAEC,GAAIC,GAAItB,IAER,OADAsB,GAAEjC,kBACK,GAAIqB,GAAsB,WAAM,MAAAY,GAAEH,mBAU1CT,EAAAR,UAAAqB,SAAA,SACCC,EACAC,EACAC,GAAA,SAAAA,IAAAA,EAAoB1B,KAAK0B,UAGzB,IAAIJ,GAAItB,KAAMV,GAAYgC,EAAEjC,iBAE5B,OAAO,IAAIsC,GACV,WAEC,GAAIC,GACAC,EAAe,CAEnB,OAAO,IAAIpE,GAAAqE,eACV,WAECzC,EAAgBC,GAEbmC,GAAaA,IAChBI,EAAQ,EACRD,EAAaN,EAAEH,iBAIhB,SAACY,GAIA,IAFA1C,EAAgBC,GAEVsC,EAAWnD,YACjB,CACC,GAAIuD,GAAoBR,EAAOI,EAAWK,QAASJ,IAEnD,IAAGG,KAAe,GAAwB,IAAfA,EAC1B,MAAOD,GAAQG,YAEhB,IAAkB,IAAfF,EACF,MAAOD,GAAQI,YAAYP,EAAWK,SAIxC,OAAO,GAGR,WAECrE,EAAAe,QAAQiD,IAGTF,IAMF,WAECpC,GAAW,GAGZoC,IAKFhB,EAAAR,UAAAkC,MAAA,WAECpC,KAAKX,kBACLW,KAAKuB,SAAS5B,GACZwB,gBACA1C,YAKHiC,EAAAR,UAAAmC,KAAA,SAAKC,GAEJ,GAAIhB,GAAItB,IAGR,OAFAsB,GAAEjC,kBAEEkD,SAASD,IAGbhF,EAAAkF,QAAQC,OAAOH,EAAO,SAEftC,KAAKuB,SACX,SAAC3B,EAAWiC,GACX,MAAMS,GAANT,EACG,EACA,KARGF,EAAWe,SAapBhC,EAAAR,UAAAyC,KAAA,SAAKL,GAEJ,KAAKA,EAAM,GACV,MAAOX,GAAWe,OAEnB,IAAIpB,GAAItB,IAGR,IAFAsB,EAAEjC,mBAEEkD,SAASD,GACZ,KAAM,IAAIpE,GAAA0E,4BAA4B,QAASN,EAAO,kBAKvD,OAHAhF,GAAAkF,QAAQC,OAAOH,EAAO,SAGAhB,EAAEC,SAAS,SAAC3B,EAAWiC,GAAkB,MAAMS,GAANT,GAAa,MAAM,IAKnFnB,EAAAR,UAAA2C,UAAA,SAAUhB,GAET,GAAIiB,GAAI9C,KAAK+C,mBAAmBlB,EAAOpC,EACvC,IAAGqD,IAAIrD,EAAiB,KAAM,IAAIvB,GAAA0E,4BAA4B,QAASf,EAAO,+DAC9E,OAAOiB,IAGRpC,EAAAR,UAAA6C,mBAAA,SAAmBlB,EAAcmB,GAAA,SAAAA,IAAAA,EAAA,KAEhC,IAAI1B,GAAItB,IACRsB,GAAEjC,kBAEF/B,EAAAkF,QAAQS,oBAAoBpB,EAAO,QACnC,IAAIqB,GAAWrB,CAEf,OAAOjE,GAAAuF,MACNnD,KAAKmB,gBACL,SAAA3C,GAGC,IADA,GAAI4E,GAAI,EACF5E,EAAEC,YACR,CACC,GAAG2E,GAAGF,EAAG,MAAO1E,GAAEyD,OAClBmB,KAGD,MAAOJ,MAaVtC,EAAAR,UAAAmD,MAAA,WAEC,GAAIP,GAAI9C,KAAKsD,eAAe7D,EAC5B,IAAGqD,IAAIrD,EAAiB,KAAM,IAAI8D,OAAM,+BACxC,OAAOT,IAGRpC,EAAAR,UAAAoD,eAAA,SAAeN,GAAA,SAAAA,IAAAA,EAAA,KAEd,IAAI1B,GAAItB,IAGR,OAFAsB,GAAEjC,kBAEKzB,EAAAuF,MACNnD,KAAKmB,gBACL,SAAA3C,GAAI,MAAAA,GAAEC,WAAaD,EAAEyD,QAAUe,KAKjCtC,EAAAR,UAAAsD,OAAA,WAEC,GAAIlC,GAAItB,IAGR,OAFAsB,GAAEjC,kBAEKzB,EAAAuF,MACNnD,KAAKmB,gBACL,SAAA3C,GAEC,GAAGA,EAAEC,WACL,CACC,GAAIgF,GAAQjF,EAAEyD,OACd,KAAIzD,EAAEC,WAAY,MAAOgF,EACzB,MAAM,IAAIF,OAAM,mDAEjB,KAAM,IAAIA,OAAM,oCAKnB7C,EAAAR,UAAAwD,gBAAA,SAAgBV,GAAA,SAAAA,IAAAA,EAAA,KAGf,IAAI1B,GAAItB,IAGR,OAFAsB,GAAEjC,kBAEKzB,EAAAuF,MACNnD,KAAKmB,gBACL,SAAA3C,GAEC,GAAGA,EAAEC,WACL,CACC,GAAIgF,GAAQjF,EAAEyD,OACd,KAAIzD,EAAEC,WAAY,MAAOgF,GAE1B,MAAOT,MAKVtC,EAAAR,UAAAyD,IAAA,WAEC,GAAIrC,GAAItB,IAGR,OAFAsB,GAAEjC,kBAEKzB,EAAAuF,MACNnD,KAAKmB,gBACL,SAAA3C,GAAI,MAAAA,GAAEC,cAIRiC,EAAAR,UAAA0D,QAAA,WAEC,OAAQ5D,KAAK2D,OAsBdjD,EAAAR,UAAA2D,qBAAA,SACCC,EACAC,GAAA,SAAAA,IAAAA,EAE6BxD,EAAUyD,SAEvC,IAAI1C,GAAItB,KAAM0B,EAAYJ,EAAER,YAAc,IAG1C,OAAO,IAAIa,GACV,WAEC,GAAIC,GAEAqC,EAAcC,EADdC,EAAmB,CAGvB,OAAO,IAAI1G,GAAAqE,eACV,WAECqC,EAAY,EACZF,KACAC,EAAM,EACNtC,EAAaN,EAAEH,iBAGhB,SAACY,GAEA,OACA,CACC,GAAGH,EAAWnD,WAGb,MADAwF,GAAOC,KAAStC,EAAWK,QACpBF,EAAQI,YAAY4B,EAAenC,EAAWK,QAASkC,GAG/D,KAAID,EACH,MAAOnC,GAAQG,YAEhB,IAAIkC,GAAOzC,EACT0C,KAAKJ,GACLK,WAAWR,EAEb,KAAIM,EAAKT,MAER,MAAO5B,GAAQG,YAIfiC,KACAF,KACAC,EAAM,EACNtC,EAAWjD,UACXiD,EAAawC,EAAKjD,kBAKrB,WAECvD,EAAAe,QAAQiD,GACRqC,EAAOM,OAAS,GAGjB7C,IAGF,KAEAA,IAmBFhB,EAAAR,UAAAsE,mBAAA,SACCV,EACAC,GAAA,SAAAA,IAAAA,EAE6BxD,EAAUyD,SAEvC,IAAI1C,GAAItB,KAAM0B,EAAYJ,EAAER,YAAc,IAE1C,OAAO,IAAIa,GACV,WAGC,GACIC,GACAsC,EAFAO,IAIJ,OAAO,IAAIhH,GAAAqE,eACV,WAECF,EAAaN,EAAEH,gBACf+C,EAAM,GAGP,SAACnC,GAEA,OACA,CACC,GAAGH,EAAWnD,WACd,CACC,GAAIgF,GAAQM,EAAenC,EAAWK,QAASiC,EAC/CO,GAAgBP,KAAStC,CACzB,IAAIpD,GAAImD,EAAW+C,QAAaZ,EAAiBlC,EAAWK,SAE5D,OADAL,GAAapD,EAAIA,EAAE2C,gBAAkB/D,EAAAiB,gBAC9B0D,EAAQI,YAAYsB,GAG5B,GAAQ,GAALS,EAAQ,OAAO,CAElBtC,GAAWjD,UACXiD,EAAa6C,IAAkBP,GAC/BO,EAAgBF,OAASL,IAI3B,WAEC,IAECtG,EAAAe,QAAQiD,GDzRK,QC6RbhE,EAAAe,QAAQgG,MAAMF,KAIhB/C,IAGF,KACAA,IAKFhB,EAAAR,UAAA0E,QAAA,WAEC,GAAItD,GAAItB,KAAM0B,EAAYJ,EAAER,YAAc,IAE1C,OAAO,IAAIa,GACV,WAEC,GAAIC,GACAiD,EAAoC,IAExC,OAAO,IAAIpH,GAAAqE,eACV,WAECF,EAAaN,EAAEH,iBAGhB,SAACY,GAEA,OACA,CACC,GAAG8C,EACH,CACC,GAAGA,EAAiBpG,WAEnB,MAAOsD,GAAQI,YAAY0C,EAAiB5C,QAI5C4C,GAAiBlG,UACjBkG,EAAmB,KAIrB,GAAGjD,EAAWnD,WACd,CACC,GAAIqG,GAAIlD,EAAWK,QAGfzD,GAAKnB,EAAA0H,KAAKC,SAASF,IAAMnD,EAAW+C,QAAQI,EAChD,IAAGtG,EACH,CACCqG,EACGrG,EACD8F,WAAW/D,EAAUyD,UACrBY,UACAzD,eACF,UAIA,MAAOY,GAAQI,YAAY2C,GAI7B,MAAO/C,GAAQG,eAIjB,WAECtE,EAAAe,QAAQiD,EAAYiD,IAGrBnD,IAGF,KACAA,IAKFhB,EAAAR,UAAA+E,SAAA,SAAkBC,GAEjB,GAAI5D,GAAItB,IAER,OAAO,IAAI2B,GACV,WAEC,GAAIC,EAEJ,OAAO,IAAInE,GAAAqE,eACV,WAECF,EAAaN,EAAEH,gBACfS,EAAWnD,YAGZ,SAACsD,GAEA,GAAIoD,GAAOvD,EAAWK,OACtB,OAAOL,GAAWnD,YACdsD,EAAQI,YAAY+C,EAASC,EAAMvD,EAAWK,WAGnD,WAECrE,EAAAe,QAAQiD,IAGTN,EAAER,aAGJ,KAEAQ,EAAER,aAIJJ,EAAAR,UAAAkF,KAAA,SAAKC,EAAsBC,GAG1B,GAAIC,GAAYD,IAAO5F,EACnB4B,EAAItB,IAER,OAAO,IAAI2B,GACV,WAEC,GAAIC,GACA6B,EACA+B,CAEJ,OAAO,IAAI/H,GAAAqE,eACV,WAECF,EAAaN,EAAEH,gBACfqE,GAAU,GAGX,SAACzD,GAEA,MAAGyD,IAEFA,GAAU,EAEHD,EACJxD,EAAQI,YAAYsB,EAAQ6B,GAC5B1D,EAAWnD,YAAcsD,EAAQI,YAAYsB,EAC7C7B,EAAWK,UAGPL,EAAWnD,WAChBsD,EAAQI,YAAYsB,EAAQ4B,EAAK5B,EAAO7B,EAAWK,WACnD,GAGJ,WAECrE,EAAAe,QAAQiD,IAGTN,EAAER,aAGJ,KAEAQ,EAAER,aAMJJ,EAAAR,UAAAuF,OAAA,SAAgBP,GAEf,GAAI5D,GAAItB,KAAMV,GAAYgC,EAAEjC,iBAE5B,OAAO,IAAIsC,GACV,WAEC,GAAIC,GACAC,EAAe,CAEnB,OAAO,IAAIpE,GAAAqE,eACV,WAECzC,EAAgBC,GAEhBuC,EAAQ,EACRD,EAAaN,EAAEH,iBAGhB,SAACY,GAIA,MAFA1C,GAAgBC,GAETsC,EAAWnD,WACfsD,EAAQI,YAAY+C,EAAStD,EAAWK,QAASJ,MACjDE,EAAQG,cAGZ,WAECtE,EAAAe,QAAQiD,IAGTN,EAAER,aAIJ,WAECxB,GAAW,GAGZgC,EAAER,aAWMJ,EAAAR,UAAAwF,YAAV,SACCC,EACA5B,GAEA,GAAIzC,GAAItB,KAAM0B,EAAYJ,EAAER,YAAc,IAI1C,OAHIiD,KACHA,EAAiB,SAAC3D,EAAKC,GAAU,MAASA,KAEpC,GAAIsB,GACV,WAEC,GAAIC,GACAiD,EACAhD,EAAe,CAEnB,OAAO,IAAIpE,GAAAqE,eACV,WAECF,EAAaN,EAAEH,gBACf0D,EAAmBe,OACnB/D,EAAQ,GAGT,SAACE,GAIA,GAAG8C,IAAmBnF,IAAUkC,EAAWnD,WAC1C,OAAO,CAGR,GACA,CAGC,IAAIoG,EACJ,CACC,GAAIgB,GAAYF,EAAmB/D,EAAWK,QAASJ,IAGvD,KAAIgE,EACH,QAEDhB,GAAmB1H,EAAAkH,KAAewB,GAGnC,GAAGhB,EAAiBpG,WACnB,MAAOsD,GAAQI,YACd4B,EACCnC,EAAWK,QAAS4C,EAAiB5C,SAMxC4C,GAAiBlG,UACjBkG,EAAmB,WAGdjD,EAAWnD,WAEjB,QAAO,GAGR,WAECb,EAAAe,QAAQiD,EAAYiD,GACpBjD,EAAa,KACbiD,EAAmB,MAGpBnD,IAGF,KAEAA,IAWFhB,EAAAR,UAAAoE,WAAA,SACCqB,EACA5B,GAEA,MAAO/D,MAAK0F,YAAYC,EAAoB5B,IAGnCrD,EAAAR,UAAA4F,QAAV,SAA2BZ,GAG1B,GAAI5D,GAAItB,KAAMV,GAAYgC,EAAEjC,iBAE5B,OAAO,IAAIsC,GACV,WAEC,GAAIC,GACAC,EAAe,CAEnB,OAAO,IAAIpE,GAAAqE,eACV,WAECzC,EAAgBC,GAEhBuC,EAAQ,EACRD,EAAaN,EAAEH,iBAGhB,SAACY,GAIA,IAFA1C,EAAgBC,GAEVsC,EAAWnD,YACjB,CACC,GAAIsH,GAASb,EAAStD,EAAWK,QAASJ,IAC1C,IAAY,OAATkE,GAAiBA,IAASrG,EAC5B,MAAOqC,GAAQI,YAAY4D,GAG7B,OAAO,GAGR,WAECnI,EAAAe,QAAQiD,IAGTN,EAAER,aAIJ,WAECxB,GAAW,GAGZgC,EAAER,aASJJ,EAAAR,UAAA8F,OAAA,SAAOd,GAEN,MAFM,UAAAA,IAAAA,EAA4B3E,EAAUyD,UAErChE,KAAK8F,QAAQZ,IAGrBxE,EAAAR,UAAA+F,MAAA,SAAMC,GAGL,GAAI5E,GAAItB,KAAMV,GAAYgC,EAAEjC,iBAE5B,OAAO,IAAIsC,GACV,WAEC,GAAIC,GACAC,EAAe,CAEnB,OAAO,IAAIpE,GAAAqE,eACV,WAECzC,EAAgBC,GAEhBuC,EAAQ,EACRD,EAAaN,EAAEH,iBAGhB,SAACY,GAIA,IAFA1C,EAAgBC,GAEVsC,EAAWnD,YAEhB,GAAGyH,EAAUtE,EAAWK,QAASJ,KAChC,MAAOE,GAAQI,YAAYP,EAAWK,QAExC,QAAO,GAGR,WAECrE,EAAAe,QAAQiD,IAGTN,EAAER,aAIJ,WAECxB,GAAW,GAGZgC,EAAER,aAMJJ,EAAAR,UAAAiG,OAAA,SAAcC,GAEb,GAAIC,EACJ,QAAYD,GAEX,IAAKE,QACJD,EAAWhJ,EAAA0H,KAAKwB,MAChB,MACD,KAAKC,QACJH,EAAWhJ,EAAA0H,KAAK0B,MAChB,MACD,KAAKC,SACJL,EAAWhJ,EAAA0H,KAAK4B,OAChB,MACD,KAAKC,UACJP,EAAWhJ,EAAA0H,KAAK8B,QAChB,MACD,SACC,MAAwB7G,MACtBiG,MAAM,SAAAa,GAAG,MAAAA,aAAaV,KAE1B,MAAwBpG,MACtBgG,SACAC,MAAM,SAAAa,GAAG,aAAQA,KAAKT,KAGzB3F,EAAAR,UAAA6G,OAAA,SACCC,EACAC,GAEA,GAAI3F,GAAItB,KAAMV,GAAYgC,EAAEjC,iBAE5B,OAAO,IAAIsC,GACV,WAEC,GAAIC,GACAsF,CAEJ,OAAO,IAAIzJ,GAAAqE,eACV,WAECzC,EAAgBC,GAChBsC,EAAaN,EAAEH,gBACf+F,EAAO,GAAIxJ,GAAAyJ,WAAuBF,GAC/BD,GACF7J,EAAAiK,QAAQJ,EAAQ,SAAAK,GAASH,EAAKI,cAAcD,GAAK,MAGnD,SAACtF,GAGA,IADA1C,EAAgBC,GACVsC,EAAWnD,YACjB,CACC,GAAIwD,GAAUL,EAAWK,OACzB,KAAIiF,EAAKK,YAAYtF,GAGpB,MADAiF,GAAKI,cAAcrF,GAAS,GACrBF,EAAQI,YAAYF,GAG7B,OAAO,GAGR,WAECrE,EAAAe,QAAQiD,GACRsF,EAAKM,SAGNlG,EAAER,aAIJ,WAECxB,GAAW,GAGZgC,EAAER,aAIJJ,EAAAR,UAAAuH,SAAA,SAASR,GAER,MAAOjH,MAAK+G,OAAO,KAAME,IAI1BvG,EAAAR,UAAAwH,qBAAA,SAA+BT,GAAA,SAAAA,IAAAA,EAAwC1G,EAAUyD,SAGhF,IAAI1C,GAAItB,KAAMV,GAAYgC,EAAEjC,iBAE5B,OAAO,IAAIsC,GACV,WAEC,GAAIC,GACA+F,EACAC,GAAkB,CAEtB,OAAO,IAAInK,GAAAqE,eACV,WAECzC,EAAgBC,GAChBsC,EAAaN,EAAEH,iBAGhB,SAACY,GAGA,IADA1C,EAAgBC,GACVsC,EAAWnD,YACjB,CACC,GAAI4I,GAAMJ,EAAgBrF,EAAWK,QAErC,IAAG2F,EAEFA,GAAU,MAEN,IAAG5K,EAAO6K,SAASF,EAAYN,GAEnC,QAID,OADAM,GAAaN,EACNtF,EAAQI,YAAYP,EAAWK,SAEvC,OAAO,GAGR,WAECrE,EAAAe,QAAQiD,IAGTN,EAAER,aAIJ,WAECxB,GAAW,GAGZgC,EAAER,aAUJJ,EAAAR,UAAA4H,eAAA,SAAe9E,GAAA,SAAAA,IAAAA,EAAA,KAEd,IAAI1B,GAAItB,KAAMV,GAAoBgC,EAAEjC,iBAEpC,OAAO,IAAIsC,GACV,WAEC,GAAIC,GACA4D,CAEJ,OAAO,IAAI/H,GAAAqE,eACV,WAEC0D,GAAU,EACVnG,EAAgBC,GAChBsC,EAAaN,EAAEH,iBAGhB,SAACY,GAIA,MAFA1C,GAAgBC,GAEbsC,EAAWnD,YAEb+G,GAAU,EACHzD,EAAQI,YAAYP,EAAWK,UAE/BuD,GAEPA,GAAU,EACHzD,EAAQI,YAAYa,KAErB,GAGR,WAECpF,EAAAe,QAAQiD,IAGTN,EAAER,aAGJ,KAEAQ,EAAER,aAIJJ,EAAAR,UAAA6H,IAAA,SACCf,EACAjD,GAEA,GAAIzC,GAAItB,IAIR,OAHAsB,GAAEjC,kBAGK,GAAIsC,GACV,WAEC,GAAIqG,GACAC,EACApG,EAAe,CAEnB,OAAO,IAAIpE,GAAAqE,eACV,WAECD,EAAQ,EACRmG,EAAkB1G,EAAEH,gBACpB8G,EAAmB9K,EAAAkH,KAAwB2C,IAG5C,SAACjF,GAAW,MAAAiG,GAAgBvJ,YACzBwJ,EAAiBxJ,YACjBsD,EAAQI,YAAY4B,EAAeiE,EAAgB/F,QAASgG,EAAiBhG,QAASJ,OAEzF,WAECjE,EAAAe,QAAQqJ,EAAiBC,QAQ9BvH,EAAAR,UAAAgI,YAAA,SACClB,EACAjD,GAEA,GAAIzC,GAAItB,IAGR,OAFAsB,GAAEjC,kBAEE2H,EAAOzC,OAGJ,GAAI5C,GACV,WAEC,GAAIwG,GACAH,EACAC,EACApG,EAAe,CAEnB,OAAO,IAAIpE,GAAAqE,eACV,WAECqG,EAAa,GAAIxK,GAAAyK,MAAWpB,GAC5BnF,EAAQ,EACRmG,EAAkB1G,EAAEH,gBACpB8G,EAAmB,MAGpB,SAAClG,GAEA,GAAGiG,EAAgBvJ,WAElB,OACA,CACC,MAAOwJ,GACP,CACC,IAAGE,EAAW7F,MAOb,MAAOP,GAAQG,YALf,IAAIkC,GAAO+D,EAAWE,SACnBjE,KACF6D,EAAmB9K,EAAAkH,KAAwBD,IAM9C,GAAG6D,EAAiBxJ,WACnB,MAAOsD,GAAQI,YACd4B,EAAeiE,EAAgB/F,QAASgG,EAAiBhG,QAASJ,KAGpEoG,GAAiBtJ,UACjBsJ,EAAmB,KAIrB,MAAOlG,GAAQG,cAGhB,WAECtE,EAAAe,QAAQqJ,EAAiBG,OApDrBxG,EAAWe,SA8DpBhC,EAAAR,UAAAoI,KAAA,SACCC,EACAC,EACAC,EACA1E,EACAkD,GAAA,SAAAA,IAAAA,EAA2C1G,EAAUyD,SAGrD,IAAI1C,GAAItB,IACR,OAAO,IAAI2B,GACV,WAEC,GAAI+G,GACAC,EACAC,EAAyB,KACzBC,EAAoB,CAExB,OAAO,IAAIpL,GAAAqE,eACV,WAEC4G,EAAkBpH,EAAEH,gBACpBwH,EAAShH,EAAW0C,KAAKkE,GACvBO,SAASL,EAAkBlI,EAAUyD,SAAUiD,IAGlD,SAAClF,GAEA,OACA,CACC,GAAkB,MAAf6G,EACH,CACC,GAAIG,GAAeH,EAAcC,IACjC,IAAGE,IAAerJ,EACjB,MAAOqC,GAAQI,YAAY4B,EAAe2E,EAAgBzG,QAAS8G,GAEpEA,GAAe,KACfF,EAAa,EAGd,IAAGH,EAAgBjK,WAOlB,MAAOsD,GAAQG,YALf,IAAImF,GAAMmB,EAAiBE,EAAgBzG,QAC3C2G,GAAgBD,EAAO3H,IAAIqG,KAS9B,WAECzJ,EAAAe,QAAQ+J,QAObhI,EAAAR,UAAA8I,UAAA,SACCT,EACAC,EACAC,EACA1E,EACAkD,GAAA,SAAAA,IAAAA,EAA2C1G,EAAUyD,SAErD,IAAI1C,GAAItB,IAER,OAAO,IAAI2B,GACV,WAEC,GAAIC,GACA+G,EAA+B,IAEnC,OAAO,IAAIlL,GAAAqE,eACV,WAECF,EAAaN,EAAEH,gBACfwH,EAAShH,EAAW0C,KAAKkE,GACvBO,SAASL,EAAkBlI,EAAUyD,SAAUiD,IAGlD,SAAClF,GACD,MAAAH,GAAWnD,YACRsD,EAAQI,YACV4B,EACCnC,EAAWK,QACX0G,EAAO3H,IAAIwH,EAAiB5G,EAAWK,aAIzC,WAECrE,EAAAe,QAAQiD,QAQblB,EAAAR,UAAA+I,MAAA,SAAMC,GAEL,GAAI5H,GAAItB,KAAM0B,EAAYJ,EAAER,YAAc,IAE1C,OAAIoI,IAAmC,GAApBA,EAAY3E,OAGxB,GAAI5C,GACV,WAEC,GAAIC,GACArD,CAEJ,OAAO,IAAId,GAAAqE,eACV,WAGCF,EAAaN,EAAEH,gBACf5C,EAAQ,GAAIZ,GAAAyK,MAA6Bc,IAG1C,SAACnH,GAEA,OACA,CAEC,MAAOH,GAAcrD,EAAM+D,OAE1BV,EAAazE,EAAAkH,KAAkB9F,EAAM8J,UAGtC,IAAGzG,GAAcA,EAAWnD,WAC3B,MAAOsD,GAAQI,YAAYP,EAAWK,QAEvC,EAAA,IAAGL,EAOH,MAAOG,GAAQG,YALdN,GAAWjD,UACXiD,EAAa,QAQhB,WAEChE,EAAAe,QAAQiD,EAAYrD,IAGrBmD,IAGF,KACAA,GAjDOJ,GAqDTZ,EAAAR,UAAAiJ,OAAA,WDpuBW,ICouBJ,GAAAD,MAAAE,EAAA,EAAAA,EAAAnJ,UAAAsE,OAAA6E,IAAAF,EAAAE,EAAA,GAAAnJ,UAAAmJ,EAEN,OAAOpJ,MAAKiJ,MAAMC,IAInBxI,EAAAR,UAAAmJ,MAAA,SACCrC,EACAC,GAAA,SAAAA,IAAAA,EAAwC1G,EAAUyD,SAElD,IAAI1C,GAAItB,KAAM0B,EAAYJ,EAAER,YAAc,IAC1C,OAAO,IAAIa,GACV,WAEC,GAAIqG,GACAC,EACAf,CAEJ,OAAO,IAAIzJ,GAAAqE,eACV,WAECkG,EAAkB1G,EAAEH,gBACpB+F,EAAO,GAAIxJ,GAAAyJ,WAAmBF,IAG/B,SAAClF,GAEA,GAAIE,EACJ,IAAGgG,IAAmBvI,EACtB,CACC,KAAMsI,EAAgBvJ,YAGrB,GADAwD,EAAU+F,EAAgB/F,SACtBiF,EAAKK,YAAYtF,GAGpB,MADAiF,GAAKI,cAAcrF,EAAS,MACrBF,EAAQI,YAAYF,EAG7BgG,GAAmB9K,EAAAkH,KAAe2C,GAEnC,KAAMiB,EAAiBxJ,YAGtB,GADAwD,EAAUgG,EAAiBhG,SACvBiF,EAAKK,YAAYtF,GAGpB,MADAiF,GAAKI,cAAcrF,EAAS,MACrBF,EAAQI,YAAYF,EAG7B,QAAO,GAGR,WAECrE,EAAAe,QAAQqJ,EAAiBC,IAG1BvG,IAGF,KAEAA,IAIFhB,EAAAR,UAAAoJ,SAAA,SAASzH,EAAc0H,GAEtBjM,EAAAkF,QAAQS,oBAAoBpB,EAAO,QACnC,IAAIqB,GAAWrB,EAEXP,EAAItB,KAAM0B,EAAYJ,EAAER,YAAc,IAG1C,OAFAQ,GAAEjC,kBAEK,GAAIsC,GACV,WAGC,GAAIqG,GACAC,EAEA3F,EAAe,EACfkH,GAAuB,CAE3B,OAAO,IAAI/L,GAAAqE,eACV,WAECQ,EAAQ,EACR0F,EAAkB1G,EAAEH,gBACpB8G,EAAmB9K,EAAAkH,KAAkBkF,GACrCC,GAAe,GAGhB,SAACzH,GAEA,MAAGO,IAAOY,IAETsG,GAAe,EACZvB,EAAiBxJ,YACZsD,EAAQI,YAAY8F,EAAiBhG,SAG3C+F,EAAgBvJ,YAElB6D,IACOP,EAAQI,YAAY6F,EAAgB/F,WAGpCuH,GACJvB,EAAiBxJ,YACjBsD,EAAQI,YAAY8F,EAAiBhG,UAG1C,WAECrE,EAAAe,QAAQqJ,EAAiBC,IAG1BvG,IAGF,KAEAA,IAKFhB,EAAAR,UAAAuJ,kBAAA,SAAkBC,GAEjB,GAAIpI,GAAItB,IAER,OAAO,IAAI2B,GACV,WAEC,GAAIsC,GACA0F,EACA/H,EACAgI,CAEJ,OAAO,IAAInM,GAAAqE,eACV,WAGC8H,EAAsB,GAAIpM,GAAAqM,gBACzBlI,EAAWmI,QAAWJ,IAGvB9H,EAAaN,EAAEH,eAEf,IAAI4I,GAAgBnI,EAAWnD,UAC/BkL,GAAOI,EACJ,EACA,EAEAA,IACF9F,EAASrC,EAAWK,UAGtB,SAACF,GAEA,OAAO4H,GAEN,IAAK,GACJ,MAAO5H,GAAQG,YAEhB,KAAK,GACJ,GAAG0H,EAAoBnL,WACtB,MAAOsD,GAAQI,YAAYyH,EAAoB3H,QAChD2H,GAAoBI,QACpBL,EAAO,EAIT,GAAIM,GAAShG,EAKTiG,EAAUtI,EAAWnD,UAQzB,OAPAkL,GAAOO,EACJ,EACA,EAEAA,IACFjG,EAASrC,EAAWK,SAEdF,EAAQI,YAAY8H,IAI5B,WAECrM,EAAAe,QAAQiD,EAAYgI,IAGrBtI,EAAER,aAGJ,KAEAQ,EAAER,aAIJJ,EAAAR,UAAAiK,gBAAA,SAAgB1G,GAEf,MAAOzD,MAAKyJ,kBAAkB9H,EAAWyI,KAAK3G,KAG/C/C,EAAAR,UAAAmK,UAAA,WDp0BW,ICo0BD,GAAAX,MAAAN,EAAA,EAAAA,EAAAnJ,UAAAsE,OAAA6E,IAAAM,EAAAN,EAAA,GAAAnJ,UAAAmJ,EAET,OAAOpJ,MAAKyJ,kBAAkBC,IAK/BhJ,EAAAR,UAAAoK,WAAA,SAAWC,GAEV,GAAIjJ,GAAItB,KAAMV,GAAYgC,EAAEjC,iBAC5B,OAAO,IAAIsC,GACV,WAEC,GAAIC,EAEJ,OAAO,IAAInE,GAAAqE,eACV,WAEC,IAECzC,EAAgBC,GAChBsC,EAAaN,EAAEH,gBAEhB,MAAM3C,MAMP,SAACuD,GAEA,IAGC,GADA1C,EAAgBC,GACbsC,EAAWnD,WACb,MAAOsD,GAAQI,YAAYP,EAAWK,SAExC,MAAMzD,GAEL+L,EAAQ/L,GAET,OAAO,GAGR,WAECZ,EAAAe,QAAQiD,QAOblB,EAAAR,UAAAsK,cAAA,SAAchJ,GAEb,GAAIF,GAAItB,KAAMV,GAAYgC,EAAEjC,iBAE5B,OAAO,IAAIsC,GACV,WAEC,GAAIC,EAEJ,OAAO,IAAInE,GAAAqE,eACV,WAECzC,EAAgBC,GAChBsC,EAAaN,EAAEH,iBAGhB,SAACY,GAGA,MADA1C,GAAgBC,GACRsC,EAAWnD,WAChBsD,EAAQI,YAAYP,EAAWK,UAC/B,GAGJ,WAEC,IAECrE,EAAAe,QAAQiD,GDt2BK,QC02BbJ,UASNd,EAAAR,UAAA+D,OAAA,SAAOwG,GAEN,GAAQ,EAALA,IAAWlI,SAASkI,GACtB,KAAM,IAAIlH,OAAM,uBAEjBjG,GAAAkF,QAAQC,OAAOgI,EAAM,OAErB,IAAcvG,GAAV5C,EAAItB,IAER,OAAO,IAAI2B,GACV,WAEC,GAAIC,EACJ,OAAO,IAAInE,GAAAqE,eACV,WAECF,EAAaN,EAAEH,iBAGhB,SAACY,GAEA,GAAI2I,GAAYxN,EAAayN,WAAcF,EAE3C,KADAvG,EAAM,EACIuG,EAAJvG,GAAYtC,EAAWnD,YAE5BiM,EAAMxG,KAAStC,EAAWK,OAI3B,OADAyI,GAAMnG,OAASL,EACRA,GAAOnC,EAAQI,YAAYuI,IAGnC,WAEC9M,EAAAe,QAAQiD,IAGTN,EAAER,aAGJ,KAEAQ,EAAER,aAKJJ,EAAAR,UAAA0K,MAAA,WAEC,GAAItJ,GAAItB,IACRsB,GAAEjC,iBAEF,IAAIwL,EACJ,OAAO,IAAIlJ,GACV,WAEC,MAAOkJ,KAAqBA,EAAmBvJ,EAAEH,kBAGlD,WAECvD,EAAAe,QAAQkM,IAGTvJ,EAAER,aAKLJ,GAnrDQ7C,EAAAiN,eADK/N,GAAA2D,mBAAkBA,CA6rD/B,IAAAiB,GAAA,SAAA7B,GAIC,QAAA6B,GACCoJ,EACAnK,EACAc,GAAA,SAAAA,IAAAA,EAAA,MAEA5B,EAAAe,KAAAb,KAAM+K,EAAmBnK,GACzBZ,KAAKc,WAAaY,EA+mDpB,MAxnDQlC,GAAAmC,EAAA7B,GAiBA6B,EAAA0C,KAAP,SAAe2G,GAEd,GAAIxM,GAAImD,EAAW+C,QAAQsG,EAC3B,KAAIxM,EAAG,KAAM,IAAIV,GAAAmN,8BACjB,OAAOzM,IAcDmD,EAAA+C,QAAP,SACCsG,EACAE,GAEA,GAFA,SAAAA,IAAAA,EAAA,MAEG7N,EAAA0H,KAAKoG,SAASH,IAAW3N,EAAA0H,KAAKC,SAASgG,GAC1C,CACC,GAAGA,YAAkBrJ,GACpB,MAAOqJ,EAER,IAAG3N,EAAA0H,KAAKqG,YAAeJ,GACtB,MAAO,IAAIK,GAAmBL,EAE/B,IAAG7N,EAAAmO,aAAgBN,GAClB,MAAO,IAAIrJ,GACV,WAAI,MAAAqJ,GAAO7J,iBACX,KAAM6J,EAAOtJ,WAGhB,MAAOwJ,IAGDvJ,EAAA4J,YAAP,SAAsBP,GAErB,MAAOrJ,GAAW+C,QAAQsG,IAAWrJ,EAAWe,SAQ1Cf,EAAAmI,QAAP,SAAkBkB,GAEjB,MAAGA,aAAkBrJ,GACbqJ,EAAOlB,UAER3M,EAAA2M,QAAQkB,IAMTrJ,EAAA6J,OAAP,SAAiBC,GAEhB,GAAIvH,GAAMuH,GAAUA,EAAOlH,MAG3B,KAAIL,IAAQ3B,SAAS2B,GACpB,KAAM,IAAIhG,GAAA0E,4BAA4B,SAAU2B,OAEjD,OAAO,IAAI7D,GACV,WAAM,MAAA,IAAIjD,GAAAqE,eACT,KACA,SAACC,GACA,MAAAA,GAAQI,YAAY7E,EAAAkF,QAAQkJ,OAAOjG,OAAOgG,MAC3C,MAKI9J,EAAAgK,WAAP,WD78BW,IC68BU,GAAAC,MAAAxC,EAAA,EAAAA,EAAAnJ,UAAAsE,OAAA6E,IAAAwC,EAAAxC,EAAA,GAAAnJ,UAAAmJ,EAEpB,OAAOzH,GAAW6J,OAAOI,IAGnBjK,EAAAkK,MAAP,SAAgBJ,GAEf,GAAIvH,GAAMuH,GAAUA,EAAOlH,MAG3B,KAAIL,IAAQ3B,SAAS2B,GACpB,KAAM,IAAIhG,GAAA0E,4BAA4B,SAAU2B,OAEjD,OAAO,IAAI7D,GACV,WAEC,GAAImB,GAAe,CACnB,OAAO,IAAIpE,GAAAqE,eACV,WAECD,EAAQ,GAET,SAACE,GAGA,MADGF,IAAO4J,EAAOlH,SAAQ1C,EAAQ,GAC1BE,EAAQI,YAAYsJ,EAAO5J,QAEnC,MAMGF,EAAAmK,aAAP,WDx9BW,ICw9BY,GAAAF,MAAAxC,EAAA,EAAAA,EAAAnJ,UAAAsE,OAAA6E,IAAAwC,EAAAxC,EAAA,GAAAnJ,UAAAmJ,EAEtB,OAAOzH,GAAWkK,MAAMD,IAGlBjK,EAAAe,MAAP,WAGC,MAAO,IAAIqJ,GAAoB3N,IAKzBuD,EAAAqK,OAAP,SAAiBpM,EAAW0C,GAE3B,MAF2B,UAAAA,IAAAA,EAAA2J,EAAAA,GAEtB3J,EAAM,EAGJC,SAASD,IAAUhF,EAAAkF,QAAQC,OAAOH,EAAO,SAC7C,GAAIyJ,GACN,WAEC,GAAIjH,GAAWxC,EACXT,EAAe,CAEnB,OAAO,IAAIpE,GAAAqE,eACV,WAAQD,EAAQ,GAChB,SAACE,GAAW,MAACF,KAAQiD,GAAM/C,EAAQI,YAAYvC,IAC/C,MACA,KAIA,GAAI+B,GACN,WACC,MAAA,IAAIlE,GAAAqE,eACH,KACA,SAACC,GAAW,MAAAA,GAAQI,YAAYvC,KAChC,KAtBK+B,EAAWe,SA4Bbf,EAAAuK,mBAAP,SACCzK,EACAb,GAGA,MAAO,IAAIF,GACV,WAEC,GAAId,EACJ,OAAO,IAAInC,GAAAqE,eACV,WAEClC,EAAU6B,KAGX,SAACM,GAAW,MAAAA,GAAQI,YAAYvC,IAEhC,WAECgB,EAAUhB,KAGX,MAYG+B,EAAAyI,KAAP,SAAexK,GAEd,MAAO+B,GAAWqK,OAAUpM,EAAS,IAK/B+B,EAAAwK,MAAP,SACCC,EACA9J,EACA+J,GAEA,GAFA,SAAAA,IAAAA,EAAA,IAEI9J,SAAS6J,GACZ,KAAM,IAAIlO,GAAA0E,4BAA4B,QAASwJ,EAAO,2BAEvD,MAAK9J,EAAM,GACV,MAAOX,GAAWe,OAEnB,KAAI2J,EACH,KAAM,IAAInO,GAAA0E,4BAA4B,OAAQyJ,EAAM,wBAErD,KAAI9J,SAAS8J,GACZ,KAAM,IAAInO,GAAA0E,4BAA4B,OAAQyJ,EAAM,2BAIrD,OAFA/O,GAAAkF,QAAQC,OAAOH,EAAO,SAEf,GAAIyJ,GACV,WAEC,GAAItI,GACAqB,EAAWxC,EACXT,EAAe,CAEnB,OAAO,IAAIpE,GAAAqE,eACV,WAECD,EAAQ,EACR4B,EAAQ2I,GAGT,SAACrK,GAEA,GAAIgE,GACClE,IAAQiD,GACL/C,EAAQI,YAAYsB,EAK5B,OAHGsC,IAAgBzD,EAANT,IACZ4B,GAAS4I,GAEHtG,IAGR,MAKGpE,EAAA2K,UAAP,SACCF,EACA9J,EACA+J,GAIA,MAJA,UAAAA,IAAAA,EAAA,GAEAA,EAAuB,GAAhBE,KAAKC,IAAIH,GAET1K,EAAWwK,MAAMC,EAAO9J,EAAO+J,IAIhC1K,EAAA8K,WAAP,SACCL,EACAC,GAEA,GAHA,SAAAD,IAAAA,EAAA,GACA,SAAAC,IAAAA,EAAA,IAEI9J,SAAS6J,GACZ,KAAM,IAAIlO,GAAA0E,4BAA4B,QAASwJ,EAAO,2BAEvD,KAAIC,EACH,KAAM,IAAInO,GAAA0E,4BAA4B,OAAQyJ,EAAM,wBAErD,KAAI9J,SAAS8J,GACZ,KAAM,IAAInO,GAAA0E,4BAA4B,OAAQyJ,EAAM,2BAErD,OAAO,IAAI3L,GACV,WAEC,GAAI+C,EAEJ,OAAO,IAAIhG,GAAAqE,eACV,WAEC2B,EAAQ2I,GAGT,SAACrK,GAEA,GAAIE,GAAiBwB,CAErB,OADAA,IAAS4I,EACFtK,EAAQI,YAAYF,KAG5B,MAMGN,EAAA+K,mBAAP,SACCN,EACAC,GAEA,MAHA,UAAAD,IAAAA,EAAA,GACA,SAAAC,IAAAA,EAAA,GAEO1K,EAAW8K,WAAWL,GAAQC,IAG/B1K,EAAAgL,QAAP,SACCP,EACAQ,EACAP,GAEA,GAFA,SAAAA,IAAAA,EAAA,GAEGQ,MAAMD,KAAQrK,SAASqK,GACzB,KAAM,IAAI1O,GAAA0E,4BAA4B,KAAMgK,EAAI,2BAEjD,IAAGP,IAAS9J,SAAS8J,GACpB,KAAM,IAAInO,GAAA0E,4BAA4B,OAAQyJ,EAAM,oCAKrD,OAFAA,GAAOE,KAAKC,IAAIH,GAET,GAAIN,GACV,WAEC,GAAItI,EAEJ,OAAO,IAAIhG,GAAAqE,eAAuB,WAAQ2B,EAAQ2I,GAC3CQ,EAANR,EAEC,SAAArK,GAEC,GAAIgE,GAAwB6G,GAAPnJ,GAAa1B,EAAQI,YAAYsB,EAKtD,OAHGsC,KACFtC,GAAS4I,GAEHtG,GAGR,SAAAhE,GAEC,GAAIgE,GAAiBtC,GAAOmJ,GAAM7K,EAAQI,YAAYsB,EAKtD,OAHGsC,KACFtC,GAAS4I,GAEHtG,IAEP,MAKCpE,EAAAmL,QAAP,SAAeC,EAAcC,EAAaC,GAEzC,GAFyC,SAAAA,IAAAA,EAAA,IAE9B,OAARF,GAAgBA,IAAQrN,EAC1B,KAAM,IAAIzB,GAAAiP,sBAAsB,QACjC,IAAI9G,SAAc2G,EAClB,IAAG3G,GAAM/I,EAAA0H,KAAK0B,OACb,KAAM,IAAIlD,OAAM,uCAAyC6C,EAAO,KAWjE,OATG4G,aAAmBG,UAErBF,GAAUD,EAAkB,WAAI,IAAM,GACtCC,GAAUD,EAAiB,UAAI,IAAM,GACrCA,EAAUA,EAAQhC,QAGM,KAAtBiC,EAAMG,QAAQ,OAAYH,GAAS,KAE/B,GAAIlB,GACV,WAEC,GAAIsB,EACJ,OAAO,IAAI5P,GAAAqE,eACV,WAECuL,EAAQ,GAAIF,QAAOH,EAASC,IAG7B,SAAClL,GAGA,GAAIuL,GAAQD,EAAME,KAAKR,EACvB,OAAgB,QAARO,EAAgBvL,EAAQI,YAAYmL,IAAS,OASnD3L,EAAA6L,SAAP,SAAmBC,EAA8BnL,GAGhD,MAHgD,UAAAA,IAAAA,EAAA2J,EAAAA,GAG7CY,MAAMvK,IAAiB,GAAPA,EACXX,EAAWe,QAEZH,SAASD,IAAUhF,EAAAkF,QAAQC,OAAOH,EAAO,SAE/C,GAAIyJ,GACH,WAEC,GAAIjH,GAAWxC,EACXT,EAAe,CAEnB,OAAO,IAAIpE,GAAAqE,eACV,WAECD,EAAQ,GAGT,SAACE,GAEA,GAAIE,GAAiBJ,GACrB,OAAeiD,GAAR7C,GAAaF,EAAQI,YAAYsL,EAAQxL,MAGjD,KAIH,GAAIvB,GACH,WAEC,GAAImB,GAAe,CACnB,OAAO,IAAIpE,GAAAqE,eACV,WAECD,EAAQ,GAGT,SAACE,GAAW,MAAAA,GAAQI,YAAYsL,EAAQ5L,QAExC,MAKEF,EAAA+L,OAAP,SACCpI,EACAqI,EACAC,GAEA,MAFA,UAAAA,IAAAA,GAAA,GAEO,GAAIlN,GACV,WAEC,GACI+C,GACA+B,EAFA3D,EAAe,CAGnB,OAAO,IAAIpE,GAAAqE,eACV,WAECD,EAAQ,EACR4B,EAAQ6B,EACRE,GAAWoI,GAGZ,SAAC7L,GAEA,GAAIqB,GAAIvB,GAKR,OAJG2D,GACFA,GAAU,EAEV/B,EAAQkK,EAAalK,EAAOL,GACtBrB,EAAQI,YAAYsB,KAG5B,MAMG9B,EAAAyF,QAAP,SACCnG,EACAO,EACAqM,GAIA,MAJA,UAAAA,IAAAA,EAAA5B,EAAAA,GAIO9O,EAAAiK,QAAQnG,EAAYO,EAAQqM,IAG7BlM,EAAAmM,IAAP,SACC7M,EACAiE,GAIA,MAAO/H,GAAA2Q,IAAI7M,EAAYiE,IAKjBvD,EAAAkM,IAAP,SAAWpC,GAEV,MAAOA,GACLsC,UAAU,SAAAjL,GAAI,MAAAA,MAAKmJ,EAAAA,KAAU,GAC7B+B,UAAUzN,EAAUJ,UAGhBwB,EAAAsM,IAAP,SAAWxC,GAEV,MAAOA,GACLsC,UAAU,SAAAjL,GAAI,MAAAA,MAAKmJ,EAAAA,KAAU,GAC7B+B,UAAUzN,EAAUD,SAShBqB,EAAAuM,MAAP,SACChF,GAEA,IAAIA,EACH,KAAM,IAAIjL,GAAAiP,sBAAsB,cAEjC,OAAO,IAAIvL,GACV,WAEC,GAAIpD,GACA4P,EACAtM,CAEJ,OAAO,IAAIpE,GAAAqE,eACV,WAECD,EAAQ,EACRtD,EAAQ,GAAIZ,GAAAyK,MACZ+F,EAAiBhR,EAAAkH,KAAe6E,IAGjC,SAACnH,GAEA,GAAIvD,EAGJ,IAAG2P,EACH,CACC,MAAO3P,GAAK2P,EAAe1P,YAC3B,CACC,GAAIqG,GAAIqJ,EAAelM,OACvBzD,GAAIF,EAAeC,EAAOuG,GAAK3H,EAAAkH,KAAeS,IAG3CtG,IACH2P,EAAiB,MAGnB,MAAO3P,GAAKD,EAAM+D,OAEjB9D,EAAIF,EAAeC,EAAOA,EAAM8J,UAGjC,OAAO7J,GACJuD,EAAQI,YAAY3D,EAAEyD,SACtBF,EAAQG,cAIZ,WAECtE,EAAAe,QAAQgG,MAAMpG,EAAM6P,QACpBxQ,EAAAe,QAAQwP,EAAgB5P,GACxB4P,EAAiB,KACjB5P,EAAQ,UASboD,EAAAzB,UAAAqB,SAAA,SACCC,EACAC,EACAC,GAEA,MAFA,UAAAA,IAAAA,EAAoB1B,KAAK0B,WAEH5B,EAAAI,UAAMqB,SAAQV,KAAAb,KAACwB,EAAQC,EAAaC,IAK3DC,EAAAzB,UAAAmC,KAAA,SAAKC,GAEJ,MAAsBxC,GAAAI,UAAMmC,KAAIxB,KAAAb,KAACsC,IAGlCX,EAAAzB,UAAAmO,UAAA,SAAUnI,GAGT,MADAlG,MAAKX,kBACEW,KAAKuB,SACX,SAAC3B,EAAWiC,GACX,MAAAqE,GAAUtG,EAASiC,GAChB,EACA,KAINF,EAAAzB,UAAAoO,UAAA,SAAUpI,GAIT,GAFAlG,KAAKX,mBAED6G,EACH,KAAM,IAAIjI,GAAAiP,sBAAsB,YAEjC,OAAOlN,MAAKuB,SACX,SAAC3B,EAAWiC,GACX,MAAAqE,GAAUtG,EAASiC,GAChB,EACA,GACJ,KACA,OAKFF,EAAAzB,UAAA6N,UAAA,SAAU7H,EAAwBqI,GAIjC,GAFAvO,KAAKX,mBAED6G,EACH,KAAM,IAAIjI,GAAAiP,sBAAsB,YAEjC,KAAIqB,EACH,MAAOvO,MAAKuB,SACX,SAAC3B,EAAWiC,GACX,MAAAqE,GAAUtG,EAASiC,GAChB,EACA,GACJ,KACA,KAGF,IAAI2M,IAAgB,CACpB,OAAOxO,MAAKuB,SACX,SAAC3B,EAAWiC,GAEX,MAAG2M,GACK,GAERA,EAAQtI,EAAUtG,EAASiC,GACpB,IAER,WAEC2M,GAAQ,GAET,OAKF7M,EAAAzB,UAAAkH,QAAA,SAAQ5F,GAGP,GAAIF,GAAItB,IACRsB,GAAEjC,kBACFlC,EAAAsR,eAAenN,EAAEI,UAEjB,IAAIG,GAAe,CAEnBjE,GAAAuF,MACC7B,EAAEH,gBAAiB,SAAA3C,GAKlB,IAHArB,EAAAsR,eAAejQ,EAAEkD,WAGXJ,EAAEjC,mBAAqBb,EAAEC,YAE3B+C,EAAOhD,EAAEyD,QAASJ,QAAW,QAQpCF,EAAAzB,UAAA4J,QAAA,SAAQ5D,GAEP,MAAOA,GACJlG,KAAKiG,MAAMC,GAAW4D,UACtB9J,KAAK0O,YAGT/M,EAAAzB,UAAAwO,OAAA,SAAOC,EAAY9M,EAAkBS,GAGpC,GAHkB,SAAAT,IAAAA,EAAA,GAAkB,SAAAS,IAAAA,EAAA2J,EAAAA,GAEpCjM,KAAKX,mBACDsP,EAAQ,KAAM,IAAI1Q,GAAAiP,sBAAsB,SAS5C,OARA5P,GAAAkF,QAAQS,oBAAoBpB,GAG5B1E,EAAAiK,QAAWpH,KAAM,SAAC8G,EAAG1D,GAEpBuL,EAAOvL,EAAIvB,GAASiF,GAClBxE,GAEIqM,GAGRhN,EAAAzB,UAAA4I,SAAA,SACC7J,EACA2P,EACA3H,GADA,SAAA2H,IAAAA,EAAsCrO,EAAUyD,UAChD,SAAAiD,IAAAA,EAA2C1G,EAAUyD,SAErD,IAAI6K,GAAkC,GAAInR,GAAAyJ,WAA2BF,EAYrE,OAXAjH,MAAKoH,QACJ,SAAAN,GAEC,GAAIO,GAAMpI,EAAY6H,GAClBlH,EAAUgP,EAAgB9H,GAE1B4D,EAAQmE,EAAKC,SAASzH,EACvBqD,KAAQhL,EAAOgL,EAAMqE,KAAKnP,GACxBiP,EAAKvH,cAAcD,GAAMzH,MAGzB,GAAIoP,GAAqBH,IAGjClN,EAAAzB,UAAA+O,MAAA,SACChQ,EACA2P,GAEA,GAAIM,KAKJ,OAJAlP,MAAKoH,QAAQ,SAACN,EAAG1D,GAEhB8L,EAAIjQ,EAAY6H,EAAG1D,IAAMwL,EAAgB9H,EAAG1D,KAEtC8L,GAGRvN,EAAAzB,UAAAiP,aAAA,SACClQ,EACA2P,EACA3H,GAAA,SAAAA,IAAAA,EAA2C1G,EAAUyD,SAErD,IAAI6K,GAAgC,GAAInR,GAAAyJ,WAAyBF,EAEjE,OADAjH,MAAKoH,QAAQ,SAACN,EAAG1D,GAAK,MAAAyL,GAAKvH,cAAcrI,EAAY6H,EAAG1D,GAAIwL,EAAgB9H,EAAG1D,MACxEyL,GAGRlN,EAAAzB,UAAAkP,eAAA,SAAeC,EAAuBnK,GAErC,MAFc,UAAAmK,IAAAA,EAAA,IAAuB,SAAAnK,IAAAA,EAA+B3E,EAAUyD,UAEvEhE,KAAKyF,OAAOP,GAAU4E,UAAUxB,KAAK+G,IAM7C1N,EAAAzB,UAAAoP,eAAA,SAAehN,GAAA,SAAAA,IAAAA,EAAA,EAEd,IAAIhB,GAAItB,IAER,MAAKsC,EAAM,GACV,MAAOhB,EAER,KAAIiB,SAASD,GACZ,MAAOX,GAAWe,OAEnBpF,GAAAkF,QAAQC,OAAOH,EAAO,QACtB,IAAIwC,GAAIxC,CAER,OAAO,IAAIX,GACV,WAEC,GAAIC,GACA2N,CAEJ,OAAO,IAAI9R,GAAAqE,eACV,WAECF,EAAaN,EAAEH,gBACfoO,EAAI,GAAI5R,GAAAyK,OAGT,SAACrG,GAEA,KAAMH,EAAWnD,YAMhB,GAHA8Q,EAAE7Q,QAAQkD,EAAWK,SAGlBsN,EAAEjN,MAAMwC,EAEV,MAAO/C,GAAQI,YAAYoN,EAAElH,UAE/B,QAAO,GAGR,WAECzK,EAAAe,QAAQiD,EAAY2N,QAOzB5N,EAAAzB,UAAAsP,WAAA,SAAWlN,GAEV,KAAKA,EAAM,GACV,MAAOX,GAAWe,OAEnB,IAAIpB,GAAItB,IAER,OAAIuC,UAASD,IAGbhF,EAAAkF,QAAQC,OAAOH,EAAO,SAGfhB,EAAEmO,UACP9M,KAAKL,GACLmN,WAPMnO,GAYTK,EAAAzB,UAAA+F,MAAA,SAAMC,GAEL,MAAsBpG,GAAAI,UAAM+F,MAAKpF,KAAAb,KAACkG,IAGnCvE,EAAAzB,UAAAuF,OAAA,SAAgBP,GAEf,MAA4BpF,GAAAI,UAAMuF,OAAM5E,KAAAb,KAACkF,IAW1CvD,EAAAzB,UAAAoE,WAAA,SACCqB,EACA5B,GAEA,MAAO/D,MAAK0F,YAAYC,EAAoB5B,IAK7CpC,EAAAzB,UAAA8F,OAAA,SAAOd,GAEN,MAFM,UAAAA,IAAAA,EAA4B3E,EAAUyD,UAErChE,KAAK8F,QAAQZ,IAGrBvD,EAAAzB,UAAAuP,QAAA,WAEC,GAAInO,GAAItB,KAAMV,GAAYgC,EAAEjC,iBAG5B,OAFAlC,GAAAsR,eAAenN,EAAER,YAEV,GAAIa,GACV,WAEC,GAAIsC,GACApC,EAAe,CAEnB,OAAO,IAAIpE,GAAAqE,eACV,WAECzC,EAAgBC,GAChB2E,EAAS3C,EAAEwI,UACXjI,EAAQoC,EAAOM,QAGhB,SAACxC,GAAW,MAAAF,IAASE,EAAQI,YAAY8B,IAASpC,KAElD,WAECoC,EAAOM,OAAS,KAKnB,WAECjF,GAAW,KAKdqC,EAAAzB,UAAAwP,QAAA,WAEC,GAAIpO,GAAItB,KAAMV,GAAYgC,EAAEjC,iBAG5B,OAFAlC,GAAAsR,eAAenN,EAAER,YAEV,GAAIa,GACV,WAEC,GAAIsC,GACA0L,EACAzL,CAEJ,OAAO,IAAIzG,GAAAqE,eACV,WAECzC,EAAgBC,GAChB2E,EAAS3C,EAAEwI,UACX6F,EAAWzL,EAAMD,EAAOM,QAGzB,SAACxC,GAGA,IAAImC,EACH,MAAOnC,GAAQG,YAEhB,IAAI0N,GAAgBtS,EAAAkF,QAAQkJ,OAAOxH,GAC/B2L,EAAgB5L,EAAO2L,EAQ3B,OANA3L,GAAO2L,GAAiB3L,IAASC,GACjCD,EAAOC,GAAO,KAEXA,EAAI,IAAI,IACVD,EAAOM,OAASL,GAEVnC,EAAQI,YAAY0N,IAG5B,WAEC5L,EAAOM,OAAS,KAKnB,WAECjF,GAAW,KAKdqC,EAAAzB,UAAAoC,MAAA,SAAM4D,GAEL,GAAI5D,GAAe,CAiBnB,OAhBAtC,MAAKoH,QACJlB,EAGC,SAACY,EAAG1D,GAEA8C,EAAUY,EAAG1D,MAAKd,GAItB,aAEGA,IAIEA,GAIRX,EAAAzB,UAAA4P,IAAA,SAAI5J,GAEH,IAAIA,EACH,KAAM,IAAIjI,GAAAiP,sBAAsB,YAEjC,IAAInH,IAAS,CASb,OARA/F,MAAKoH,QAAQ,SAACN,EAAG1D,GAEhB,MAAI8C,GAAUY,EAAG1D,GAAjB,QAEC2C,GAAS,GACF,KAGFA,GAIRpE,EAAAzB,UAAA6P,MAAA,SAAM7J,GAEL,MAAOlG,MAAK8P,IAAI5J,IAIjBvE,EAAAzB,UAAAyD,IAAA,SAAIuC,GAEH,IAAIA,EACH,MAAOpG,GAAAI,UAAMyD,IAAG9C,KAAAb,KAEjB,IAAI+F,IAAS,CASb,OANA/F,MAAKoH,QACJ,SAACN,EAAG1D,GAGH,MADA2C,GAASG,EAAUY,EAAG1D,IACd2C,IAEHA,GAKRpE,EAAAzB,UAAA8P,KAAA,SAAK9J,GAEJ,MAAOlG,MAAK2D,IAAIuC,IAIjBvE,EAAAzB,UAAA+P,SAAA,SAAmBxM,EAASwD,GAE3B,MAAOA,GACJjH,KAAK2D,IAAI,SAAAb,GAAI,MAAAmE,GAAgBnE,KAAKmE,EAAgBxD,KAClDzD,KAAK2D,IAAI,SAAAb,GAAI,MAAAA,KAAIW,KAMrB9B,EAAAzB,UAAAkN,QAAA,SAAkB3J,EAASwD,GAE1B,GAAIuH,GAAe,EAwBnB,OAvBAxO,MAAKoH,QACJH,EAEC,SAACrH,EAAWwD,GAEX,MAAGpG,GAAO6K,SAASZ,EAAgBrH,EAASwD,GAAI6D,EAAgBxD,EAAOL,IAAI,IAE1EoL,EAAQpL,GACD,GAHR,QAOD,SAACxD,EAAWwD,GAGX,MAAGpG,GAAO6K,SAASjI,EAAS6D,GAAO,IAElC+K,EAAQpL,GACD,GAHR,SAQIoL,GAGR7M,EAAAzB,UAAAgQ,YAAA,SAAsBzM,EAASwD,GAE9B,GAAIlB,GAAgB,EAgBpB,OAfA/F,MAAKoH,QACJH,EAEC,SAACrH,EAAWwD,GAERpG,EAAO6K,SAASZ,EAAgBrH,EAASwD,GAAI6D,EAAgBxD,EAAOL,IAAI,KAAO2C,EAC/E3C,IAIJ,SAACxD,EAAWwD,GAERpG,EAAO6K,SAASjI,EAAS6D,GAAO,KAAOsC,EAAS3C,KAG/C2C,GAGRpE,EAAAzB,UAAA+I,MAAA,SAAMC,GAEL,MAAsBpJ,GAAAI,UAAM+I,MAAKpI,KAAAb,KAACkJ,IAGnCvH,EAAAzB,UAAAiJ,OAAA,WD54CW,IC44CJ,GAAAD,MAAAE,EAAA,EAAAA,EAAAnJ,UAAAsE,OAAA6E,IAAAF,EAAAE,EAAA,GAAAnJ,UAAAmJ,EAEN,OAAOpJ,MAAKiJ,MAAMC,IAInBvH,EAAAzB,UAAAiQ,UAAA,SACCnJ,EACAC,GAEA,GAAI3F,GAAItB,IAER,OAAO,IAAI2B,GACV,WAEC,GAAIC,GACAsF,EACAkJ,CAEJ,OAAO,IAAI3S,GAAAqE,eACV,WAECF,EAAaN,EAAEH,gBAEf+F,EAAO,GAAIxJ,GAAAyJ,WAAuBF,GAClCmJ,EAAO,GAAI1S,GAAAyJ,WAAuBF,GAElC9J,EAAAiK,QAAQJ,EAAQ,SAAAK,GAEfH,EAAKI,cAAcD,GAAK,MAI1B,SAACtF,GAEA,KAAMH,EAAWnD,YACjB,CACC,GAAIwD,GAAUL,EAAWK,OACzB,KAAImO,EAAK7I,YAAYtF,IAAYiF,EAAKK,YAAYtF,GAGjD,MADAmO,GAAK9I,cAAcrF,GAAS,GACrBF,EAAQI,YAAYF,GAG7B,MAAOF,GAAQG,cAGhB,WAECtE,EAAAe,QAAQiD,EAAYsF,EAAMkJ,IAE3B9O,EAAER,aAGJ,KACAQ,EAAER,aAIJa,EAAAzB,UAAAmQ,cAAA,SACCrJ,EACAsJ,GAEA,MAFA,UAAAA,IAAAA,EAAyCtT,EAAO6K,UAEzCjK,EAAAuF,MACNnD,KAAKmB,gBACL,SAAAoP,GAAK,MAAA3S,GAAAuF,MACJhG,EAAAkH,KAAe2C,GACf,SAAAwJ,GAKC,IAFArT,EAAAsR,eAAe8B,EAAG7O,WAAa8O,EAAG9O,WAE5B6O,EAAG9R,YAER,IAAI+R,EAAG/R,aAAe6R,EAAiBC,EAAGtO,QAASuO,EAAGvO,SACrD,OAAO,CAGT,QAAQuO,EAAG/R,gBAmBfkD,EAAAzB,UAAAiG,OAAA,SAAcC,GAEb,MAA0BtG,GAAAI,UAAMiG,OAAMtF,KAAAb,KAACoG,IAGxCzE,EAAAzB,UAAA6G,OAAA,SACCC,EACAC,GAEA,MAAsBnH,GAAAI,UAAM6G,OAAMlG,KAAAb,KAACgH,EAAQC,IAG5CtF,EAAAzB,UAAAuH,SAAA,SAASR,GAER,MAAsBnH,GAAAI,UAAMuH,SAAQ5G,KAAAb,KAACiH,IAGtCtF,EAAAzB,UAAAwH,qBAAA,SAA+BT,GAE9B,MAF8B,UAAAA,IAAAA,EAAwC1G,EAAUyD,UAE1DlE,EAAAI,UAAMwH,qBAAoB7G,KAAAb,KAACiH,IAKlDtF,EAAAzB,UAAAuQ,QAAA,SAAiCxR,GAEhC,MAFgC,UAAAA,IAAAA,EAAgCsB,EAAUyD,UAEnE,GAAI0M,GAA0B1Q,KAAMf,EAAa,IAGzD0C,EAAAzB,UAAAyQ,WAAA,SAAWC,GAEV,MAAO,IAAIF,GAAyB1Q,KAAM,KAAM,EAAiB,KAAM4Q,IAGxEjP,EAAAzB,UAAA2Q,mBAAA,SAAmBD,GAElB,MAAO,IAAIF,GAAyB1Q,KAAM,KAAM,GAAkB,KAAM4Q,IAGzEjP,EAAAzB,UAAA4Q,kBAAA,SAA2C7R,GAE1C,MAF0C,UAAAA,IAAAA,EAAgCsB,EAAUyD,UAE7E,GAAI0M,GAA0B1Q,KAAMf,EAAa,KAmDzD0C,EAAAzB,UAAA+D,OAAA,SAAOwG,GAEN,MAAwB3K,GAAAI,UAAM+D,OAAMpD,KAAAb,KAACyK,IAatC9I,EAAAzB,UAAA6Q,QAAA,SACC9R,EACA2P,EACA3H,GAHD,GAAA+J,GAAAhR,IAMC,OADI4O,KAAiBA,EAAkBrO,EAAUyD,UAC1C,GAAIrC,GACV,WAAM,MAAAqP,GAAKlI,SAAS7J,EAAa2P,EAAiB3H,GAChD9F,mBAUJQ,EAAAzB,UAAA+Q,YAAA,SACChS,EACA2P,EACA7K,EAEAkD,GAFA,SAAAlD,IAAAA,EACG,SAACsD,EAAU6J,GAAwB,MAAA,IAAIC,GAAyB9J,EAAK6J,KACxE,SAAAjK,IAAAA,EACG1G,EAAUyD,SAGb,IAAI1C,GAAItB,IAER,OADI4O,KAAiBA,EAAkBrO,EAAUyD,UAC1C,GAAIrC,GACV,WAEC,GAAIC,GACAyF,EACAM,EACAyJ,EACAlN,CAEJ,OAAO,IAAIzG,GAAAqE,eACV,WAECF,EAAaN,EAAEH,gBACZS,EAAWnD,YAEb4I,EAAMpI,EAAY2C,EAAWK,SAC7B0F,EAAaV,EAAgBI,GAC7B+J,GAASxC,EAAgBhN,EAAWK,UACpCiC,EAAM,GAGNkN,EAAQ,MAGV,SAACrP,GAEA,IAAIqP,EACH,MAAOrP,GAAQG,YAGhB,KADA,GAAImP,GAAiBvM,GACduM,EAAUzP,EAAWnD,cAE3BqG,EAAIlD,EAAWK,QACZ0F,IAAaV,EAAgBhI,EAAY6F,MAC3CsM,EAAMlN,KAAS0K,EAAgB9J,EAKjC,IAAIiB,GACGhC,EAAesD,EAAK+J,EAe3B,OAbGC,IAEFvM,EAAIlD,EAAWK,QACfoF,EAAMpI,EAAY6F,GAClB6C,EAAaV,EAAgBI,GAC7B+J,GAASxC,EAAgB9J,IACzBZ,EAAM,GAINkN,EAAQ,KAGFrP,EAAQI,YAAY4D,IAG5B,WAECnI,EAAAe,QAAQiD,GACRwP,EAAQ,UAWbzP,EAAAzB,UAAA8N,UAAA,SACC3I,EACAC,GAEA,MAAOtF,MAAKoF,KAAKC,EAAMC,GAAMgM,iBAG9B3P,EAAAzB,UAAAqR,QAAA,SAAQrM,GAAA,SAAAA,IAAAA,EAA+B7H,EAAA0H,KAAKyM,YAE3C,IAAIlP,GAAQ,EACRmP,EAAMzR,KAAKyR,IAAI,SAACjT,EAAG4E,GAGtB,MADAd,KACO4C,EAAS1G,EAAG4E,IAGpB,OAAQyJ,OAAM4E,KAASnP,EACpBoP,IACCD,EAAInP,GAITX,EAAAzB,UAAA2N,IAAA,WAEC,MAAO7N,MAAKgO,UAAUzN,EAAUJ,UAGjCwB,EAAAzB,UAAA+N,IAAA,WAEC,MAAOjO,MAAKgO,UAAUzN,EAAUD,SAGjCqB,EAAAzB,UAAAyR,MAAA,SAAgB1S,GAEf,MAFe,UAAAA,IAAAA,EAAoCsB,EAAUyD,UAEtDhE,KAAKgO,UAAU,SAAC5N,EAAKC,GAAQ,MAACpB,GAAYmB,GAAGnB,EAAYoB,GAAMD,EAAIC,KAG3EsB,EAAAzB,UAAA0R,MAAA,SAAgB3S,GAEf,MAFe,UAAAA,IAAAA,EAAoCsB,EAAUyD,UAEtDhE,KAAKgO,UAAU,SAAC5N,EAAKC,GAAQ,MAACpB,GAAYmB,GAAGnB,EAAYoB,GAAMD,EAAIC,KAI3EsB,EAAAzB,UAAAuR,IAAA,SAAIvM,GAAA,SAAAA,IAAAA,EAA+B7H,EAAA0H,KAAKyM,YAEvC,IAAIC,GAAM,EAGNI,EAAc,CAqBlB,OAnBA7R,MAAKoH,QACJ,SAAAN,GAEC,GAAIrD,GAAQyB,EAAS4B,EACrB,OAAG+F,OAAMpJ,IAERgO,EAAMC,KACC,QAELnP,SAASkB,GACXgO,GAAOhO,EAEPoO,GACCpO,EAAM,EACL,EACA,MAIEoJ,MAAM4E,GAAOC,IAAOG,EAAeA,GAAY5F,EAAAA,GAAYwF,GAInE9P,EAAAzB,UAAA4R,QAAA,SAAQ5M,GAAA,SAAAA,IAAAA,EAA+B7H,EAAA0H,KAAKyM,YAE3C,IAAIzL,GAAS,EAAGgM,GAAiB,CAyBjC,OAvBA/R,MAAKoH,QACJ,SAACN,EAAG1D,GAEH2O,GAAS,CACT,IAAItO,GAAQyB,EAAS4B,EAAG1D,EACxB,OAAGyJ,OAAMpJ,IAERsC,EAAS2L,KACF,GAGE,GAAPjO,GAEFsC,EAAS,GACF,QAKRA,GAAUtC,KAIJsO,GAAUlF,MAAM9G,GAAW2L,IAAM3L,GAQ1CpE,EAAAzB,UAAA8R,SAAA,SAAS9M,GAAA,SAAAA,IAAAA,EAA+B7H,EAAA0H,KAAKyM,YAE5C,IAAIlP,GAAQ,EACRyD,EAAgB2L,GA6BpB,OA3BA1R,MAAKoH,QACJ,SAACN,EAAG1D,GAEH,GAAIK,GAAQyB,EAAS4B,EAAG1D,EAGxB,IAFAd,IAEW,IAARA,EAEFyD,EAAStC,MAGV,CACC,GAAGoJ,MAAMpJ,IAAkB,IAARA,IAAclB,SAASkB,GAGzC,MADAsC,GAAS2L,KACF,CAGR3L,IAAUtC,KAMF,IAARnB,IACFyD,EAAS2L,KAEH3L,GAORpE,EAAAzB,UAAA+R,KAAA,WAEC,GAAI3Q,GAAItB,IACRsB,GAAEjC,iBAEF,IAAIoE,GAAUmC,OACV4I,GAAgB,CASpB,IARAlN,EAAE8F,QACD,SAAAN,GAEC0H,GAAQ,EACR/K,EAAQqD,KAIN0H,EAAO,KAAM,IAAIjL,OAAM,2CAC3B,OAAOE,IAGR9B,EAAAzB,UAAAoR,cAAA,SAActO,GAAA,SAAAA,IAAAA,EAAA,KAEb,IAAI1B,GAAItB,IACRsB,GAAEjC,iBAEF,IAAIoE,GAAUmC,OACV4I,GAAgB,CAQpB,OAPAlN,GAAE8F,QACD,SAAAN,GAEC0H,GAAQ,EACR/K,EAAQqD,IAGD0H,EAAwB/K,EAAfT,GAKnBrB,EAAAzB,UAAA0K,MAAA,WAEC,MAAsB9K,GAAAI,UAAM0K,MAAK/J,KAAAb,OAIlC2B,EAAAzB,UAAAoK,WAAA,SAAWC,GAEV,MAAsBzK,GAAAI,UAAMoK,WAAUzJ,KAAAb,KAACuK,IAIxC5I,EAAAzB,UAAAsK,cAAA,SAAchJ,GAEb,MAAsB1B,GAAAI,UAAMsK,cAAa3J,KAAAb,KAACwB,IAG3CG,EAAAzB,UAAAgS,QAAA,WAEC,GAEIC,GACAvQ,EAHAN,EAAItB,KAAMV,GAAoBgC,EAAEjC,iBAKpC,OAAO,IAAIsC,GACV,WAGC,GAAIE,GAAe,CAEnB,OAAO,IAAIpE,GAAAqE,eACV,WAECzC,EAAgBC,GACZsC,IACHA,EAAaN,EAAEH,iBACZgR,IACHA,MACDtQ,EAAQ,GAGT,SAACE,GAEA1C,EAAgBC,EAEhB,IAAI8D,GAAIvB,GAER,OAAGuB,IAAG+O,EAAM5N,OAEH3C,EAAWnD,WAChBsD,EAAQI,YAAYgQ,EAAM/O,GAAKxB,EAAWK,UAC1C,EAGGF,EAAQI,YAAYgQ,EAAM/O,OAKpC,WAEC9D,GAAW,EACR6S,IACFA,EAAM5N,OAAS,GAChB4N,EAAQ,KAERvU,EAAAe,QAAQiD,GACRA,EAAa,QAMjBD,GAxnDQjB,EADK3D,GAAA4E,WAAUA,CA6nDvB,IAAAoK,GAAA,SAAAjM,GAGC,QAAAiM,GACChB,EACAnK,GAEAd,EAAAe,KAAAb,KAAM+K,EAAmBnK,GAAW,GAGtC,MATQpB,GAAAuM,EAAAjM,GASRiM,GATQpK,EADK5E,GAAAgP,iBAAgBA,CAY7B,IAAAV,GAAA,SAAAvL,GAKC,QAAAuL,GAAYL,GAEXlL,EAAAe,KAAAb,KAAM,WAGL,MADAsB,GAAEjC,kBACK,GAAI7B,GAAAqM,gBAAmB,WAI7B,MAFAvI,GAAEjC,gBAAgB,+CAAgD,mBAE3DiC,EAAE8Q,WAIX,IAAI9Q,GAAItB,IACRsB,GAAE+Q,sBAAwB,kBAC1B/Q,EAAE8Q,QAAUpH,EAsKd,MAzLQxL,GAAA6L,EAAAvL,GAuBGuL,EAAAnL,UAAAkB,WAAV,WAECtB,EAAAI,UAAMkB,WAAUP,KAAAb,MAChBA,KAAKoS,QAAe,MAGrB5R,OAAAO,eAAIsK,EAAAnL,UAAA,UDlrDOc,ICkrDX,WAEC,MAAOhB,MAAKoS,SDjrDFnR,YAAY,EACZC,cAAc,ICmrDzBmK,EAAAnL,UAAA4J,QAAA,WAEC,GAAIxI,GAAItB,IAGR,OAFAsB,GAAEjC,kBAEKlC,EAAA2M,QAAQxI,EAAE8Q,UAGlB/G,EAAAnL,UAAAmB,aAAA,WAEC,MAAO,IAAIgK,GAAmBrL,KAAKoS,UAIpC/G,EAAAnL,UAAAkH,QAAA,SAAQ5F,EAAiCqM,GAAA,SAAAA,IAAAA,EAAA5B,EAAAA,EAExC,IAAI3K,GAAItB,IAGR,OAFAsB,GAAEjC,kBAEKlC,EAAAiK,QAAQ9F,EAAE8Q,QAAS5Q,EAAQqM,IAKnCxC,EAAAnL,UAAAyD,IAAA,SAAIuC,GAEH,GAAI5E,GAAItB,IACRsB,GAAEjC,iBAEF,IAAI2L,GAAS1J,EAAE8Q,QAASlO,EAAM8G,EAAOzG,MACrC,OAAOL,MAASgC,GAAapG,EAAAI,UAAMyD,IAAG9C,KAAAb,KAACkG,KAGxCmF,EAAAnL,UAAAoC,MAAA,SAAM4D,GAEL,GAAI5E,GAAItB,IACRsB,GAAEjC,iBAEF,IAAI2L,GAAS1J,EAAE8Q,QAASlO,EAAM8G,EAAOzG,MACrC,OAAOL,KAAQgC,EAAYpG,EAAAI,UAAMoC,MAAKzB,KAAAb,KAACkG,GAAahC,IAGrDmH,EAAAnL,UAAA6C,mBAAA,SAAmBlB,EAAcmB,GAAA,SAAAA,IAAAA,EAAA,KAEhC,IAAI1B,GAAItB,IACRsB,GAAEjC,kBACF/B,EAAAkF,QAAQS,oBAAoBpB,EAAO,QAEnC,IAAImJ,GAAS1J,EAAE8Q,OACf,OAAOvQ,GAAMmJ,EAAOzG,OACjByG,EAAOnJ,GACPmB,GAGJqI,EAAAnL,UAAA+R,KAAA,WAEC,GAAI3Q,GAAItB,IACRsB,GAAEjC,iBAEF,IAAI2L,GAAS1J,EAAE8Q,QAASlO,EAAM8G,EAAOzG,MACrC,OAAO,GACJyG,EAAO9G,EAAM,GACbpE,EAAAI,UAAM+R,KAAIpR,KAAAb,OAGdqL,EAAAnL,UAAAoR,cAAA,SAActO,GAAA,SAAAA,IAAAA,EAAA,KAEb,IAAI1B,GAAItB,IACRsB,GAAEjC,iBAEF,IAAI2L,GAAS1J,EAAE8Q,QAASlO,EAAM8G,EAAOzG,MACrC,OAAOL,GACJ8G,EAAO9G,EAAM,GACblB,GAGJqI,EAAAnL,UAAAmC,KAAA,SAAKC,GAGJ,GAAIhB,GAAItB,IAER,OAAKsC,GAAM,EAGJ,GAAIX,GACV,WAAM,MAAA,IAAInE,GAAAqM,gBAAmB,WAAM,MAAAvI,GAAE8Q,SAAS9P,KAHvChB,GAOT+J,EAAAnL,UAAAoP,eAAA,SAAehN,GAAA,SAAAA,IAAAA,EAAA,EAEd,IAAIhB,GAAItB,IACR,OAAOsB,GAAEqB,KAAKrB,EAAE8Q,QAAQ7N,OAASjC,IAGlC+I,EAAAnL,UAAAsP,WAAA,SAAWlN,GAEV,KAAKA,EAAM,GACV,MAAOX,GAAWe,OAEnB,IAAIpB,GAAItB,IACR,KAAIuC,SAASD,GACZ,MAAOhB,EAER,IAAI4C,GAAM5C,EAAE8Q,QACT9Q,EAAE8Q,QAAQ7N,OACV,CAEH,OAAOjD,GAAEe,KAAK6B,EAAM5B,IAGrB+I,EAAAnL,UAAAuP,QAAA,WAEC,GAAInO,GAAItB,IAER,OAAO,IAAI2B,GACV,WAAM,MAAA,IAAInE,GAAAqM,gBACT,WAAM,MAAAvI,GAAE8Q,SAAS9Q,EAAE8Q,QACf9Q,EAAE8Q,QAAQ7N,OAAS,EACpB,EAAG,OAKT8G,EAAAnL,UAAAgS,QAAA,WAEC,MAAOlS,MAAKqB,gBAGbgK,EAAAnL,UAAAmQ,cAAA,SACCrJ,EACAsJ,GAEA,MAFA,UAAAA,IAAAA,EAAyCtT,EAAO6K,UAE7CxK,EAAA0H,KAAKqG,YAAYpE,GACZ/J,EAAO4K,SAAS7H,KAAKgL,OAAQhE,GAAQ,EAAMsJ,GAEhDtJ,YAAkBqE,GACbrE,EAAOqJ,cAAcrQ,KAAKgL,OAAQsF,GAEnCxQ,EAAAI,UAAMmQ,cAAaxP,KAAAb,KAACgH,EAAQsJ,IAIpCjF,EAAAnL,UAAAkP,eAAA,SAAeC,EAAuBnK,GAAvB,SAAAmK,IAAAA,EAAA,IAAuB,SAAAnK,IAAAA,EAA+B3E,EAAUyD,SAE9E,IAAIsO,GAAItS,KAAKoS,OACb,QAAQlN,GAAYqN,MAAMC,QAAQF,GACpBA,EAAGhK,KAAK+G,GACnBvP,EAAAI,UAAMkP,eAAcvO,KAAAb,KAACqP,EAAWnK,IAGrCmG,GAzLQU,GA2LRoF,EAAA,SAAArR,GAIC,QAAAqR,GAAoBsB,EAAgBvB,GAEnCpR,EAAAe,KAAAb,KAAMkR,GAFalR,KAAAyS,UAAAA,EASrB,MAZQjT,GAAA2R,EAAArR,GAQPU,OAAAO,eAAIoQ,EAAAjR,UAAA,ODtuDOc,ICsuDX,WAEC,MAAOhB,MAAKyS,WDruDFxR,YAAY,EACZC,cAAc,ICsuD1BiQ,GAZQ9F,GAcR2D,EAAA,WAIC,QAAAA,GAAoB0D,GAAA1S,KAAA0S,YAAAA,EA+CrB,MA3CClS,QAAAO,eAAIiO,EAAA9O,UAAA,SDvuDOc,ICuuDX,WAEC,MAAOhB,MAAK0S,YAAYpQ,ODtuDdrB,YAAY,EACZC,cAAc,ICwuDzB8N,EAAA9O,UAAAc,IAAA,SAAIqG,GAEH,MAAOrH,MAAK0S,YAAY5D,SAASzH,IAGlC2H,EAAA9O,UAAA+P,SAAA,SAAS5I,GAER,MAAOrH,MAAK0S,YAAYnL,YAAYF,IAGrC2H,EAAA9O,UAAAiB,cAAA,WAGC,GACIS,GADAN,EAAItB,IAGR,OAAO,IAAIvC,GAAAqE,eACV,WAECF,EAAaN,EAAEoR,YAAYvR,iBAE5B,SAACY,GAGA,IAAIH,EAAWnD,WACd,OAAO;AAER,GAAIwD,GAAUL,EAAWK,OAEzB,OAAOF,GAAQI,YAAY,GAAIgP,GAAyBlP,EAAQoF,IAAKpF,EAAQwB,SAE9E,WAEC7F,EAAAe,QAAQiD,MAKZoN,KAGA0B,EAAA,SAAA5Q,GAIC,QAAA4Q,GACS1F,EACD/L,EACAC,EACAE,EACAD,GAAP,SAAAA,IAAAA,EAAgCnC,EAAO2V,SAEvC7S,EAAAe,KAAAb,KAAM,MANEA,KAAAgL,OAAAA,EACDhL,KAAAf,YAAAA,EACAe,KAAAd,MAAAA,EACAc,KAAAZ,OAAAA,EACAY,KAAAb,SAAAA,EAGPhC,EAAAsR,eAAezD,GAAUA,EAAOtJ,WA2ElC,MAtFQlC,GAAAkR,EAAA5Q,GAcC4Q,EAAAxQ,UAAA0S,wBAAR,SACC3T,EACAC,GAEA,MAAO,IAAIwR,GAA8B1Q,KAAKgL,OAAQ/L,EAAaC,EAAOc,OAG3E0Q,EAAAxQ,UAAA2S,OAAA,SAAO5T,GAEN,MAAOe,MAAK4S,wBAAwB3T,EAAa,IAGlDyR,EAAAxQ,UAAA4S,UAAA,SAAUlC,GAET,MAAO,IAAIF,GAAyB1Q,KAAKgL,OAAQ,KAAM,EAAiBhL,KAAM4Q,IAG/EF,EAAAxQ,UAAA6S,iBAAA,SAAiB9T,GAEhB,MAAOe,MAAK4S,wBAAwB3T,EAAa,KAGlDyR,EAAAxQ,UAAA8S,kBAAA,SAAkBpC,GAEjB,MAAO,IAAIF,GAAyB1Q,KAAKgL,OAAQ,KAAM,GAAkBhL,KAAM4Q,IAGhFF,EAAAxQ,UAAAiB,cAAA,WAEC,GACI8C,GACAgP,EAFA3R,EAAItB,KAGJ6B,EAAe,CAEnB,OAAO,IAAIpE,GAAAqE,eACV,WAECD,EAAQ,EACRoC,EAAStC,EAAWmI,QAAQxI,EAAE0J,QAC9BiI,EAAUrU,EAAkB0C,GAAG4R,sBAAsBjP,IAGtD,SAAClC,GAEA,MAAQF,GAAMoR,EAAQ1O,OACnBxC,EAAQI,YAAY8B,EAAOgP,EAAQpR,QACnC,GAGJ,WAEIoC,IACFA,EAAOM,OAAS,GACjBN,EAAS,KACNgP,IACFA,EAAQ1O,OAAS,GAClB0O,EAAU,OAGX,IAIQvC,EAAAxQ,UAAAkB,WAAV,WAECtB,EAAAI,UAAMkB,WAAUP,KAAAb,MAChBA,KAAKgL,OAAS,KACdhL,KAAKf,YAAc,KACnBe,KAAKd,MAAQ,KACbc,KAAKZ,OAAS,MAGhBsR,GAtFQ3E,EA0IRvL,QAAAO,eAAAhE,EAAA,cAAA0G,OAAA,IDlzDI1G,EAAAA,WCkzDW4E","file":"System.Linq/Linq.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Original: http://linqjs.codeplex.com/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"../System/Compare\", \"../System/Collections/Array/Compare\", \"../System/Collections/Array/Utility\", \"../System/Collections/Enumeration/Enumerator\", \"../System/Collections/Enumeration/EmptyEnumerator\", \"../System/Types\", \"../System/Integer\", \"../System/Functions\", \"../System/Collections/Enumeration/ArrayEnumerator\", \"../System/Collections/Enumeration/EnumeratorBase\", \"../System/Collections/Dictionaries/Dictionary\", \"../System/Collections/Queue\", \"../System/Disposable/dispose\", \"../System/Disposable/DisposableBase\", \"../System/Collections/Enumeration/UnsupportedEnumerableException\", \"../System/Disposable/ObjectDisposedException\", \"../System/Collections/Sorting/KeySortedContext\", \"../System/Exceptions/ArgumentNullException\", \"../System/Exceptions/ArgumentOutOfRangeException\", \"../extends\"], function (require, exports, Values, Arrays, ArrayUtility, Enumerator_1, EmptyEnumerator_1, Types_1, Integer_1, Functions_1, ArrayEnumerator_1, EnumeratorBase_1, Dictionary_1, Queue_1, dispose_1, DisposableBase_1, UnsupportedEnumerableException_1, ObjectDisposedException_1, KeySortedContext_1, ArgumentNullException_1, ArgumentOutOfRangeException_1, extends_1) {\n    \"use strict\";\n    var __extends = extends_1.default;\n    var INVALID_DEFAULT = {};\n    var VOID0 = void 0;\n    var BREAK = function (element) { return 0; };\n    var LinqFunctions = (function (_super) {\n        __extends(LinqFunctions, _super);\n        function LinqFunctions() {\n            _super.apply(this, arguments);\n        }\n        LinqFunctions.prototype.Greater = function (a, b) {\n            return a > b ? a : b;\n        };\n        LinqFunctions.prototype.Lesser = function (a, b) {\n            return a < b ? a : b;\n        };\n        return LinqFunctions;\n    }(Functions_1.Functions));\n    var Functions = new LinqFunctions();\n    Object.freeze(Functions);\n    function getEmptyEnumerator() {\n        return EmptyEnumerator_1.EmptyEnumerator;\n    }\n    var InfiniteEnumerable = (function (_super) {\n        __extends(InfiniteEnumerable, _super);\n        function InfiniteEnumerable(_enumeratorFactory, finalizer) {\n            _super.call(this, finalizer);\n            this._enumeratorFactory = _enumeratorFactory;\n            this._isEndless = true;\n        }\n        Object.defineProperty(InfiniteEnumerable.prototype, \"isEndless\", {\n            get: function () {\n                return this._isEndless;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        InfiniteEnumerable.prototype.getEnumerator = function () {\n            this.throwIfDisposed();\n            return this._enumeratorFactory();\n        };\n        InfiniteEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._enumeratorFactory = null;\n        };\n        InfiniteEnumerable.prototype.asEnumerable = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return new InfiniteEnumerable(function () { return _.getEnumerator(); });\n        };\n        InfiniteEnumerable.prototype.doAction = function (action, initializer, isEndless) {\n            if (isEndless === void 0) { isEndless = this.isEndless; }\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    if (initializer)\n                        initializer();\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var actionResult = action(enumerator.current, index++);\n                        if (actionResult === false || actionResult === 0)\n                            return yielder.yieldBreak();\n                        if (actionResult !== 2)\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, isEndless);\n            }, function () {\n                disposed = true;\n            }, isEndless);\n        };\n        InfiniteEnumerable.prototype.force = function () {\n            this.throwIfDisposed();\n            this.doAction(BREAK)\n                .getEnumerator()\n                .moveNext();\n        };\n        InfiniteEnumerable.prototype.skip = function (count) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!isFinite(count))\n                return Enumerable.empty();\n            Integer_1.Integer.assert(count, \"count\");\n            return this.doAction(function (element, index) {\n                return index < count\n                    ? 2\n                    : 1;\n            });\n        };\n        InfiniteEnumerable.prototype.take = function (count) {\n            if (!(count > 0))\n                return Enumerable.empty();\n            var _ = this;\n            _.throwIfDisposed();\n            if (!isFinite(count))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('count', count, 'Must be finite.');\n            Integer_1.Integer.assert(count, \"count\");\n            return _.doAction(function (element, index) { return index < count; }, null, false);\n        };\n        InfiniteEnumerable.prototype.elementAt = function (index) {\n            var v = this.elementAtOrDefault(index, INVALID_DEFAULT);\n            if (v === INVALID_DEFAULT)\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('index', index, \"is greater than or equal to the number of elements in source\");\n            return v;\n        };\n        InfiniteEnumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            Integer_1.Integer.assertZeroOrGreater(index, 'index');\n            var n = index;\n            return dispose_1.using(this.getEnumerator(), function (e) {\n                var i = 0;\n                while (e.moveNext()) {\n                    if (i == n)\n                        return e.current;\n                    i++;\n                }\n                return defaultValue;\n            });\n        };\n        InfiniteEnumerable.prototype.first = function () {\n            var v = this.firstOrDefault(INVALID_DEFAULT);\n            if (v === INVALID_DEFAULT)\n                throw new Error(\"first:The sequence is empty.\");\n            return v;\n        };\n        InfiniteEnumerable.prototype.firstOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) { return e.moveNext() ? e.current : defaultValue; });\n        };\n        InfiniteEnumerable.prototype.single = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) {\n                if (e.moveNext()) {\n                    var value = e.current;\n                    if (!e.moveNext())\n                        return value;\n                    throw new Error(\"single:sequence contains more than one element.\");\n                }\n                throw new Error(\"single:The sequence is empty.\");\n            });\n        };\n        InfiniteEnumerable.prototype.singleOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) {\n                if (e.moveNext()) {\n                    var value = e.current;\n                    if (!e.moveNext())\n                        return value;\n                }\n                return defaultValue;\n            });\n        };\n        InfiniteEnumerable.prototype.any = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) { return e.moveNext(); });\n        };\n        InfiniteEnumerable.prototype.isEmpty = function () {\n            return !this.any();\n        };\n        InfiniteEnumerable.prototype.traverseBreadthFirst = function (childrenSelector, resultSelector) {\n            if (resultSelector === void 0) { resultSelector = Functions.Identity; }\n            var _ = this, isEndless = _._isEndless || null;\n            return new Enumerable(function () {\n                var enumerator;\n                var nestLevel = 0;\n                var buffer, len;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    nestLevel = 0;\n                    buffer = [];\n                    len = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    while (true) {\n                        if (enumerator.moveNext()) {\n                            buffer[len++] = enumerator.current;\n                            return yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\n                        }\n                        if (!len)\n                            return yielder.yieldBreak();\n                        var next = Enumerable\n                            .from(buffer)\n                            .selectMany(childrenSelector);\n                        if (!next.any()) {\n                            return yielder.yieldBreak();\n                        }\n                        else {\n                            nestLevel++;\n                            buffer = [];\n                            len = 0;\n                            enumerator.dispose();\n                            enumerator = next.getEnumerator();\n                        }\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    buffer.length = 0;\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.traverseDepthFirst = function (childrenSelector, resultSelector) {\n            if (resultSelector === void 0) { resultSelector = Functions.Identity; }\n            var _ = this, isEndless = _._isEndless || null;\n            return new Enumerable(function () {\n                var enumeratorStack = [];\n                var enumerator;\n                var len;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    enumerator = _.getEnumerator();\n                    len = 0;\n                }, function (yielder) {\n                    while (true) {\n                        if (enumerator.moveNext()) {\n                            var value = resultSelector(enumerator.current, len);\n                            enumeratorStack[len++] = enumerator;\n                            var e = Enumerable.fromAny(childrenSelector(enumerator.current));\n                            enumerator = e ? e.getEnumerator() : EmptyEnumerator_1.EmptyEnumerator;\n                            return yielder.yieldReturn(value);\n                        }\n                        if (len == 0)\n                            return false;\n                        enumerator.dispose();\n                        enumerator = enumeratorStack[--len];\n                        enumeratorStack.length = len;\n                    }\n                }, function () {\n                    try {\n                        dispose_1.dispose(enumerator);\n                    }\n                    finally {\n                        dispose_1.dispose.these(enumeratorStack);\n                    }\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.flatten = function () {\n            var _ = this, isEndless = _._isEndless || null;\n            return new Enumerable(function () {\n                var enumerator;\n                var middleEnumerator = null;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    while (true) {\n                        if (middleEnumerator) {\n                            if (middleEnumerator.moveNext()) {\n                                return yielder.yieldReturn(middleEnumerator.current);\n                            }\n                            else {\n                                middleEnumerator.dispose();\n                                middleEnumerator = null;\n                            }\n                        }\n                        if (enumerator.moveNext()) {\n                            var c = enumerator.current;\n                            var e = !Types_1.Type.isString(c) && Enumerable.fromAny(c);\n                            if (e) {\n                                middleEnumerator\n                                    = e\n                                        .selectMany(Functions.Identity)\n                                        .flatten()\n                                        .getEnumerator();\n                                continue;\n                            }\n                            else {\n                                return yielder.yieldReturn(c);\n                            }\n                        }\n                        return yielder.yieldBreak();\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator, middleEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.pairwise = function (selector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    enumerator = _.getEnumerator();\n                    enumerator.moveNext();\n                }, function (yielder) {\n                    var prev = enumerator.current;\n                    return enumerator.moveNext()\n                        && yielder.yieldReturn(selector(prev, enumerator.current));\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.scan = function (func, seed) {\n            var isUseSeed = seed !== VOID0;\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var value;\n                var isFirst;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    enumerator = _.getEnumerator();\n                    isFirst = true;\n                }, function (yielder) {\n                    if (isFirst) {\n                        isFirst = false;\n                        return isUseSeed\n                            ? yielder.yieldReturn(value = seed)\n                            : enumerator.moveNext() && yielder.yieldReturn(value\n                                = enumerator.current);\n                    }\n                    return (enumerator.moveNext())\n                        ? yielder.yieldReturn(value = func(value, enumerator.current))\n                        : false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.select = function (selector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    return enumerator.moveNext()\n                        ? yielder.yieldReturn(selector(enumerator.current, index++))\n                        : yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype._selectMany = function (collectionSelector, resultSelector) {\n            var _ = this, isEndless = _._isEndless || null;\n            if (!resultSelector)\n                resultSelector = function (a, b) { return b; };\n            return new Enumerable(function () {\n                var enumerator;\n                var middleEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    enumerator = _.getEnumerator();\n                    middleEnumerator = undefined;\n                    index = 0;\n                }, function (yielder) {\n                    if (middleEnumerator === VOID0 && !enumerator.moveNext())\n                        return false;\n                    do {\n                        if (!middleEnumerator) {\n                            var middleSeq = collectionSelector(enumerator.current, index++);\n                            if (!middleSeq)\n                                continue;\n                            middleEnumerator = Enumerator_1.from(middleSeq);\n                        }\n                        if (middleEnumerator.moveNext())\n                            return yielder.yieldReturn(resultSelector(enumerator.current, middleEnumerator.current));\n                        middleEnumerator.dispose();\n                        middleEnumerator = null;\n                    } while (enumerator.moveNext());\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator, middleEnumerator);\n                    enumerator = null;\n                    middleEnumerator = null;\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.selectMany = function (collectionSelector, resultSelector) {\n            return this._selectMany(collectionSelector, resultSelector);\n        };\n        InfiniteEnumerable.prototype._choose = function (selector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var result = selector(enumerator.current, index++);\n                        if (result !== null && result !== VOID0)\n                            return yielder.yieldReturn(result);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.choose = function (selector) {\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this._choose(selector);\n        };\n        InfiniteEnumerable.prototype.where = function (predicate) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        if (predicate(enumerator.current, index++))\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.ofType = function (type) {\n            var typeName;\n            switch (type) {\n                case Number:\n                    typeName = Types_1.Type.NUMBER;\n                    break;\n                case String:\n                    typeName = Types_1.Type.STRING;\n                    break;\n                case Boolean:\n                    typeName = Types_1.Type.BOOLEAN;\n                    break;\n                case Function:\n                    typeName = Types_1.Type.FUNCTION;\n                    break;\n                default:\n                    return this\n                        .where(function (x) { return x instanceof type; });\n            }\n            return this\n                .choose()\n                .where(function (x) { return (typeof x) === typeName; });\n        };\n        InfiniteEnumerable.prototype.except = function (second, compareSelector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var keys;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                    keys = new Dictionary_1.Dictionary(compareSelector);\n                    if (second)\n                        Enumerator_1.forEach(second, function (key) { keys.addByKeyValue(key, true); });\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var current = enumerator.current;\n                        if (!keys.containsKey(current)) {\n                            keys.addByKeyValue(current, true);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    keys.clear();\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.distinct = function (compareSelector) {\n            return this.except(null, compareSelector);\n        };\n        InfiniteEnumerable.prototype.distinctUntilChanged = function (compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var compareKey;\n                var initial = true;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var key = compareSelector(enumerator.current);\n                        if (initial) {\n                            initial = false;\n                        }\n                        else if (Values.areEqual(compareKey, key)) {\n                            continue;\n                        }\n                        compareKey = key;\n                        return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.defaultIfEmpty = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var isFirst;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    isFirst = true;\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    if (enumerator.moveNext()) {\n                        isFirst = false;\n                        return yielder.yieldReturn(enumerator.current);\n                    }\n                    else if (isFirst) {\n                        isFirst = false;\n                        return yielder.yieldReturn(defaultValue);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.zip = function (second, resultSelector) {\n            var _ = this;\n            _.throwIfDisposed();\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    index = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = Enumerator_1.from(second);\n                }, function (yielder) { return firstEnumerator.moveNext()\n                    && secondEnumerator.moveNext()\n                    && yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++)); }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.zipMultiple = function (second, resultSelector) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!second.length)\n                return Enumerable.empty();\n            return new Enumerable(function () {\n                var secondTemp;\n                var firstEnumerator;\n                var secondEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    secondTemp = new Queue_1.Queue(second);\n                    index = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = null;\n                }, function (yielder) {\n                    if (firstEnumerator.moveNext()) {\n                        while (true) {\n                            while (!secondEnumerator) {\n                                if (secondTemp.count) {\n                                    var next = secondTemp.dequeue();\n                                    if (next)\n                                        secondEnumerator = Enumerator_1.from(next);\n                                }\n                                else\n                                    return yielder.yieldBreak();\n                            }\n                            if (secondEnumerator.moveNext())\n                                return yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++));\n                            secondEnumerator.dispose();\n                            secondEnumerator = null;\n                        }\n                    }\n                    return yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondTemp);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.join = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            return new Enumerable(function () {\n                var outerEnumerator;\n                var lookup;\n                var innerElements = null;\n                var innerCount = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    outerEnumerator = _.getEnumerator();\n                    lookup = Enumerable.from(inner)\n                        .toLookup(innerKeySelector, Functions.Identity, compareSelector);\n                }, function (yielder) {\n                    while (true) {\n                        if (innerElements != null) {\n                            var innerElement = innerElements[innerCount++];\n                            if (innerElement !== VOID0)\n                                return yielder.yieldReturn(resultSelector(outerEnumerator.current, innerElement));\n                            innerElement = null;\n                            innerCount = 0;\n                        }\n                        if (outerEnumerator.moveNext()) {\n                            var key = outerKeySelector(outerEnumerator.current);\n                            innerElements = lookup.get(key);\n                        }\n                        else {\n                            return yielder.yieldBreak();\n                        }\n                    }\n                }, function () {\n                    dispose_1.dispose(outerEnumerator);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.groupJoin = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var lookup = null;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    enumerator = _.getEnumerator();\n                    lookup = Enumerable.from(inner)\n                        .toLookup(innerKeySelector, Functions.Identity, compareSelector);\n                }, function (yielder) {\n                    return enumerator.moveNext()\n                        && yielder.yieldReturn(resultSelector(enumerator.current, lookup.get(outerKeySelector(enumerator.current))));\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.merge = function (enumerables) {\n            var _ = this, isEndless = _._isEndless || null;\n            if (!enumerables || enumerables.length == 0)\n                return _;\n            return new Enumerable(function () {\n                var enumerator;\n                var queue;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    enumerator = _.getEnumerator();\n                    queue = new Queue_1.Queue(enumerables);\n                }, function (yielder) {\n                    while (true) {\n                        while (!enumerator && queue.count) {\n                            enumerator = Enumerator_1.from(queue.dequeue());\n                        }\n                        if (enumerator && enumerator.moveNext())\n                            return yielder.yieldReturn(enumerator.current);\n                        if (enumerator) {\n                            enumerator.dispose();\n                            enumerator = null;\n                            continue;\n                        }\n                        return yielder.yieldBreak();\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator, queue);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.concat = function () {\n            var enumerables = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                enumerables[_i - 0] = arguments[_i];\n            }\n            return this.merge(enumerables);\n        };\n        InfiniteEnumerable.prototype.union = function (second, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this, isEndless = _._isEndless || null;\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var keys;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    firstEnumerator = _.getEnumerator();\n                    keys = new Dictionary_1.Dictionary(compareSelector);\n                }, function (yielder) {\n                    var current;\n                    if (secondEnumerator === VOID0) {\n                        while (firstEnumerator.moveNext()) {\n                            current = firstEnumerator.current;\n                            if (!keys.containsKey(current)) {\n                                keys.addByKeyValue(current, null);\n                                return yielder.yieldReturn(current);\n                            }\n                        }\n                        secondEnumerator = Enumerator_1.from(second);\n                    }\n                    while (secondEnumerator.moveNext()) {\n                        current = secondEnumerator.current;\n                        if (!keys.containsKey(current)) {\n                            keys.addByKeyValue(current, null);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.insertAt = function (index, other) {\n            Integer_1.Integer.assertZeroOrGreater(index, 'index');\n            var n = index;\n            var _ = this, isEndless = _._isEndless || null;\n            _.throwIfDisposed();\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var count = 0;\n                var isEnumerated = false;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    count = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = Enumerator_1.from(other);\n                    isEnumerated = false;\n                }, function (yielder) {\n                    if (count == n) {\n                        isEnumerated = true;\n                        if (secondEnumerator.moveNext())\n                            return yielder.yieldReturn(secondEnumerator.current);\n                    }\n                    if (firstEnumerator.moveNext()) {\n                        count++;\n                        return yielder.yieldReturn(firstEnumerator.current);\n                    }\n                    return !isEnumerated\n                        && secondEnumerator.moveNext()\n                        && yielder.yieldReturn(secondEnumerator.current);\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.alternateMultiple = function (sequence) {\n            var _ = this;\n            return new Enumerable(function () {\n                var buffer, mode, enumerator, alternateEnumerator;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    alternateEnumerator = new ArrayEnumerator_1.ArrayEnumerator(Enumerable.toArray(sequence));\n                    enumerator = _.getEnumerator();\n                    var hasAtLeastOne = enumerator.moveNext();\n                    mode = hasAtLeastOne\n                        ? 1\n                        : 0;\n                    if (hasAtLeastOne)\n                        buffer = enumerator.current;\n                }, function (yielder) {\n                    switch (mode) {\n                        case 0:\n                            return yielder.yieldBreak();\n                        case 2:\n                            if (alternateEnumerator.moveNext())\n                                return yielder.yieldReturn(alternateEnumerator.current);\n                            alternateEnumerator.reset();\n                            mode = 1;\n                            break;\n                    }\n                    var latest = buffer;\n                    var another = enumerator.moveNext();\n                    mode = another\n                        ? 2\n                        : 0;\n                    if (another)\n                        buffer = enumerator.current;\n                    return yielder.yieldReturn(latest);\n                }, function () {\n                    dispose_1.dispose(enumerator, alternateEnumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.alternateSingle = function (value) {\n            return this.alternateMultiple(Enumerable.make(value));\n        };\n        InfiniteEnumerable.prototype.alternate = function () {\n            var sequence = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                sequence[_i - 0] = arguments[_i];\n            }\n            return this.alternateMultiple(sequence);\n        };\n        InfiniteEnumerable.prototype.catchError = function (handler) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    try {\n                        throwIfDisposed(disposed);\n                        enumerator = _.getEnumerator();\n                    }\n                    catch (e) {\n                    }\n                }, function (yielder) {\n                    try {\n                        throwIfDisposed(disposed);\n                        if (enumerator.moveNext())\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    catch (e) {\n                        handler(e);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.finallyAction = function (action) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    return (enumerator.moveNext())\n                        ? yielder.yieldReturn(enumerator.current)\n                        : false;\n                }, function () {\n                    try {\n                        dispose_1.dispose(enumerator);\n                    }\n                    finally {\n                        action();\n                    }\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.buffer = function (size) {\n            if (size < 1 || !isFinite(size))\n                throw new Error(\"Invalid buffer size.\");\n            Integer_1.Integer.assert(size, \"size\");\n            var _ = this, len;\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    var array = ArrayUtility.initialize(size);\n                    len = 0;\n                    while (len < size && enumerator.moveNext()) {\n                        array[len++] = enumerator.current;\n                    }\n                    array.length = len;\n                    return len && yielder.yieldReturn(array);\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.share = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var sharedEnumerator;\n            return new Enumerable(function () {\n                return sharedEnumerator || (sharedEnumerator = _.getEnumerator());\n            }, function () {\n                dispose_1.dispose(sharedEnumerator);\n            }, _._isEndless);\n        };\n        return InfiniteEnumerable;\n    }(DisposableBase_1.DisposableBase));\n    exports.InfiniteEnumerable = InfiniteEnumerable;\n    var Enumerable = (function (_super) {\n        __extends(Enumerable, _super);\n        function Enumerable(enumeratorFactory, finalizer, isEndless) {\n            if (isEndless === void 0) { isEndless = null; }\n            _super.call(this, enumeratorFactory, finalizer);\n            this._isEndless = isEndless;\n        }\n        Enumerable.from = function (source) {\n            var e = Enumerable.fromAny(source);\n            if (!e)\n                throw new UnsupportedEnumerableException_1.UnsupportedEnumerableException();\n            return e;\n        };\n        Enumerable.fromAny = function (source, defaultEnumerable) {\n            if (defaultEnumerable === void 0) { defaultEnumerable = null; }\n            if (Types_1.Type.isObject(source) || Types_1.Type.isString(source)) {\n                if (source instanceof Enumerable)\n                    return source;\n                if (Types_1.Type.isArrayLike(source))\n                    return new ArrayEnumerable(source);\n                if (Enumerator_1.isEnumerable(source))\n                    return new Enumerable(function () { return source.getEnumerator(); }, null, source.isEndless);\n            }\n            return defaultEnumerable;\n        };\n        Enumerable.fromOrEmpty = function (source) {\n            return Enumerable.fromAny(source) || Enumerable.empty();\n        };\n        Enumerable.toArray = function (source) {\n            if (source instanceof Enumerable)\n                return source.toArray();\n            return Enumerator_1.toArray(source);\n        };\n        Enumerable.choice = function (values) {\n            var len = values && values.length;\n            if (!len || !isFinite(len))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('length', length);\n            return new InfiniteEnumerable(function () { return new EnumeratorBase_1.EnumeratorBase(null, function (yielder) {\n                return yielder.yieldReturn(Integer_1.Integer.random.select(values));\n            }, true); });\n        };\n        Enumerable.chooseFrom = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return Enumerable.choice(args);\n        };\n        Enumerable.cycle = function (values) {\n            var len = values && values.length;\n            if (!len || !isFinite(len))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('length', length);\n            return new InfiniteEnumerable(function () {\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    index = 0;\n                }, function (yielder) {\n                    if (index >= values.length)\n                        index = 0;\n                    return yielder.yieldReturn(values[index++]);\n                }, true);\n            });\n        };\n        Enumerable.cycleThrough = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return Enumerable.cycle(args);\n        };\n        Enumerable.empty = function () {\n            return new FiniteEnumerable(getEmptyEnumerator);\n        };\n        Enumerable.repeat = function (element, count) {\n            if (count === void 0) { count = Infinity; }\n            if (!(count > 0))\n                return Enumerable.empty();\n            return isFinite(count) && Integer_1.Integer.assert(count, \"count\")\n                ? new FiniteEnumerable(function () {\n                    var c = count;\n                    var index = 0;\n                    return new EnumeratorBase_1.EnumeratorBase(function () { index = 0; }, function (yielder) { return (index++ < c) && yielder.yieldReturn(element); }, null, false);\n                })\n                : new Enumerable(function () {\n                    return new EnumeratorBase_1.EnumeratorBase(null, function (yielder) { return yielder.yieldReturn(element); }, true);\n                });\n        };\n        Enumerable.repeatWithFinalize = function (initializer, finalizer) {\n            return new InfiniteEnumerable(function () {\n                var element;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    element = initializer();\n                }, function (yielder) { return yielder.yieldReturn(element); }, function () {\n                    finalizer(element);\n                }, true);\n            });\n        };\n        Enumerable.make = function (element) {\n            return Enumerable.repeat(element, 1);\n        };\n        Enumerable.range = function (start, count, step) {\n            if (step === void 0) { step = 1; }\n            if (!isFinite(start))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\n            if (!(count > 0))\n                return Enumerable.empty();\n            if (!step)\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\n            if (!isFinite(step))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\n            Integer_1.Integer.assert(count, \"count\");\n            return new FiniteEnumerable(function () {\n                var value;\n                var c = count;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    index = 0;\n                    value = start;\n                }, function (yielder) {\n                    var result = index++ < c\n                        && yielder.yieldReturn(value);\n                    if (result && index < count)\n                        value += step;\n                    return result;\n                }, false);\n            });\n        };\n        Enumerable.rangeDown = function (start, count, step) {\n            if (step === void 0) { step = 1; }\n            step = Math.abs(step) * -1;\n            return Enumerable.range(start, count, step);\n        };\n        Enumerable.toInfinity = function (start, step) {\n            if (start === void 0) { start = 0; }\n            if (step === void 0) { step = 1; }\n            if (!isFinite(start))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\n            if (!step)\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\n            if (!isFinite(step))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\n            return new InfiniteEnumerable(function () {\n                var value;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    value = start;\n                }, function (yielder) {\n                    var current = value;\n                    value += step;\n                    return yielder.yieldReturn(current);\n                }, true);\n            });\n        };\n        Enumerable.toNegativeInfinity = function (start, step) {\n            if (start === void 0) { start = 0; }\n            if (step === void 0) { step = 1; }\n            return Enumerable.toInfinity(start, -step);\n        };\n        Enumerable.rangeTo = function (start, to, step) {\n            if (step === void 0) { step = 1; }\n            if (isNaN(to) || !isFinite(to))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"to\", to, \"Must be a finite number.\");\n            if (step && !isFinite(step))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"step\", step, \"Must be a finite non-zero number.\");\n            step = Math.abs(step);\n            return new FiniteEnumerable(function () {\n                var value;\n                return new EnumeratorBase_1.EnumeratorBase(function () { value = start; }, start < to\n                    ?\n                        function (yielder) {\n                            var result = value <= to && yielder.yieldReturn(value);\n                            if (result)\n                                value += step;\n                            return result;\n                        }\n                    :\n                        function (yielder) {\n                            var result = value >= to && yielder.yieldReturn(value);\n                            if (result)\n                                value -= step;\n                            return result;\n                        }, false);\n            });\n        };\n        Enumerable.matches = function (input, pattern, flags) {\n            if (flags === void 0) { flags = \"\"; }\n            if (input === null || input === VOID0)\n                throw new ArgumentNullException_1.ArgumentNullException(\"input\");\n            var type = typeof input;\n            if (type != Types_1.Type.STRING)\n                throw new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\n            if (pattern instanceof RegExp) {\n                flags += (pattern.ignoreCase) ? \"i\" : \"\";\n                flags += (pattern.multiline) ? \"m\" : \"\";\n                pattern = pattern.source;\n            }\n            if (flags.indexOf(\"g\") === -1)\n                flags += \"g\";\n            return new FiniteEnumerable(function () {\n                var regex;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    regex = new RegExp(pattern, flags);\n                }, function (yielder) {\n                    var match = regex.exec(input);\n                    return (match !== null) ? yielder.yieldReturn(match) : false;\n                });\n            });\n        };\n        Enumerable.generate = function (factory, count) {\n            if (count === void 0) { count = Infinity; }\n            if (isNaN(count) || count <= 0)\n                return Enumerable.empty();\n            return isFinite(count) && Integer_1.Integer.assert(count, \"count\")\n                ?\n                    new FiniteEnumerable(function () {\n                        var c = count;\n                        var index = 0;\n                        return new EnumeratorBase_1.EnumeratorBase(function () {\n                            index = 0;\n                        }, function (yielder) {\n                            var current = index++;\n                            return current < c && yielder.yieldReturn(factory(current));\n                        }, false);\n                    })\n                :\n                    new InfiniteEnumerable(function () {\n                        var index = 0;\n                        return new EnumeratorBase_1.EnumeratorBase(function () {\n                            index = 0;\n                        }, function (yielder) { return yielder.yieldReturn(factory(index++)); }, true);\n                    });\n        };\n        Enumerable.unfold = function (seed, valueFactory, skipSeed) {\n            if (skipSeed === void 0) { skipSeed = false; }\n            return new InfiniteEnumerable(function () {\n                var index = 0;\n                var value;\n                var isFirst;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    index = 0;\n                    value = seed;\n                    isFirst = !skipSeed;\n                }, function (yielder) {\n                    var i = index++;\n                    if (isFirst)\n                        isFirst = false;\n                    else\n                        value = valueFactory(value, i);\n                    return yielder.yieldReturn(value);\n                }, true);\n            });\n        };\n        Enumerable.forEach = function (enumerable, action, max) {\n            if (max === void 0) { max = Infinity; }\n            return Enumerator_1.forEach(enumerable, action, max);\n        };\n        Enumerable.map = function (enumerable, selector) {\n            return Enumerator_1.map(enumerable, selector);\n        };\n        Enumerable.max = function (values) {\n            return values\n                .takeUntil(function (v) { return v == +Infinity; }, true)\n                .aggregate(Functions.Greater);\n        };\n        Enumerable.min = function (values) {\n            return values\n                .takeUntil(function (v) { return v == -Infinity; }, true)\n                .aggregate(Functions.Lesser);\n        };\n        Enumerable.weave = function (enumerables) {\n            if (!enumerables)\n                throw new ArgumentNullException_1.ArgumentNullException('enumerables');\n            return new Enumerable(function () {\n                var queue;\n                var mainEnumerator;\n                var index;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    index = 0;\n                    queue = new Queue_1.Queue();\n                    mainEnumerator = Enumerator_1.from(enumerables);\n                }, function (yielder) {\n                    var e;\n                    if (mainEnumerator) {\n                        while (!e && mainEnumerator.moveNext()) {\n                            var c = mainEnumerator.current;\n                            e = nextEnumerator(queue, c && Enumerator_1.from(c));\n                        }\n                        if (!e)\n                            mainEnumerator = null;\n                    }\n                    while (!e && queue.count) {\n                        e = nextEnumerator(queue, queue.dequeue());\n                    }\n                    return e\n                        ? yielder.yieldReturn(e.current)\n                        : yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose.these(queue.dump());\n                    dispose_1.dispose(mainEnumerator, queue);\n                    mainEnumerator = null;\n                    queue = null;\n                });\n            });\n        };\n        Enumerable.prototype.doAction = function (action, initializer, isEndless) {\n            if (isEndless === void 0) { isEndless = this.isEndless; }\n            return _super.prototype.doAction.call(this, action, initializer, isEndless);\n        };\n        Enumerable.prototype.skip = function (count) {\n            return _super.prototype.skip.call(this, count);\n        };\n        Enumerable.prototype.skipWhile = function (predicate) {\n            this.throwIfDisposed();\n            return this.doAction(function (element, index) {\n                return predicate(element, index)\n                    ? 2\n                    : 1;\n            });\n        };\n        Enumerable.prototype.takeWhile = function (predicate) {\n            this.throwIfDisposed();\n            if (!predicate)\n                throw new ArgumentNullException_1.ArgumentNullException('predicate');\n            return this.doAction(function (element, index) {\n                return predicate(element, index)\n                    ? 1\n                    : 0;\n            }, null, null);\n        };\n        Enumerable.prototype.takeUntil = function (predicate, includeUntilValue) {\n            this.throwIfDisposed();\n            if (!predicate)\n                throw new ArgumentNullException_1.ArgumentNullException('predicate');\n            if (!includeUntilValue)\n                return this.doAction(function (element, index) {\n                    return predicate(element, index)\n                        ? 0\n                        : 1;\n                }, null, null);\n            var found = false;\n            return this.doAction(function (element, index) {\n                if (found)\n                    return 0;\n                found = predicate(element, index);\n                return 1;\n            }, function () {\n                found = false;\n            }, null);\n        };\n        Enumerable.prototype.forEach = function (action) {\n            var _ = this;\n            _.throwIfDisposed();\n            Enumerator_1.throwIfEndless(_.isEndless);\n            var index = 0;\n            dispose_1.using(_.getEnumerator(), function (e) {\n                Enumerator_1.throwIfEndless(e.isEndless);\n                while (_.throwIfDisposed() && e.moveNext()) {\n                    if (action(e.current, index++) === false)\n                        break;\n                }\n            });\n        };\n        Enumerable.prototype.toArray = function (predicate) {\n            return predicate\n                ? this.where(predicate).toArray()\n                : this.copyTo([]);\n        };\n        Enumerable.prototype.copyTo = function (target, index, count) {\n            if (index === void 0) { index = 0; }\n            if (count === void 0) { count = Infinity; }\n            this.throwIfDisposed();\n            if (!target)\n                throw new ArgumentNullException_1.ArgumentNullException(\"target\");\n            Integer_1.Integer.assertZeroOrGreater(index);\n            Enumerator_1.forEach(this, function (x, i) {\n                target[i + index] = x;\n            }, count);\n            return target;\n        };\n        Enumerable.prototype.toLookup = function (keySelector, elementSelector, compareSelector) {\n            if (elementSelector === void 0) { elementSelector = Functions.Identity; }\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var dict = new Dictionary_1.Dictionary(compareSelector);\n            this.forEach(function (x) {\n                var key = keySelector(x);\n                var element = elementSelector(x);\n                var array = dict.getValue(key);\n                if (array !== VOID0)\n                    array.push(element);\n                else\n                    dict.addByKeyValue(key, [element]);\n            });\n            return new Lookup(dict);\n        };\n        Enumerable.prototype.toMap = function (keySelector, elementSelector) {\n            var obj = {};\n            this.forEach(function (x, i) {\n                obj[keySelector(x, i)] = elementSelector(x, i);\n            });\n            return obj;\n        };\n        Enumerable.prototype.toDictionary = function (keySelector, elementSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var dict = new Dictionary_1.Dictionary(compareSelector);\n            this.forEach(function (x, i) { return dict.addByKeyValue(keySelector(x, i), elementSelector(x, i)); });\n            return dict;\n        };\n        Enumerable.prototype.toJoinedString = function (separator, selector) {\n            if (separator === void 0) { separator = \"\"; }\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this.select(selector).toArray().join(separator);\n        };\n        Enumerable.prototype.takeExceptLast = function (count) {\n            if (count === void 0) { count = 1; }\n            var _ = this;\n            if (!(count > 0))\n                return _;\n            if (!isFinite(count))\n                return Enumerable.empty();\n            Integer_1.Integer.assert(count, \"count\");\n            var c = count;\n            return new Enumerable(function () {\n                var enumerator;\n                var q;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    enumerator = _.getEnumerator();\n                    q = new Queue_1.Queue();\n                }, function (yielder) {\n                    while (enumerator.moveNext()) {\n                        q.enqueue(enumerator.current);\n                        if (q.count > c)\n                            return yielder.yieldReturn(q.dequeue());\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator, q);\n                });\n            });\n        };\n        Enumerable.prototype.skipToLast = function (count) {\n            if (!(count > 0))\n                return Enumerable.empty();\n            var _ = this;\n            if (!isFinite(count))\n                return _;\n            Integer_1.Integer.assert(count, \"count\");\n            return _.reverse()\n                .take(count)\n                .reverse();\n        };\n        Enumerable.prototype.where = function (predicate) {\n            return _super.prototype.where.call(this, predicate);\n        };\n        Enumerable.prototype.select = function (selector) {\n            return _super.prototype.select.call(this, selector);\n        };\n        Enumerable.prototype.selectMany = function (collectionSelector, resultSelector) {\n            return this._selectMany(collectionSelector, resultSelector);\n        };\n        Enumerable.prototype.choose = function (selector) {\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this._choose(selector);\n        };\n        Enumerable.prototype.reverse = function () {\n            var _ = this, disposed = !_.throwIfDisposed();\n            Enumerator_1.throwIfEndless(_._isEndless);\n            return new Enumerable(function () {\n                var buffer;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    buffer = _.toArray();\n                    index = buffer.length;\n                }, function (yielder) { return index && yielder.yieldReturn(buffer[--index]); }, function () {\n                    buffer.length = 0;\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.shuffle = function () {\n            var _ = this, disposed = !_.throwIfDisposed();\n            Enumerator_1.throwIfEndless(_._isEndless);\n            return new Enumerable(function () {\n                var buffer;\n                var capacity;\n                var len;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    buffer = _.toArray();\n                    capacity = len = buffer.length;\n                }, function (yielder) {\n                    if (!len)\n                        return yielder.yieldBreak();\n                    var selectedIndex = Integer_1.Integer.random(len);\n                    var selectedValue = buffer[selectedIndex];\n                    buffer[selectedIndex] = buffer[--len];\n                    buffer[len] = null;\n                    if (len % 32 == 0)\n                        buffer.length = len;\n                    return yielder.yieldReturn(selectedValue);\n                }, function () {\n                    buffer.length = 0;\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.count = function (predicate) {\n            var count = 0;\n            this.forEach(predicate\n                ?\n                    function (x, i) {\n                        if (predicate(x, i))\n                            ++count;\n                    }\n                :\n                    function () {\n                        ++count;\n                    });\n            return count;\n        };\n        Enumerable.prototype.all = function (predicate) {\n            if (!predicate)\n                throw new ArgumentNullException_1.ArgumentNullException(\"predicate\");\n            var result = true;\n            this.forEach(function (x, i) {\n                if (!predicate(x, i)) {\n                    result = false;\n                    return false;\n                }\n            });\n            return result;\n        };\n        Enumerable.prototype.every = function (predicate) {\n            return this.all(predicate);\n        };\n        Enumerable.prototype.any = function (predicate) {\n            if (!predicate)\n                return _super.prototype.any.call(this);\n            var result = false;\n            this.forEach(function (x, i) {\n                result = predicate(x, i);\n                return !result;\n            });\n            return result;\n        };\n        Enumerable.prototype.some = function (predicate) {\n            return this.any(predicate);\n        };\n        Enumerable.prototype.contains = function (value, compareSelector) {\n            return compareSelector\n                ? this.any(function (v) { return compareSelector(v) === compareSelector(value); })\n                : this.any(function (v) { return v === value; });\n        };\n        Enumerable.prototype.indexOf = function (value, compareSelector) {\n            var found = -1;\n            this.forEach(compareSelector\n                ?\n                    function (element, i) {\n                        if (Values.areEqual(compareSelector(element, i), compareSelector(value, i), true)) {\n                            found = i;\n                            return false;\n                        }\n                    }\n                :\n                    function (element, i) {\n                        if (Values.areEqual(element, value, true)) {\n                            found = i;\n                            return false;\n                        }\n                    });\n            return found;\n        };\n        Enumerable.prototype.lastIndexOf = function (value, compareSelector) {\n            var result = -1;\n            this.forEach(compareSelector\n                ?\n                    function (element, i) {\n                        if (Values.areEqual(compareSelector(element, i), compareSelector(value, i), true))\n                            result\n                                = i;\n                    }\n                :\n                    function (element, i) {\n                        if (Values.areEqual(element, value, true))\n                            result = i;\n                    });\n            return result;\n        };\n        Enumerable.prototype.merge = function (enumerables) {\n            return _super.prototype.merge.call(this, enumerables);\n        };\n        Enumerable.prototype.concat = function () {\n            var enumerables = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                enumerables[_i - 0] = arguments[_i];\n            }\n            return this.merge(enumerables);\n        };\n        Enumerable.prototype.intersect = function (second, compareSelector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var keys;\n                var outs;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    enumerator = _.getEnumerator();\n                    keys = new Dictionary_1.Dictionary(compareSelector);\n                    outs = new Dictionary_1.Dictionary(compareSelector);\n                    Enumerator_1.forEach(second, function (key) {\n                        keys.addByKeyValue(key, true);\n                    });\n                }, function (yielder) {\n                    while (enumerator.moveNext()) {\n                        var current = enumerator.current;\n                        if (!outs.containsKey(current) && keys.containsKey(current)) {\n                            outs.addByKeyValue(current, true);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose(enumerator, keys, outs);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        Enumerable.prototype.sequenceEqual = function (second, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Values.areEqual; }\n            return dispose_1.using(this.getEnumerator(), function (e1) { return dispose_1.using(Enumerator_1.from(second), function (e2) {\n                Enumerator_1.throwIfEndless(e1.isEndless && e2.isEndless);\n                while (e1.moveNext()) {\n                    if (!e2.moveNext() || !equalityComparer(e1.current, e2.current))\n                        return false;\n                }\n                return !e2.moveNext();\n            }); });\n        };\n        Enumerable.prototype.ofType = function (type) {\n            return _super.prototype.ofType.call(this, type);\n        };\n        Enumerable.prototype.except = function (second, compareSelector) {\n            return _super.prototype.except.call(this, second, compareSelector);\n        };\n        Enumerable.prototype.distinct = function (compareSelector) {\n            return _super.prototype.distinct.call(this, compareSelector);\n        };\n        Enumerable.prototype.distinctUntilChanged = function (compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            return _super.prototype.distinctUntilChanged.call(this, compareSelector);\n        };\n        Enumerable.prototype.orderBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return new OrderedEnumerable(this, keySelector, 1);\n        };\n        Enumerable.prototype.orderUsing = function (comparison) {\n            return new OrderedEnumerable(this, null, 1, null, comparison);\n        };\n        Enumerable.prototype.orderUsingReversed = function (comparison) {\n            return new OrderedEnumerable(this, null, -1, null, comparison);\n        };\n        Enumerable.prototype.orderByDescending = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return new OrderedEnumerable(this, keySelector, -1);\n        };\n        Enumerable.prototype.buffer = function (size) {\n            return _super.prototype.buffer.call(this, size);\n        };\n        Enumerable.prototype.groupBy = function (keySelector, elementSelector, compareSelector) {\n            var _this = this;\n            if (!elementSelector)\n                elementSelector = Functions.Identity;\n            return new Enumerable(function () { return _this.toLookup(keySelector, elementSelector, compareSelector)\n                .getEnumerator(); });\n        };\n        Enumerable.prototype.partitionBy = function (keySelector, elementSelector, resultSelector, compareSelector) {\n            if (resultSelector === void 0) { resultSelector = function (key, elements) { return new Grouping(key, elements); }; }\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            if (!elementSelector)\n                elementSelector = Functions.Identity;\n            return new Enumerable(function () {\n                var enumerator;\n                var key;\n                var compareKey;\n                var group;\n                var len;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    enumerator = _.getEnumerator();\n                    if (enumerator.moveNext()) {\n                        key = keySelector(enumerator.current);\n                        compareKey = compareSelector(key);\n                        group = [elementSelector(enumerator.current)];\n                        len = 1;\n                    }\n                    else\n                        group = null;\n                }, function (yielder) {\n                    if (!group)\n                        return yielder.yieldBreak();\n                    var hasNext, c;\n                    while ((hasNext = enumerator.moveNext())) {\n                        c = enumerator.current;\n                        if (compareKey === compareSelector(keySelector(c)))\n                            group[len++] = elementSelector(c);\n                        else\n                            break;\n                    }\n                    var result = resultSelector(key, group);\n                    if (hasNext) {\n                        c = enumerator.current;\n                        key = keySelector(c);\n                        compareKey = compareSelector(key);\n                        group = [elementSelector(c)];\n                        len = 1;\n                    }\n                    else {\n                        group = null;\n                    }\n                    return yielder.yieldReturn(result);\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    group = null;\n                });\n            });\n        };\n        Enumerable.prototype.aggregate = function (func, seed) {\n            return this.scan(func, seed).lastOrDefault();\n        };\n        Enumerable.prototype.average = function (selector) {\n            if (selector === void 0) { selector = Types_1.Type.numberOrNaN; }\n            var count = 0;\n            var sum = this.sum(function (e, i) {\n                count++;\n                return selector(e, i);\n            });\n            return (isNaN(sum) || !count)\n                ? NaN\n                : (sum / count);\n        };\n        Enumerable.prototype.max = function () {\n            return this.aggregate(Functions.Greater);\n        };\n        Enumerable.prototype.min = function () {\n            return this.aggregate(Functions.Lesser);\n        };\n        Enumerable.prototype.maxBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return this.aggregate(function (a, b) { return (keySelector(a) > keySelector(b)) ? a : b; });\n        };\n        Enumerable.prototype.minBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return this.aggregate(function (a, b) { return (keySelector(a) < keySelector(b)) ? a : b; });\n        };\n        Enumerable.prototype.sum = function (selector) {\n            if (selector === void 0) { selector = Types_1.Type.numberOrNaN; }\n            var sum = 0;\n            var sumInfinite = 0;\n            this.forEach(function (x) {\n                var value = selector(x);\n                if (isNaN(value)) {\n                    sum = NaN;\n                    return false;\n                }\n                if (isFinite(value))\n                    sum += value;\n                else\n                    sumInfinite +=\n                        value > 0 ?\n                            (+1) :\n                            (-1);\n            });\n            return isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite * Infinity) : sum);\n        };\n        Enumerable.prototype.product = function (selector) {\n            if (selector === void 0) { selector = Types_1.Type.numberOrNaN; }\n            var result = 1, exists = false;\n            this.forEach(function (x, i) {\n                exists = true;\n                var value = selector(x, i);\n                if (isNaN(value)) {\n                    result = NaN;\n                    return false;\n                }\n                if (value == 0) {\n                    result = 0;\n                    return false;\n                }\n                result *= value;\n            });\n            return (exists && isNaN(result)) ? NaN : result;\n        };\n        Enumerable.prototype.quotient = function (selector) {\n            if (selector === void 0) { selector = Types_1.Type.numberOrNaN; }\n            var count = 0;\n            var result = NaN;\n            this.forEach(function (x, i) {\n                var value = selector(x, i);\n                count++;\n                if (count === 1) {\n                    result = value;\n                }\n                else {\n                    if (isNaN(value) || value === 0 || !isFinite(value)) {\n                        result = NaN;\n                        return false;\n                    }\n                    result /= value;\n                }\n            });\n            if (count === 1)\n                result = NaN;\n            return result;\n        };\n        Enumerable.prototype.last = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                found = true;\n                value = x;\n            });\n            if (!found)\n                throw new Error(\"last:No element satisfies the condition.\");\n            return value;\n        };\n        Enumerable.prototype.lastOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                found = true;\n                value = x;\n            });\n            return (!found) ? defaultValue : value;\n        };\n        Enumerable.prototype.share = function () {\n            return _super.prototype.share.call(this);\n        };\n        Enumerable.prototype.catchError = function (handler) {\n            return _super.prototype.catchError.call(this, handler);\n        };\n        Enumerable.prototype.finallyAction = function (action) {\n            return _super.prototype.finallyAction.call(this, action);\n        };\n        Enumerable.prototype.memoize = function () {\n            var _ = this, disposed = !_.throwIfDisposed();\n            var cache;\n            var enumerator;\n            return new Enumerable(function () {\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    if (!enumerator)\n                        enumerator = _.getEnumerator();\n                    if (!cache)\n                        cache = [];\n                    index = 0;\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    var i = index++;\n                    if (i >= cache.length) {\n                        return (enumerator.moveNext())\n                            ? yielder.yieldReturn(cache[i] = enumerator.current)\n                            : false;\n                    }\n                    return yielder.yieldReturn(cache[i]);\n                });\n            }, function () {\n                disposed = true;\n                if (cache)\n                    cache.length = 0;\n                cache = null;\n                dispose_1.dispose(enumerator);\n                enumerator = null;\n            });\n        };\n        return Enumerable;\n    }(InfiniteEnumerable));\n    exports.Enumerable = Enumerable;\n    var FiniteEnumerable = (function (_super) {\n        __extends(FiniteEnumerable, _super);\n        function FiniteEnumerable(enumeratorFactory, finalizer) {\n            _super.call(this, enumeratorFactory, finalizer, false);\n        }\n        return FiniteEnumerable;\n    }(Enumerable));\n    exports.FiniteEnumerable = FiniteEnumerable;\n    var ArrayEnumerable = (function (_super) {\n        __extends(ArrayEnumerable, _super);\n        function ArrayEnumerable(source) {\n            _super.call(this, function () {\n                _.throwIfDisposed();\n                return new ArrayEnumerator_1.ArrayEnumerator(function () {\n                    _.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\n                    return _._source;\n                });\n            });\n            var _ = this;\n            _._disposableObjectName = \"ArrayEnumerable\";\n            _._source = source;\n        }\n        ArrayEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._source = null;\n        };\n        Object.defineProperty(ArrayEnumerable.prototype, \"source\", {\n            get: function () {\n                return this._source;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ArrayEnumerable.prototype.toArray = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return Enumerator_1.toArray(_._source);\n        };\n        ArrayEnumerable.prototype.asEnumerable = function () {\n            return new ArrayEnumerable(this._source);\n        };\n        ArrayEnumerable.prototype.forEach = function (action, max) {\n            if (max === void 0) { max = Infinity; }\n            var _ = this;\n            _.throwIfDisposed();\n            return Enumerator_1.forEach(_._source, action, max);\n        };\n        ArrayEnumerable.prototype.any = function (predicate) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return len && (!predicate || _super.prototype.any.call(this, predicate));\n        };\n        ArrayEnumerable.prototype.count = function (predicate) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return len && (predicate ? _super.prototype.count.call(this, predicate) : len);\n        };\n        ArrayEnumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            Integer_1.Integer.assertZeroOrGreater(index, 'index');\n            var source = _._source;\n            return index < source.length\n                ? source[index]\n                : defaultValue;\n        };\n        ArrayEnumerable.prototype.last = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return (len)\n                ? source[len - 1]\n                : _super.prototype.last.call(this);\n        };\n        ArrayEnumerable.prototype.lastOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return len\n                ? source[len - 1]\n                : defaultValue;\n        };\n        ArrayEnumerable.prototype.skip = function (count) {\n            var _ = this;\n            if (!(count > 0))\n                return _;\n            return new Enumerable(function () { return new ArrayEnumerator_1.ArrayEnumerator(function () { return _._source; }, count); });\n        };\n        ArrayEnumerable.prototype.takeExceptLast = function (count) {\n            if (count === void 0) { count = 1; }\n            var _ = this;\n            return _.take(_._source.length - count);\n        };\n        ArrayEnumerable.prototype.skipToLast = function (count) {\n            if (!(count > 0))\n                return Enumerable.empty();\n            var _ = this;\n            if (!isFinite(count))\n                return _;\n            var len = _._source\n                ? _._source.length\n                : 0;\n            return _.skip(len - count);\n        };\n        ArrayEnumerable.prototype.reverse = function () {\n            var _ = this;\n            return new Enumerable(function () { return new ArrayEnumerator_1.ArrayEnumerator(function () { return _._source; }, _._source\n                ? (_._source.length - 1)\n                : 0, -1); });\n        };\n        ArrayEnumerable.prototype.memoize = function () {\n            return this.asEnumerable();\n        };\n        ArrayEnumerable.prototype.sequenceEqual = function (second, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Values.areEqual; }\n            if (Types_1.Type.isArrayLike(second))\n                return Arrays.areEqual(this.source, second, true, equalityComparer);\n            if (second instanceof ArrayEnumerable)\n                return second.sequenceEqual(this.source, equalityComparer);\n            return _super.prototype.sequenceEqual.call(this, second, equalityComparer);\n        };\n        ArrayEnumerable.prototype.toJoinedString = function (separator, selector) {\n            if (separator === void 0) { separator = \"\"; }\n            if (selector === void 0) { selector = Functions.Identity; }\n            var s = this._source;\n            return !selector && Array.isArray(s)\n                ? s.join(separator)\n                : _super.prototype.toJoinedString.call(this, separator, selector);\n        };\n        return ArrayEnumerable;\n    }(FiniteEnumerable));\n    var Grouping = (function (_super) {\n        __extends(Grouping, _super);\n        function Grouping(_groupKey, elements) {\n            _super.call(this, elements);\n            this._groupKey = _groupKey;\n        }\n        Object.defineProperty(Grouping.prototype, \"key\", {\n            get: function () {\n                return this._groupKey;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Grouping;\n    }(ArrayEnumerable));\n    var Lookup = (function () {\n        function Lookup(_dictionary) {\n            this._dictionary = _dictionary;\n        }\n        Object.defineProperty(Lookup.prototype, \"count\", {\n            get: function () {\n                return this._dictionary.count;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Lookup.prototype.get = function (key) {\n            return this._dictionary.getValue(key);\n        };\n        Lookup.prototype.contains = function (key) {\n            return this._dictionary.containsKey(key);\n        };\n        Lookup.prototype.getEnumerator = function () {\n            var _ = this;\n            var enumerator;\n            return new EnumeratorBase_1.EnumeratorBase(function () {\n                enumerator = _._dictionary.getEnumerator();\n            }, function (yielder) {\n                if (!enumerator.moveNext())\n                    return false;\n                var current = enumerator.current;\n                return yielder.yieldReturn(new Grouping(current.key, current.value));\n            }, function () {\n                dispose_1.dispose(enumerator);\n            });\n        };\n        return Lookup;\n    }());\n    var OrderedEnumerable = (function (_super) {\n        __extends(OrderedEnumerable, _super);\n        function OrderedEnumerable(source, keySelector, order, parent, comparer) {\n            if (comparer === void 0) { comparer = Values.compare; }\n            _super.call(this, null);\n            this.source = source;\n            this.keySelector = keySelector;\n            this.order = order;\n            this.parent = parent;\n            this.comparer = comparer;\n            Enumerator_1.throwIfEndless(source && source.isEndless);\n        }\n        OrderedEnumerable.prototype.createOrderedEnumerable = function (keySelector, order) {\n            return new OrderedEnumerable(this.source, keySelector, order, this);\n        };\n        OrderedEnumerable.prototype.thenBy = function (keySelector) {\n            return this.createOrderedEnumerable(keySelector, 1);\n        };\n        OrderedEnumerable.prototype.thenUsing = function (comparison) {\n            return new OrderedEnumerable(this.source, null, 1, this, comparison);\n        };\n        OrderedEnumerable.prototype.thenByDescending = function (keySelector) {\n            return this.createOrderedEnumerable(keySelector, -1);\n        };\n        OrderedEnumerable.prototype.thenUsingReversed = function (comparison) {\n            return new OrderedEnumerable(this.source, null, -1, this, comparison);\n        };\n        OrderedEnumerable.prototype.getEnumerator = function () {\n            var _ = this;\n            var buffer;\n            var indexes;\n            var index = 0;\n            return new EnumeratorBase_1.EnumeratorBase(function () {\n                index = 0;\n                buffer = Enumerable.toArray(_.source);\n                indexes = createSortContext(_).generateSortedIndexes(buffer);\n            }, function (yielder) {\n                return (index < indexes.length)\n                    ? yielder.yieldReturn(buffer[indexes[index++]])\n                    : false;\n            }, function () {\n                if (buffer)\n                    buffer.length = 0;\n                buffer = null;\n                if (indexes)\n                    indexes.length = 0;\n                indexes = null;\n            }, false);\n        };\n        OrderedEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this.source = null;\n            this.keySelector = null;\n            this.order = null;\n            this.parent = null;\n        };\n        return OrderedEnumerable;\n    }(FiniteEnumerable));\n    function nextEnumerator(queue, e) {\n        if (e) {\n            if (e.moveNext()) {\n                queue.enqueue(e);\n            }\n            else {\n                dispose_1.dispose(e);\n                e = null;\n            }\n        }\n        return e;\n    }\n    function createSortContext(orderedEnumerable, currentContext) {\n        if (currentContext === void 0) { currentContext = null; }\n        var context = new KeySortedContext_1.KeySortedContext(currentContext, orderedEnumerable.keySelector, orderedEnumerable.order, orderedEnumerable.comparer);\n        if (orderedEnumerable.parent)\n            return createSortContext(orderedEnumerable.parent, context);\n        return context;\n    }\n    function throwIfDisposed(disposed) {\n        if (disposed)\n            throw new ObjectDisposedException_1.ObjectDisposedException(\"Enumerable\");\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Enumerable;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport * as Values from \"../System/Compare\";\r\nimport * as Arrays from \"../System/Collections/Array/Compare\";\r\nimport * as ArrayUtility from \"../System/Collections/Array/Utility\";\r\nimport {\r\n\tfrom as enumeratorFrom,\r\n\tforEach,\r\n\ttoArray,\r\n\tmap,\r\n\tisEnumerable,\r\n\tthrowIfEndless\r\n} from \"../System/Collections/Enumeration/Enumerator\";\r\nimport {EmptyEnumerator} from \"../System/Collections/Enumeration/EmptyEnumerator\";\r\nimport {Type} from \"../System/Types\";\r\nimport {Integer} from \"../System/Integer\";\r\nimport {Functions as BaseFunctions} from \"../System/Functions\";\r\nimport {ArrayEnumerator} from \"../System/Collections/Enumeration/ArrayEnumerator\";\r\nimport {EnumeratorBase} from \"../System/Collections/Enumeration/EnumeratorBase\";\r\nimport {Dictionary} from \"../System/Collections/Dictionaries/Dictionary\";\r\nimport {Queue} from \"../System/Collections/Queue\";\r\nimport {dispose, using} from \"../System/Disposable/dispose\";\r\nimport {DisposableBase} from \"../System/Disposable/DisposableBase\";\r\nimport {UnsupportedEnumerableException} from \"../System/Collections/Enumeration/UnsupportedEnumerableException\";\r\nimport {ObjectDisposedException} from \"../System/Disposable/ObjectDisposedException\";\r\nimport {KeySortedContext} from \"../System/Collections/Sorting/KeySortedContext\";\r\nimport {ArgumentNullException} from \"../System/Exceptions/ArgumentNullException\";\r\nimport {ArgumentOutOfRangeException} from \"../System/Exceptions/ArgumentOutOfRangeException\";\r\nimport {IEnumerator} from \"../System/Collections/Enumeration/IEnumerator\";\r\nimport {IEnumerable} from \"../System/Collections/Enumeration/IEnumerable\";\r\nimport {Action, Predicate, Selector, EqualityComparison, Comparison} from \"../System/FunctionTypes\";\r\nimport {IEnumerableOrArray} from \"../System/Collections/IEnumerableOrArray\";\r\nimport {IArray} from \"../System/Collections/Array/IArray\";\r\nimport {IMap, IDictionary} from \"../System/Collections/Dictionaries/IDictionary\";\r\nimport {Comparable} from \"../System/IComparable\";\r\nimport {IComparer} from \"../System/IComparer\";\r\nimport {IKeyValuePair} from \"../System/KeyValuePair\";\r\nimport {Order} from \"../System/Collections/Sorting/Order\";\r\nimport {\r\n\tIInfiniteEnumerable,\r\n\tILinqEnumerable,\r\n\tIFiniteEnumerable,\r\n\tILookup,\r\n\tIOrderedEnumerable,\r\n\tIGrouping,\r\n\tEnumerableAction\r\n} from \"./Enumerable\";\r\nimport __extendsImport from \"../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n\r\n// #region Local Constants.\r\n\r\nconst INVALID_DEFAULT:any = {}; // create a private unique instance for referencing.\r\nconst VOID0:any = void 0;\r\nconst BREAK:(e:any)=>EnumerableAction = element => EnumerableAction.Break;\r\n\r\n// Leave internal to avoid accidental overwriting.\r\nclass LinqFunctions extends BaseFunctions\r\n{\r\n\tGreater<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a>b ? a : b;\r\n\t}\r\n\r\n\tLesser<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a<b ? a : b;\r\n\t}\r\n}\r\n\r\nvar Functions = new LinqFunctions();\r\nObject.freeze(Functions);\r\n\r\n// For re-use as a factory.\r\nfunction getEmptyEnumerator():IEnumerator<any>\r\n{\r\n\treturn EmptyEnumerator;\r\n}\r\n\r\n// #endregion\r\n\r\n\r\n\r\n/*\r\n * NOTE: About InfiniteEnumerable<T> and Enumerable<T>.\r\n * There may seem like there's extra overrides here and they may seem unnecessary.\r\n * But after closer inspection you'll see the type chain is retained and\r\n * infinite enumerables are prevented from having features that finite ones have.\r\n *\r\n * I'm not sure if it's the best option to just use overrides, but it honors the typing properly.\r\n */\r\n\r\nexport class InfiniteEnumerable<T>\r\nextends DisposableBase implements IInfiniteEnumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprotected _enumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:() => void)\r\n\t{\r\n\t\tsuper(finalizer);\r\n\t\tthis._isEndless = true;\r\n\t}\r\n\r\n\tprotected _isEndless:boolean;\r\n\tget isEndless():boolean\r\n\t{\r\n\t\treturn this._isEndless;\r\n\t}\r\n\r\n\t// #region IEnumerable<T> Implementation...\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this._enumeratorFactory();\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IDisposable override...\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose(); // Just in case.\r\n\t\tthis._enumeratorFactory = null;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// Return a default (unfiltered) enumerable.\r\n\tasEnumerable():InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\treturn new InfiniteEnumerable<T>(() => _.getEnumerator());\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Similar to forEach, but executes an action for each time a value is enumerated.\r\n\t * If the action explicitly returns false or 0 (EnumerationAction.Break), the enumeration will complete.\r\n\t * If it returns a 2 (EnumerationAction.Skip) it will move on to the next item.\r\n\t * This also automatically handles disposing the enumerator.\r\n\t */\r\n\tdoAction(\r\n\t\taction:Action<T> | Predicate<T> | Selector<T, number> | Selector<T, EnumerableAction>,\r\n\t\tinitializer?:()=>void,\r\n\t\tisEndless:boolean = this.isEndless):InfiniteEnumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tif(initializer) initializer();\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t// May need a way to propagate isEndless\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar actionResult = <any>action(enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\tif(actionResult===false || actionResult===EnumerableAction.Break)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tif(actionResult!==EnumerableAction.Skip) // || !== 2\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// If actionResult===2, then a signal for skip is received.\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\r\n\t\t\t},\r\n\t\t\t// Using a finalizer value reduces the chance of a circular reference\r\n\t\t\t// since we could simply reference the enumeration and check e.wasDisposed.\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tforce():void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis.doAction(BREAK)\r\n\t\t\t.getEnumerator()\r\n\t\t\t.moveNext();\r\n\r\n\t}\r\n\r\n\t// #region Indexing/Paging methods.\r\n\tskip(count:number):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tindex<count\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return\r\n\t\t);\r\n\t}\r\n\r\n\r\n\ttake(count:number):FiniteEnumerable<T>\r\n\t{\r\n\t\tif(!(count>0)) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count))\r\n\t\t\tthrow new ArgumentOutOfRangeException('count', count, 'Must be finite.');\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\t// Once action returns false, the enumeration will stop.\r\n\t\treturn <Enumerable<T>>_.doAction((element:T, index?:number) => index<count, null, false);\r\n\t}\r\n\r\n\t// #region Single Value Return...\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tvar v = this.elementAtOrDefault(index, INVALID_DEFAULT);\r\n\t\tif(v===INVALID_DEFAULT) throw new ArgumentOutOfRangeException('index', index, \"is greater than or equal to the number of elements in source\");\r\n\t\treturn v;\r\n\t}\r\n\r\n\telementAtOrDefault(index:number, defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tInteger.assertZeroOrGreater(index, 'index');\r\n\t\tvar n:number = index;\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tvar i = 0;\r\n\t\t\t\twhile(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(i==n) return e.current;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn defaultValue;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/* Note: Unlike previous implementations, you could pass a predicate into these methods.\r\n\t * But since under the hood it ends up calling .where(predicate) anyway,\r\n\t * it may be better to remove this to allow for a cleaner signature/override.\r\n\t * JavaScript/TypeScript does not easily allow for a strict method interface like C#.\r\n\t * Having to write extra override logic is error prone and confusing to the consumer.\r\n\t * Removing the predicate here may also cause the consumer of this method to think more about how they structure their query.\r\n\t * The end all difference is that the user must declare .where(predicate) before .first(), .single(), or .last().\r\n\t * */\r\n\r\n\tfirst():T\r\n\t{\r\n\t\tvar v = this.firstOrDefault(INVALID_DEFAULT);\r\n\t\tif(v===INVALID_DEFAULT) throw new Error(\"first:The sequence is empty.\");\r\n\t\treturn v;\r\n\t}\r\n\r\n\tfirstOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=> e.moveNext() ? e.current : defaultValue\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tsingle():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tif(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = e.current;\r\n\t\t\t\t\tif(!e.moveNext()) return value;\r\n\t\t\t\t\tthrow new Error(\"single:sequence contains more than one element.\");\r\n\t\t\t\t}\r\n\t\t\t\tthrow new Error(\"single:The sequence is empty.\");\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tsingleOrDefault(defaultValue:T = null):T\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tif(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = e.current;\r\n\t\t\t\t\tif(!e.moveNext()) return value;\r\n\t\t\t\t}\r\n\t\t\t\treturn defaultValue;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tany():boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=> e.moveNext()\r\n\t\t);\r\n\t}\r\n\r\n\tisEmpty():boolean\r\n\t{\r\n\t\treturn !this.any();\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\t// #region Projection and Filtering Methods\r\n\r\n\ttraverseBreadthFirst(\r\n\t\tchildrenSelector:(element:T) => IEnumerableOrArray<T>):Enumerable<T>;\r\n\r\n\ttraverseBreadthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode>):Enumerable<TNode>;\r\n\r\n\ttraverseBreadthFirst<TResult>(\r\n\t\tchildrenSelector:(element:T) => IEnumerableOrArray<T>,\r\n\t\tresultSelector?:(element:T, nestLevel?:number) => TResult):Enumerable<TResult>;\r\n\r\n\ttraverseBreadthFirst<TNode, TResult>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode>,\r\n\t\tresultSelector?:(element:TNode, nestLevel?:number) => TResult):Enumerable<TResult>;\r\n\r\n\ttraverseBreadthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode>,\r\n\t\tresultSelector:(\r\n\t\t\telement:TNode,\r\n\t\t\tnestLevel?:number) => any = Functions.Identity):Enumerable<any>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null; // Is endless is not affirmative if false.\r\n\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar nestLevel:number = 0;\r\n\t\t\t\tvar buffer:any[], len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<any>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnestLevel = 0;\r\n\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbuffer[len++] = enumerator.current;\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tvar next = Enumerable\r\n\t\t\t\t\t\t\t\t.from(buffer)\r\n\t\t\t\t\t\t\t\t.selectMany(childrenSelector);\r\n\r\n\t\t\t\t\t\t\tif(!next.any())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tnestLevel++;\r\n\t\t\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = next.getEnumerator();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\ttraverseDepthFirst(\r\n\t\tchildrenSelector:(element:T) => IEnumerableOrArray<T>):Enumerable<T>;\r\n\r\n\ttraverseDepthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode>):Enumerable<TNode>;\r\n\r\n\ttraverseDepthFirst<TResult>(\r\n\t\tchildrenSelector:(element:T) => IEnumerableOrArray<T>,\r\n\t\tresultSelector?:(element:T, nestLevel?:number) => TResult):Enumerable<TResult>;\r\n\r\n\ttraverseDepthFirst<TNode, TResult>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode>,\r\n\t\tresultSelector?:(element:TNode, nestLevel?:number) => TResult):Enumerable<TResult>;\r\n\r\n\ttraverseDepthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode>,\r\n\t\tresultSelector:(\r\n\t\t\telement:TNode,\r\n\t\t\tnestLevel?:number) => any = Functions.Identity):Enumerable<any>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null; // Is endless is not affirmative if false.\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t// Dev Note: May want to consider using an actual stack and not an array.\r\n\t\t\t\tvar enumeratorStack:IEnumerator<any>[] = [];\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar len:number;  // Avoid using push/pop since they query .length every time and can be slower.\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet value = resultSelector(enumerator.current, len);\r\n\t\t\t\t\t\t\t\tenumeratorStack[len++] = enumerator;\r\n\t\t\t\t\t\t\t\tlet e = Enumerable.fromAny<any>(childrenSelector(enumerator.current));\r\n\t\t\t\t\t\t\t\tenumerator = e ? e.getEnumerator() : EmptyEnumerator;\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(len==0) return false;\r\n\r\n\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\tenumerator = enumeratorStack[--len];\r\n\t\t\t\t\t\t\tenumeratorStack.length = len;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose.these(enumeratorStack);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tflatten():Enumerable<any>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null; // Is endless is not affirmative if false.;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar middleEnumerator:IEnumerator<any> = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(middleEnumerator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(middleEnumerator.current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar c = enumerator.current;\r\n\t\t\t\t\t\t\t\t// Because strings are enumerable, we can get stuck in an infinite loop.\r\n\t\t\t\t\t\t\t\t// Treat strings as primitives here.\r\n\t\t\t\t\t\t\t\tvar e = !Type.isString(c) && Enumerable.fromAny(c);\r\n\t\t\t\t\t\t\t\tif(e)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator\r\n\t\t\t\t\t\t\t\t\t\t= e\r\n\t\t\t\t\t\t\t\t\t\t.selectMany(Functions.Identity)\r\n\t\t\t\t\t\t\t\t\t\t.flatten()\r\n\t\t\t\t\t\t\t\t\t\t.getEnumerator();\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(c);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tpairwise<TSelect>(selector:(prev:T, current:T) => TSelect):Enumerable<TSelect>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TSelect>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TSelect>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tenumerator.moveNext();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar prev = enumerator.current;\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(selector(prev, enumerator.current));\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tscan(func:(a:T, b:T) => T, seed?:T):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar isUseSeed = seed!==VOID0; // For now...\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar value:T;\r\n\t\t\t\tvar isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\t//noinspection JSUnusedAssignment\r\n\t\t\t\t\t\t\treturn isUseSeed\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(value = seed)\r\n\t\t\t\t\t\t\t\t: enumerator.moveNext() && yielder.yieldReturn(value\r\n\t\t\t\t\t\t\t\t= enumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(value = func(value, enumerator.current))\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tselect<TResult>(selector:Selector<T, TResult>):InfiniteEnumerable<TResult>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(selector(enumerator.current, index++))\r\n\t\t\t\t\t\t\t: yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\t/*\r\n\tpublic static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(\r\n\t\tthis IEnumerable<TSource> source,\r\n\t\tFunc<TSource, IEnumerable<TCollection>> collectionSelector,\r\n\t\tFunc<TSource, TCollection, TResult> resultSelector)\r\n\t */\r\n\r\n\tprotected _selectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TElement>>,\r\n\t\tresultSelector?:(collection:T, element:TElement) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null; // Do second enumeration, it will be indeterminate if false.\r\n\t\tif(!resultSelector)\r\n\t\t\tresultSelector = (a:T, b:any) => <TResult>b;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar middleEnumerator:IEnumerator<any>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tmiddleEnumerator = undefined;\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t// Just started, and nothing to enumerate? End.\r\n\t\t\t\t\t\tif(middleEnumerator===VOID0 && !enumerator.moveNext())\r\n\t\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t\t// moveNext has been called at least once...\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\t// Initialize middle if there isn't one.\r\n\t\t\t\t\t\t\tif(!middleEnumerator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar middleSeq = collectionSelector(enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\t\t// Collection is null?  Skip it...\r\n\t\t\t\t\t\t\t\tif(!middleSeq)\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t\tmiddleEnumerator = enumeratorFrom(middleSeq);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\t\t\t\tenumerator.current, middleEnumerator.current\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// else no more in this middle?  Then clear and reset for next...\r\n\r\n\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(enumerator.moveNext());\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t\tenumerator = null;\r\n\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TResult>>):InfiniteEnumerable<TResult>;\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TElement>>,\r\n\t\tresultSelector:(collection:T, element:TElement) => TResult):InfiniteEnumerable<TResult>;\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<any>>,\r\n\t\tresultSelector?:(collection:T, element:any) => TResult):InfiniteEnumerable<TResult>\r\n\t{\r\n\t\treturn this._selectMany(collectionSelector, resultSelector);\r\n\t}\r\n\r\n\tprotected _choose<TResult>(selector:Selector<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar result = selector(enumerator.current, index++);\r\n\t\t\t\t\t\t\tif(result!==null && result!==VOID0)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns selected values that are not null or undefined.\r\n\t */\r\n\tchoose():InfiniteEnumerable<T>;\r\n\tchoose<TResult>(selector?:Selector<T, TResult>):InfiniteEnumerable<TResult>\r\n\tchoose(selector:Selector<T, any> = Functions.Identity):InfiniteEnumerable<any>\r\n\t{\r\n\t\treturn this._choose(selector)\r\n\t}\r\n\r\n\twhere(predicate:Predicate<T>):InfiniteEnumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(predicate(enumerator.current, index++))\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tofType<TType>(type:{ new (...params:any[]):TType }):InfiniteEnumerable<TType>;\r\n\tofType<TType>(type:any):InfiniteEnumerable<TType>\r\n\t{\r\n\t\tvar typeName:string;\r\n\t\tswitch(<any>type)\r\n\t\t{\r\n\t\t\tcase Number:\r\n\t\t\t\ttypeName = Type.NUMBER;\r\n\t\t\t\tbreak;\r\n\t\t\tcase String:\r\n\t\t\t\ttypeName = Type.STRING;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Boolean:\r\n\t\t\t\ttypeName = Type.BOOLEAN;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Function:\r\n\t\t\t\ttypeName = Type.FUNCTION;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn <Enumerable<any>>this\r\n\t\t\t\t\t.where(x=>x instanceof type);\r\n\t\t}\r\n\t\treturn <Enumerable<any>>this\r\n\t\t\t.choose()\r\n\t\t\t.where(x=>(typeof x)===typeName);\r\n\t}\r\n\r\n\texcept<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T, boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\tif(second)\r\n\t\t\t\t\t\t\tforEach(second, key => { keys.addByKeyValue(key, true) });\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current = enumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tkeys.clear();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tdistinct(compareSelector?:(value:T) => T):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn this.except(null, compareSelector);\r\n\t}\r\n\r\n\t// [0,0,0,1,1,1,2,2,2,0,0,0,1,1] results in [0,1,2,0,1];\r\n\tdistinctUntilChanged<TCompare>(compareSelector:Selector<T, TCompare> = Functions.Identity):InfiniteEnumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar compareKey:TCompare;\r\n\t\t\t\tvar initial:boolean = true;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar key = compareSelector(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(initial)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinitial = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(Values.areEqual(compareKey, key))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcompareKey = key;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a single default value if empty.\r\n\t * @param defaultValue\r\n\t * @returns {Enumerable}\r\n\t */\r\n\tdefaultIfEmpty(defaultValue:T = null):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(defaultValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tzip<TSecond, TResult>(\r\n\t\tsecond:IEnumerableOrArray<TSecond>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(second);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> firstEnumerator.moveNext()\r\n\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++)),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tzipMultiple<TSecond, TResult>(\r\n\t\tsecond:IArray<IEnumerableOrArray<TSecond>>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!second.length)\r\n\t\t\treturn Enumerable.empty<TResult>();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar secondTemp:Queue<any>;\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsecondTemp = new Queue<any>(second);\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\twhile(!secondEnumerator)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(secondTemp.count)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tvar next = secondTemp.dequeue();\r\n\t\t\t\t\t\t\t\t\t\tif(next) // In case by chance next is null, then try again.\r\n\t\t\t\t\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(next);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\t\tresultSelector(firstEnumerator.current, secondEnumerator.current, index++)\r\n\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\tsecondEnumerator.dispose();\r\n\t\t\t\t\t\t\t\tsecondEnumerator = null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondTemp);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t// #region Join Methods\r\n\r\n\tjoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerableOrArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar outerEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar lookup:ILookup<TKey,TInner>;\r\n\t\t\t\tvar innerElements:TInner[] = null;\r\n\t\t\t\tvar innerCount:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\touterEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(innerElements!=null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar innerElement = innerElements[innerCount++];\r\n\t\t\t\t\t\t\t\tif(innerElement!==VOID0)\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(outerEnumerator.current, innerElement));\r\n\r\n\t\t\t\t\t\t\t\tinnerElement = null;\r\n\t\t\t\t\t\t\t\tinnerCount = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(outerEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar key = outerKeySelector(outerEnumerator.current);\r\n\t\t\t\t\t\t\t\tinnerElements = lookup.get(key);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(outerEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tgroupJoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerableOrArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner[]) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar lookup:ILookup<TKey, TInner> = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tenumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(\r\n\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\tenumerator.current,\r\n\t\t\t\t\t\t\tlookup.get(outerKeySelector(enumerator.current))\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tmerge(enumerables:IArray<IEnumerableOrArray<T>>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null;\r\n\r\n\t\tif(!enumerables || enumerables.length==0)\r\n\t\t\treturn _;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar queue:Queue<IEnumerableOrArray<T>>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// 1) First get our values...\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tqueue = new Queue<IEnumerableOrArray<T>>(enumerables);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\twhile(!enumerator && queue.count)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator = enumeratorFrom<T>(queue.dequeue()); // 4) Keep going and on to step 2.  Else fall through to yieldBreak().\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator && enumerator.moveNext()) // 2) Keep returning until done.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(enumerator) // 3) Dispose and reset for next.\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = null;\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, queue); // Just in case this gets disposed early.\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tconcat(...enumerables:Array<IEnumerableOrArray<T>>):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn this.merge(enumerables);\r\n\t}\r\n\r\n\r\n\tunion<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector:Selector<T, TCompare> = Functions.Identity):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null;\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T, any>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, any>(compareSelector); // Acting as a HashSet.\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:T;\r\n\t\t\t\t\t\tif(secondEnumerator===VOID0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurrent = firstEnumerator.current;\r\n\t\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom(second);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcurrent = secondEnumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tinsertAt(index:number, other:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\tInteger.assertZeroOrGreater(index, 'index');\r\n\t\tvar n:number = index;\r\n\r\n\t\tvar _ = this, isEndless = _._isEndless || null;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\tvar count:number = 0;\r\n\t\t\t\tvar isEnumerated:boolean = false;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcount = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<T>(other);\r\n\t\t\t\t\t\tisEnumerated = false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(count==n)\r\n\t\t\t\t\t\t{ // Inserting?\r\n\t\t\t\t\t\t\tisEnumerated = true;\r\n\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn !isEnumerated\r\n\t\t\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\talternateMultiple(sequence:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T,\r\n\t\t\t\t    mode:EnumerableAction,\r\n\t\t\t\t    enumerator:IEnumerator<T>,\r\n\t\t\t\t    alternateEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Instead of recalling getEnumerator every time, just reset the existing one.\r\n\t\t\t\t\t\talternateEnumerator = new ArrayEnumerator(\r\n\t\t\t\t\t\t\tEnumerable.toArray<T>(sequence)\r\n\t\t\t\t\t\t); // Freeze\r\n\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tvar hasAtLeastOne = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = hasAtLeastOne\r\n\t\t\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(hasAtLeastOne)\r\n\t\t\t\t\t\t\tbuffer = enumerator.current;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(mode)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase EnumerableAction.Break: // We're done?\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tcase EnumerableAction.Skip:\r\n\t\t\t\t\t\t\t\tif(alternateEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(alternateEnumerator.current);\r\n\t\t\t\t\t\t\t\talternateEnumerator.reset();\r\n\t\t\t\t\t\t\t\tmode = EnumerableAction.Return;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar latest = buffer;\r\n\r\n\t\t\t\t\t\t// Set up the next round...\r\n\r\n\t\t\t\t\t\t// Is there another one?  Set the buffer and setup instruct for the next one to be the alternate.\r\n\t\t\t\t\t\tvar another = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = another\r\n\t\t\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(another)\r\n\t\t\t\t\t\t\tbuffer = enumerator.current;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(latest);\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, alternateEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\talternateSingle(value:T):Enumerable<T>\r\n\t{\r\n\t\treturn this.alternateMultiple(Enumerable.make(value));\r\n\t}\r\n\r\n\talternate(...sequence:T[]):Enumerable<T>\r\n\t{\r\n\t\treturn this.alternateMultiple(sequence);\r\n\t}\r\n\r\n\r\n\t// #region Error Handling\r\n\tcatchError(handler:(e:any) => void):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Don't init...\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\thandler(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tfinallyAction(action:() => void):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(enumerator.current)\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\taction();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tbuffer(size:number):InfiniteEnumerable<T[]>\r\n\t{\r\n\t\tif(size<1 || !isFinite(size))\r\n\t\t\tthrow new Error(\"Invalid buffer size.\");\r\n\r\n\t\tInteger.assert(size, \"size\");\r\n\r\n\t\tvar _ = this, len:number;\r\n\r\n\t\treturn new Enumerable<T[]>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\treturn new EnumeratorBase<T[]>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar array:T[] = ArrayUtility.initialize<T>(size);\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\twhile(len<size && enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[len++] = enumerator.current;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tarray.length = len;\r\n\t\t\t\t\t\treturn len && yielder.yieldReturn(array);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tshare():InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar sharedEnumerator:IEnumerator<T>;\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\treturn sharedEnumerator || (sharedEnumerator = _.getEnumerator());\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(sharedEnumerator);\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * Enumerable<T> is a wrapper class that allows more primitive enumerables to exhibit LINQ behavior.\r\n *\r\n * In C# Enumerable<T> is not an instance but has extensions for IEnumerable<T>.\r\n * In this case, we use Enumerable<T> as the underlying class that is being chained.\r\n */\r\nexport class Enumerable<T>\r\nextends InfiniteEnumerable<T> implements ILinqEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tenumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:() => void,\r\n\t\tisEndless:boolean = null)\r\n\t{\r\n\t\tsuper(enumeratorFactory, finalizer);\r\n\t\tthis._isEndless = isEndless;\r\n\t}\r\n\r\n\t/**\r\n\t * Universal method for converting a primitive enumerables into a LINQ enabled ones.\r\n\t *\r\n\t * Is not limited to TypeScript usages.\r\n\t */\r\n\tstatic from<T>(source:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar e = Enumerable.fromAny(source);\r\n\t\tif(!e) throw new UnsupportedEnumerableException();\r\n\t\treturn e;\r\n\t}\r\n\r\n\tstatic fromAny(\r\n\t\tsource:any):Enumerable<any>\r\n\r\n\tstatic fromAny<T>(\r\n\t\tsource:IEnumerableOrArray<T>,\r\n\t\tdefaultEnumerable?:Enumerable<T>):Enumerable<T>\r\n\r\n\tstatic fromAny<T>(\r\n\t\tsource:any,\r\n\t\tdefaultEnumerable?:Enumerable<T>):Enumerable<T>\r\n\r\n\tstatic fromAny<T>(\r\n\t\tsource:any,\r\n\t\tdefaultEnumerable:Enumerable<T> = null):Enumerable<T>\r\n\t{\r\n\t\tif(Type.isObject(source) || Type.isString(source))\r\n\t\t{\r\n\t\t\tif(source instanceof Enumerable)\r\n\t\t\t\treturn source;\r\n\r\n\t\t\tif(Type.isArrayLike<T>(source))\r\n\t\t\t\treturn new ArrayEnumerable<T>(source);\r\n\r\n\t\t\tif(isEnumerable<T>(source))\r\n\t\t\t\treturn new Enumerable<T>(\r\n\t\t\t\t\t()=>source.getEnumerator(),\r\n\t\t\t\t\tnull, source.isEndless);\r\n\t\t}\r\n\r\n\t\treturn defaultEnumerable;\r\n\t}\r\n\r\n\tstatic fromOrEmpty<T>(source:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn Enumerable.fromAny(source) || Enumerable.empty<T>();\r\n\t}\r\n\r\n\t/**\r\n\t * Static helper for converting enumerables to an array.\r\n\t * @param source\r\n\t * @returns {any}\r\n\t */\r\n\tstatic toArray<T>(source:IEnumerableOrArray<T>):T[]\r\n\t{\r\n\t\tif(source instanceof Enumerable)\r\n\t\t\treturn source.toArray();\r\n\r\n\t\treturn toArray(source);\r\n\t}\r\n\r\n\r\n\t//////////////////////////////////////////\r\n\t// #region Static Methods...\r\n\tstatic choice<T>(values:IArray<T>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar len = values && values.length;\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!len || !isFinite(len))\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() => new EnumeratorBase<T>(\r\n\t\t\t\tnull,\r\n\t\t\t\t(yielder)=>\r\n\t\t\t\t\tyielder.yieldReturn(Integer.random.select(values)),\r\n\t\t\t\ttrue // Is endless!\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic chooseFrom<T>(...args:T[]):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn Enumerable.choice(args);\r\n\t}\r\n\r\n\tstatic cycle<T>(values:IArray<T>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar len = values && values.length;\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!len || !isFinite(len))\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t}, // Reinitialize the value just in case the enumerator is restarted.\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(index>=values.length) index = 0;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(values[index++]);\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic cycleThrough<T>(...args:T[]):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn Enumerable.cycle(args);\r\n\t}\r\n\r\n\tstatic empty<T>():FiniteEnumerable<T>\r\n\t{\r\n\t\t// Could be single static instance, but for safety, we'll make a new one.\r\n\t\treturn new FiniteEnumerable<T>(getEmptyEnumerator);\r\n\t}\r\n\r\n\tstatic repeat<T>(element:T):InfiniteEnumerable<T>;\r\n\tstatic repeat<T>(element:T, count:number):FiniteEnumerable<T>;\r\n\tstatic repeat<T>(element:T, count:number = Infinity):Enumerable<T>\r\n\t{\r\n\t\tif(!(count>0))\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t? new FiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar c:number = count;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() => { index = 0; },\r\n\t\t\t\t\t(yielder)=> (index++<c) && yielder.yieldReturn(element),\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t)\r\n\t\t\t: new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t\tnew EnumeratorBase<T>(\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element),\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t// Note: this enumeration is endless but can be disposed/cancelled and finalized.\r\n\tstatic repeatWithFinalize<T>(\r\n\t\tinitializer:() => T,\r\n\t\tfinalizer:(element:T) => void):InfiniteEnumerable<T>\r\n\t{\r\n\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar element:T;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\telement = initializer();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfinalizer(element);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an enumerable of one element.\r\n\t * @param element\r\n\t * @returns {FiniteEnumerable<T>}\r\n\t */\r\n\tstatic make<T>(element:T):FiniteEnumerable<T>\r\n\t{\r\n\t\treturn Enumerable.repeat<T>(element, 1);\r\n\t}\r\n\r\n\t// start and step can be other than integer.\r\n\r\n\tstatic range(\r\n\t\tstart:number,\r\n\t\tcount:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\r\n\r\n\t\tif(!(count>0))\r\n\t\t\treturn Enumerable.empty<number>();\r\n\r\n\t\tif(!step)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn new FiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\t\t\t\tvar c:number = count; // Force integer evaluation.\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result:boolean =\r\n\t\t\t\t\t\t\t    index++<c\r\n\t\t\t\t\t\t\t    && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result && index<count)\r\n\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n\r\n\tstatic rangeDown(\r\n\t\tstart:number,\r\n\t\tcount:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tstep = Math.abs(step)* -1;\r\n\r\n\t\treturn Enumerable.range(start, count, step);\r\n\t}\r\n\r\n\t// step = -1 behaves the same as toNegativeInfinity;\r\n\tstatic toInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):InfiniteEnumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\r\n\r\n\t\tif(!step)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\r\n\r\n\t\treturn new InfiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:number = value;\r\n\t\t\t\t\t\tvalue += step;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic toNegativeInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):InfiniteEnumerable<number>\r\n\t{\r\n\t\treturn Enumerable.toInfinity(start, -step);\r\n\t}\r\n\r\n\tstatic rangeTo(\r\n\t\tstart:number,\r\n\t\tto:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tif(isNaN(to) || !isFinite(to))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"to\", to, \"Must be a finite number.\");\r\n\r\n\t\tif(step && !isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite non-zero number.\");\r\n\r\n\t\t// This way we adjust for the delta from start and to so the user can say +/- step and it will work as expected.\r\n\t\tstep = Math.abs(step);\r\n\r\n\t\treturn new FiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(() => { value = start; },\r\n\t\t\t\t\tstart<to\r\n\t\t\t\t\t\t?\r\n\t\t\t\t\t\tyielder=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar result:boolean = value<=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\tyielder=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar result:boolean = value>=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\t\tvalue -= step;\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t, false);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic matches(input:string, pattern:any, flags:string = \"\"):FiniteEnumerable<RegExpExecArray>\r\n\t{\r\n\t\tif(input===null || input===VOID0)\r\n\t\t\tthrow new ArgumentNullException(\"input\");\r\n\t\tvar type = typeof input;\r\n\t\tif(type!=Type.STRING)\r\n\t\t\tthrow new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\r\n\r\n\t\tif(pattern instanceof RegExp)\r\n\t\t{\r\n\t\t\tflags += (pattern.ignoreCase) ? \"i\" : \"\";\r\n\t\t\tflags += (pattern.multiline) ? \"m\" : \"\";\r\n\t\t\tpattern = pattern.source;\r\n\t\t}\r\n\r\n\t\tif(flags.indexOf(\"g\")=== -1) flags += \"g\";\r\n\r\n\t\treturn new FiniteEnumerable<RegExpExecArray>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar regex:RegExp;\r\n\t\t\t\treturn new EnumeratorBase<RegExpExecArray>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tregex = new RegExp(pattern, flags);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Calling regex.exec consecutively on the same input uses the lastIndex to start the next match.\r\n\t\t\t\t\t\tvar match = regex.exec(input);\r\n\t\t\t\t\t\treturn (match!==null) ? yielder.yieldReturn(match) : false;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic generate<T>(factory:(index?:number) => T):InfiniteEnumerable<T>;\r\n\tstatic generate<T>(factory:(index?:number) => T, count:number):FiniteEnumerable<T>;\r\n\tstatic generate<T>(factory:(index?:number) => T, count:number = Infinity):InfiniteEnumerable<T>\r\n\t{\r\n\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t?\r\n\t\t\tnew FiniteEnumerable<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tvar c:number = count;\r\n\t\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current:number = index++;\r\n\t\t\t\t\t\t\treturn current<c && yielder.yieldReturn(factory(current));\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\tfalse\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t:\r\n\t\t\tnew InfiniteEnumerable<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tvar index:number = 0;\r\n\t\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t(yielder)=> yielder.yieldReturn(factory(index++)),\r\n\r\n\t\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t}\r\n\r\n\tstatic unfold<T>(\r\n\t\tseed:T,\r\n\t\tvalueFactory:Selector<T, T>,\r\n\t\tskipSeed:Boolean = false):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0;\r\n\t\t\t\tvar value:T;\r\n\t\t\t\tvar isFirst:boolean;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = seed;\r\n\t\t\t\t\t\tisFirst = !skipSeed;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar i = index++;\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tvalue = valueFactory(value, i);\r\n\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic forEach<T>(\r\n\t\tenumerable:IEnumerableOrArray<T>,\r\n\t\taction:(element:T, index?:number) => any,\r\n\t\tmax:number = Infinity):number\r\n\t{\r\n\t\t// Will properly dispose created enumerable.\r\n\t\t// Will throw if enumerable is endless.\r\n\t\treturn forEach(enumerable, action, max);\r\n\t}\r\n\r\n\tstatic map<T,TResult>(\r\n\t\tenumerable:IEnumerableOrArray<T>,\r\n\t\tselector:Selector<T,TResult>):TResult[]\r\n\t{\r\n\t\t// Will properly dispose created enumerable.\r\n\t\t// Will throw if enumerable is endless.\r\n\t\treturn map(enumerable, selector);\r\n\r\n\t}\r\n\r\n\t// Slightly optimized versions for numbers.\r\n\tstatic max(values:FiniteEnumerable<number>):number\r\n\t{\r\n\t\treturn values\r\n\t\t\t.takeUntil(v=> v== +Infinity, true)\r\n\t\t\t.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tstatic min(values:FiniteEnumerable<number>):number\r\n\t{\r\n\t\treturn values\r\n\t\t\t.takeUntil(v=> v== -Infinity, true)\r\n\t\t\t.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Takes any set of collections of the same type and weaves them together.\r\n\t * @param enumerables\r\n\t * @returns {Enumerable<T>}\r\n\t */\r\n\tstatic weave<T>(\r\n\t\tenumerables:IEnumerableOrArray<IEnumerableOrArray<T>>):Enumerable<T>\r\n\t{\r\n\t\tif(!enumerables)\r\n\t\t\tthrow new ArgumentNullException('enumerables');\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar queue:Queue<IEnumerator<T>>;\r\n\t\t\t\tvar mainEnumerator:IEnumerator<IEnumerableOrArray<T>>;\r\n\t\t\t\tvar index:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tqueue = new Queue<IEnumerator<T>>();\r\n\t\t\t\t\t\tmainEnumerator = enumeratorFrom(enumerables);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet e:IEnumerator<T>;\r\n\r\n\t\t\t\t\t\t// First pass...\r\n\t\t\t\t\t\tif(mainEnumerator)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(!e && mainEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet c = mainEnumerator.current;\r\n\t\t\t\t\t\t\t\te = nextEnumerator(queue, c && enumeratorFrom(c));\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(!e)\r\n\t\t\t\t\t\t\t\tmainEnumerator = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\twhile(!e && queue.count)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\te = nextEnumerator(queue, queue.dequeue());\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn e\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(e.current)\r\n\t\t\t\t\t\t\t: yielder.yieldBreak();\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose.these(queue.dump());\r\n\t\t\t\t\t\tdispose(mainEnumerator, queue);\r\n\t\t\t\t\t\tmainEnumerator = null;\r\n\t\t\t\t\t\tqueue = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tdoAction(\r\n\t\taction:Action<T>|Predicate<T>|Selector<T, number>|Selector<T, EnumerableAction>,\r\n\t\tinitializer?:()=>void,\r\n\t\tisEndless:boolean = this.isEndless):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.doAction(action, initializer, isEndless);\r\n\t}\r\n\r\n// #region Indexing/Paging methods.\r\n\r\n\tskip(count:number):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.skip(count);\r\n\t}\r\n\r\n\tskipWhile(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return\r\n\t\t);\r\n\t}\r\n\r\n\ttakeWhile(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException('predicate');\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t: EnumerableAction.Break,\r\n\t\t\tnull,\r\n\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t);\r\n\t}\r\n\r\n\t// Is like the inverse of take While with the ability to return the value identified by the predicate.\r\n\ttakeUntil(predicate:Predicate<T>, includeUntilValue?:boolean):Enumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException('predicate');\r\n\r\n\t\tif(!includeUntilValue)\r\n\t\t\treturn this.doAction(\r\n\t\t\t\t(element:T, index?:number) =>\r\n\t\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t\t? EnumerableAction.Break\r\n\t\t\t\t\t\t: EnumerableAction.Return,\r\n\t\t\t\tnull,\r\n\t\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t\t);\r\n\r\n\t\tvar found:boolean = false;\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(found)\r\n\t\t\t\t\treturn EnumerableAction.Break;\r\n\r\n\t\t\t\tfound = predicate(element, index);\r\n\t\t\t\treturn EnumerableAction.Return;\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tfound = false;\r\n\t\t\t},\r\n\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tforEach(action:Predicate<T> | Action<T>):void\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tthrowIfEndless(_.isEndless);\r\n\r\n\t\tvar index:number = 0;\r\n\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\tusing(\r\n\t\t\t_.getEnumerator(), e=>\r\n\t\t\t{\r\n\t\t\t\tthrowIfEndless(e.isEndless);\r\n\r\n\t\t\t\t// It is possible that subsequently 'action' could cause the enumeration to dispose, so we have to check each time.\r\n\t\t\t\twhile(_.throwIfDisposed() && e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(action(e.current, index++)===false)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Conversion Methods\r\n\ttoArray(predicate?:Predicate<T>):T[]\r\n\t{\r\n\t\treturn predicate\r\n\t\t\t? this.where(predicate).toArray()\r\n\t\t\t: this.copyTo([]);\r\n\t}\r\n\r\n\tcopyTo(target:T[], index:number = 0, count:number = Infinity):T[]\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(!target) throw new ArgumentNullException(\"target\");\r\n\t\tInteger.assertZeroOrGreater(index);\r\n\r\n\t\t// If not exposing an action that could cause dispose, then use forEach utility instead.\r\n\t\tforEach<T>(this, (x, i)=>\r\n\t\t{\r\n\t\t\ttarget[i + index] = x\r\n\t\t}, count);\r\n\r\n\t\treturn target;\r\n\t}\r\n\r\n\ttoLookup<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue> = Functions.Identity,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):ILookup<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue[]> = new Dictionary<TKey, TValue[]>(compareSelector);\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar key = keySelector(x);\r\n\t\t\t\tvar element = elementSelector(x);\r\n\r\n\t\t\t\tvar array = dict.getValue(key);\r\n\t\t\t\tif(array!==VOID0) array.push(element);\r\n\t\t\t\telse dict.addByKeyValue(key, [element]);\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn new Lookup<TKey, TValue>(dict);\r\n\t}\r\n\r\n\ttoMap<TResult>(\r\n\t\tkeySelector:Selector<T, string>,\r\n\t\telementSelector:Selector<T, TResult>):IMap<TResult>\r\n\t{\r\n\t\tvar obj:IMap<TResult> = {};\r\n\t\tthis.forEach((x, i)=>\r\n\t\t{\r\n\t\t\tobj[keySelector(x, i)] = elementSelector(x, i);\r\n\t\t});\r\n\t\treturn obj;\r\n\t}\r\n\r\n\ttoDictionary<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue>,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):IDictionary<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue> = new Dictionary<TKey, TValue>(compareSelector);\r\n\t\tthis.forEach((x, i)=> dict.addByKeyValue(keySelector(x, i), elementSelector(x, i)));\r\n\t\treturn dict;\r\n\t}\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\treturn this.select(selector).toArray().join(separator);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\ttakeExceptLast(count:number = 1):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!(count>0)) // Out of bounds?\r\n\t\t\treturn _;\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\t\tvar c = count;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar q:Queue<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tq = new Queue<T>();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Add the next one to the queue.\r\n\t\t\t\t\t\t\tq.enqueue(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// Did we reach our quota?\r\n\t\t\t\t\t\t\tif(q.count>c)\r\n\t\t\t\t\t\t\t// Okay then, start returning results.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(q.dequeue());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, q);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tskipToLast(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!(count>0)) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!isFinite(count)) // Infinity means return all.\r\n\t\t\treturn _;\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\t// This sets up the query so nothing is done until move next is called.\r\n\t\treturn _.reverse()\r\n\t\t\t.take(count)\r\n\t\t\t.reverse();\r\n\t}\r\n\r\n\t// To help with type guarding.\r\n\r\n\twhere(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.where(predicate);\r\n\t}\r\n\r\n\tselect<TResult>(selector:Selector<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\t\treturn <Enumerable<TResult>>super.select(selector);\r\n\t}\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TResult>>):Enumerable<TResult>;\r\n\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TElement>>,\r\n\t\tresultSelector:(collection:T, element:TElement)=>TResult):Enumerable<TResult>;\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<any>>,\r\n\t\tresultSelector?:(collection:T, element:any)=>TResult):Enumerable<TResult>\r\n\t{\r\n\t\treturn this._selectMany(collectionSelector, resultSelector);\r\n\t}\r\n\r\n\tchoose():Enumerable<T>;\r\n\tchoose<TResult>(selector?:Selector<T, TResult>):Enumerable<TResult>\r\n\tchoose(selector:Selector<T, any> = Functions.Identity):Enumerable<any>\r\n\t{\r\n\t\treturn this._choose(selector);\r\n\t}\r\n\r\n\treverse():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\t\tthrowIfEndless(_._isEndless); // Cannot reverse an endless collection...\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T[];\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tindex = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> index && yielder.yieldReturn(buffer[--index]),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tshuffle():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\t\tthrowIfEndless(_._isEndless); // Cannot shuffle an endless collection...\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T[];\r\n\t\t\t\tvar capacity:number;\r\n\t\t\t\tvar len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tcapacity = len = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Avoid using major array operations like .slice();\r\n\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tvar selectedIndex = Integer.random(len);\r\n\t\t\t\t\t\tvar selectedValue = buffer[selectedIndex];\r\n\r\n\t\t\t\t\t\tbuffer[selectedIndex] = buffer[--len]; // Take the last one and put it here.\r\n\t\t\t\t\t\tbuffer[len] = null; // clear possible reference.\r\n\r\n\t\t\t\t\t\tif(len%32==0) // Shrink?\r\n\t\t\t\t\t\t\tbuffer.length = len;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selectedValue);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\t\tvar count:number = 0;\r\n\t\tthis.forEach(\r\n\t\t\tpredicate\r\n\r\n\t\t\t\t?\r\n\t\t\t\t(x, i) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(predicate(x, i))++count;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t:\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\t++count;\r\n\t\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\t// Akin to '.every' on an array.\r\n\tall(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException(\"predicate\");\r\n\r\n\t\tvar result = true;\r\n\t\tthis.forEach((x, i) =>\r\n\t\t{\r\n\t\t\tif(!predicate(x, i))\r\n\t\t\t{\r\n\t\t\t\tresult = false;\r\n\t\t\t\treturn false; // break\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// 'every' has been added here for parity/compatibility with an array.\r\n\tevery(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.all(predicate);\r\n\t}\r\n\r\n\t// Akin to '.some' on an array.\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tif(!predicate)\r\n\t\t\treturn super.any();\r\n\r\n\t\tvar result = false;\r\n\t\t// Splitting the forEach up this way reduces iterative processing.\r\n\t\t// forEach handles the generation and disposal of the enumerator.\r\n\t\tthis.forEach(\r\n\t\t\t(x, i) =>\r\n\t\t\t{\r\n\t\t\t\tresult = predicate(x, i); // false = not found and therefore it should continue.  true = found and break;\r\n\t\t\t\treturn !result;\r\n\t\t\t});\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t// 'some' has been added here for parity/compatibility with an array.\r\n\tsome(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.any(predicate);\r\n\t}\r\n\r\n\r\n\tcontains<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):boolean\r\n\t{\r\n\t\treturn compareSelector\r\n\t\t\t? this.any(v=> compareSelector(v)===compareSelector(value))\r\n\t\t\t: this.any(v=> v===value);\r\n\t}\r\n\r\n\t// Originally has an overload for a predicate,\r\n\t// but that's a bad idea since this could be an enumeration of functions and therefore fail the intent.\r\n\t// Better to chain a where statement first to be more explicit.\r\n\tindexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar found:number = -1;\r\n\t\tthis.forEach(\r\n\t\t\tcompareSelector\r\n\t\t\t\t?\r\n\t\t\t\t(element:T, i?:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(Values.areEqual(compareSelector(element, i), compareSelector(value, i), true))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = i;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t:\r\n\t\t\t\t(element:T, i?:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Why?  Because NaN doesn't equal NaN. :P\r\n\t\t\t\t\tif(Values.areEqual(element, value, true))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = i;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\r\n\t\treturn found;\r\n\t}\r\n\r\n\tlastIndexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar result:number = -1;\r\n\t\tthis.forEach(\r\n\t\t\tcompareSelector\r\n\t\t\t\t?\r\n\t\t\t\t(element:T, i?:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(Values.areEqual(compareSelector(element, i), compareSelector(value, i), true)) result\r\n\t\t\t\t\t\t= i;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t:\r\n\t\t\t\t(element:T, i?:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(Values.areEqual(element, value, true)) result = i;\r\n\t\t\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tmerge(enumerables:IArray<IEnumerableOrArray<T>>):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.merge(enumerables);\r\n\t}\r\n\r\n\tconcat(...enumerables:Array<IEnumerableOrArray<T>>):Enumerable<T>\r\n\t{\r\n\t\treturn this.merge(enumerables);\r\n\t}\r\n\r\n\r\n\tintersect<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T,boolean>;\r\n\t\t\t\tvar outs:Dictionary<T,boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\touts = new Dictionary<T, boolean>(compareSelector);\r\n\r\n\t\t\t\t\t\tforEach(second, key=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tkeys.addByKeyValue(key, true);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current = enumerator.current;\r\n\t\t\t\t\t\t\tif(!outs.containsKey(current) && keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\touts.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, keys, outs);\r\n\t\t\t\t\t},\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te1=> using(\r\n\t\t\t\tenumeratorFrom(second),\r\n\t\t\t\te2=>\r\n\t\t\t\t{\r\n\t\t\t\t\t// if both are endless, this will never evaluate.\r\n\t\t\t\t\tthrowIfEndless(e1.isEndless && e2.isEndless);\r\n\r\n\t\t\t\t\twhile(e1.moveNext())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!e2.moveNext() || !equalityComparer(e1.current, e2.current))\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn !e2.moveNext();\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t//isEquivalent(second:IEnumerableOrArray<T>,\r\n\t//\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t//{\r\n\t//\treturn this\r\n\t//\t\t.orderBy(keySelector)\r\n\t//\t\t.sequenceEqual(Enumerable.from(second).orderBy(keySelector))\r\n\t//}\r\n\r\n\r\n\t// #endregion\r\n\r\n\r\n\tofType<TType>(type:{ new (...params:any[]):TType }):Enumerable<TType>;\r\n\tofType<TType>(type:any):Enumerable<TType>\r\n\t{\r\n\t\treturn <Enumerable<TType>>super.ofType(type);\r\n\t}\r\n\r\n\texcept<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.except(second, compareSelector);\r\n\t}\r\n\r\n\tdistinct(compareSelector?:(value:T)=>T):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.distinct(compareSelector);\r\n\t}\r\n\r\n\tdistinctUntilChanged<TCompare>(compareSelector:Selector<T, TCompare> = Functions.Identity):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.distinctUntilChanged(compareSelector);\r\n\t}\r\n\r\n// #region Ordering Methods\r\n\r\n\torderBy<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Ascending);\r\n\t}\r\n\r\n\torderUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Ascending, null, comparison);\r\n\t}\r\n\r\n\torderUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Descending, null, comparison);\r\n\t}\r\n\r\n\torderByDescending<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Descending);\r\n\t}\r\n\r\n\t/*\r\n\t\t weightedSample(weightSelector) {\r\n\t\t weightSelector = Utils.createLambda(weightSelector);\r\n\t\t var source = this;\r\n\r\n\t\t return new Enumerable<T>(() => {\r\n\t\t var sortedByBound;\r\n\t\t var totalWeight = 0;\r\n\r\n\t\t return new EnumeratorBase<T>(\r\n\t\t () => {\r\n\t\t sortedByBound = source\r\n\t\t .choose(function (x) {\r\n\t\t var weight = weightSelector(x);\r\n\t\t if (weight <= 0) return null; // ignore 0\r\n\r\n\t\t totalWeight += weight;\r\n\t\t return { value: x, bound: totalWeight }\r\n\t\t })\r\n\t\t .toArray();\r\n\t\t },\r\n\t\t () => {\r\n\t\t if (sortedByBound.length > 0) {\r\n\t\t var draw = (Math.random() * totalWeight) + 1;\r\n\r\n\t\t var lower = -1;\r\n\t\t var upper = sortedByBound.length;\r\n\t\t while (upper - lower > 1) {\r\n\t\t var index = ((lower + upper) / 2);\r\n\t\t if (sortedByBound[index].bound >= draw) {\r\n\t\t upper = index;\r\n\t\t }\r\n\t\t else {\r\n\t\t lower = index;\r\n\t\t }\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldReturn(sortedByBound[upper].value);\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldBreak();\r\n\t\t },\r\n\t\t Functions.Blank);\r\n\t\t });\r\n\t\t }\r\n\t\t */\r\n\t// #endregion\r\n\r\n\tbuffer(size:number):Enumerable<T[]>\r\n\t{\r\n\t\treturn <Enumerable<T[]>>super.buffer(size);\r\n\t}\r\n\r\n\t// #region Grouping Methods\r\n\r\n\t// Originally contained a result selector (not common use), but this could be done simply by a select statement after.\r\n\r\n\r\n\tgroupBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tgroupBy<TKey, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, T>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, T>>;\r\n\tgroupBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() => this.toLookup(keySelector, elementSelector, compareSelector)\r\n\t\t\t\t.getEnumerator()\r\n\t\t);\r\n\t}\r\n\r\n\tpartitionBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tpartitionBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TElement>,\r\n\t\tresultSelector?:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, TElement>>;\r\n\tpartitionBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, TElement>,\r\n\t\tresultSelector:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>\r\n\t\t\t= (key:TKey, elements:TElement[]) => new Grouping<TKey, TElement>(key, elements),\r\n\t\tcompareSelector:Selector<TKey, TCompare>\r\n\t\t\t= Functions.Identity):Enumerable<IGrouping<TKey, T>>|Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar key:TKey;\r\n\t\t\t\tvar compareKey:TCompare;\r\n\t\t\t\tvar group:TElement[];\r\n\t\t\t\tvar len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<IGrouping<TKey, TElement>>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tkey = keySelector(enumerator.current);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector(enumerator.current)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!group)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tvar hasNext:boolean, c:T;\r\n\t\t\t\t\t\twhile((hasNext = enumerator.moveNext()))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = enumerator.current;\r\n\t\t\t\t\t\t\tif(compareKey===compareSelector(keySelector(c)))\r\n\t\t\t\t\t\t\t\tgroup[len++] = elementSelector(c);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar result:IGrouping<TKey, TElement>\r\n\t\t\t\t\t\t\t    = resultSelector(key, group);\r\n\r\n\t\t\t\t\t\tif(hasNext)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = enumerator.current;\r\n\t\t\t\t\t\t\tkey = keySelector(c);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector(c)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Aggregate Methods\r\n\r\n\taggregate(\r\n\t\tfunc:(a:T, b:T) => T,\r\n\t\tseed?:T):T\r\n\t{\r\n\t\treturn this.scan(func, seed).lastOrDefault();\r\n\t}\r\n\r\n\taverage(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar count = 0;\r\n\t\tvar sum = this.sum((e, i)=>\r\n\t\t{\r\n\t\t\tcount++;\r\n\t\t\treturn selector(e, i);\r\n\t\t});\r\n\r\n\t\treturn (isNaN(sum) || !count)\r\n\t\t\t? NaN\r\n\t\t\t: (sum/count);\r\n\t}\r\n\r\n\t// If using numbers, it may be useful to call .takeUntil(v=>v==Infinity,true) before calling max. See static versions for numbers.\r\n\tmax():T\r\n\t{\r\n\t\treturn this.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tmin():T\r\n\t{\r\n\t\treturn this.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\tmaxBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)>keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\tminBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)<keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\t// Addition...  Only works with numerical enumerations.\r\n\tsum(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar sum = 0;\r\n\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tvar sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite +=\r\n\t\t\t\t\t\tvalue>0 ?\r\n\t\t\t\t\t\t\t(+1) :\r\n\t\t\t\t\t\t\t(-1);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite*Infinity) : sum);\r\n\t}\r\n\r\n\t// Multiplication...\r\n\tproduct(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar result = 1, exists:boolean = false;\r\n\r\n\t\tthis.forEach(\r\n\t\t\t(x, i)=>\r\n\t\t\t{\r\n\t\t\t\texists = true;\r\n\t\t\t\tvar value = selector(x, i);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(value==0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = 0; // Multiplying by zero will always end in zero.\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Multiplication can never recover from infinity and simply must retain signs.\r\n\t\t\t\t// You could cancel out infinity with 1/infinity but no available representation exists.\r\n\t\t\t\tresult *= value;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (exists && isNaN(result)) ? NaN : result;\r\n\t}\r\n\r\n\t/**\r\n\t * Takes the first number and divides it by all following.\r\n\t * @param selector\r\n\t * @returns {number}\r\n\t */\r\n\tquotient(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar count = 0;\r\n\t\tvar result:number = NaN;\r\n\r\n\t\tthis.forEach(\r\n\t\t\t(x, i)=>\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x, i);\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif(count===1)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = value;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isNaN(value) || value===0 || !isFinite(value))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresult /= value;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(count===1)\r\n\t\t\tresult = NaN;\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Single Value Return...\r\n\r\n\tlast():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"last:No element satisfies the condition.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tshare():Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.share();\r\n\t}\r\n\r\n\r\n\tcatchError(handler:(e:any)=>void):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.catchError(handler);\r\n\t}\r\n\r\n\r\n\tfinallyAction(action:()=>void):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.finallyAction(action);\r\n\t}\r\n\r\n\tmemoize():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\tvar cache:T[];\r\n\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tif(!enumerator)\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(!cache)\r\n\t\t\t\t\t\t\tcache = [];\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tvar i = index++;\r\n\r\n\t\t\t\t\t\tif(i>=cache.length)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(cache[i] = enumerator.current)\r\n\t\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(cache[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t\tif(cache)\r\n\t\t\t\t\tcache.length = 0;\r\n\t\t\t\tcache = null;\r\n\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t\tenumerator = null;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n// Provided for type guarding.\r\nexport class FiniteEnumerable<T>\r\nextends Enumerable<T> implements IFiniteEnumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tenumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:() => void)\r\n\t{\r\n\t\tsuper(enumeratorFactory, finalizer, false);\r\n\t}\r\n\r\n}\r\n\r\nclass ArrayEnumerable<T>\r\nextends FiniteEnumerable<T>\r\n{\r\n\tprivate _source:IArray<T>;\r\n\r\n\tconstructor(source:IArray<T>)\r\n\t{\r\n\t\tsuper(() =>\r\n\t\t{\r\n\t\t\t_.throwIfDisposed();\r\n\t\t\treturn new ArrayEnumerator<T>(() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\r\n\r\n\t\t\t\treturn _._source; // Should never be null, but ArrayEnumerable if not disposed simply treats null as empty array.\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tvar _ = this;\r\n\t\t_._disposableObjectName = \"ArrayEnumerable\";\r\n\t\t_._source = source;\r\n\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._source = <any>null;\r\n\t}\r\n\r\n\tget source():IArray<T>\r\n\t{\r\n\t\treturn this._source;\r\n\t}\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn toArray(_._source);\r\n\t}\r\n\r\n\tasEnumerable():ArrayEnumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(this._source);\r\n\t}\r\n\r\n\t// Optimize forEach so that subsequent usage is optimized.\r\n\tforEach(action:Predicate<T> | Action<T>, max:number = Infinity):number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn forEach(_._source, action, max);\r\n\t}\r\n\r\n\t// These methods should ALWAYS check for array length before attempting anything.\r\n\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn len && (!predicate || super.any(predicate));\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn len && (predicate ? super.count(predicate) : len);\r\n\t}\r\n\r\n\telementAtOrDefault(index:number, defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tInteger.assertZeroOrGreater(index, 'index');\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn index<source.length\r\n\t\t\t? source[index]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tlast():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn (len)\r\n\t\t\t? source[len - 1]\r\n\t\t\t: super.last();\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn len\r\n\t\t\t? source[len - 1]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tskip(count:number):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!(count>0))\r\n\t\t\treturn _;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(() => _._source, count)\r\n\t\t);\r\n\t}\r\n\r\n\ttakeExceptLast(count:number = 1):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _.take(_._source.length - count);\r\n\t}\r\n\r\n\tskipToLast(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!(count>0))\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\t\tif(!isFinite(count))\r\n\t\t\treturn _;\r\n\r\n\t\tvar len = _._source\r\n\t\t\t? _._source.length\r\n\t\t\t: 0;\r\n\r\n\t\treturn _.skip(len - count);\r\n\t}\r\n\r\n\treverse():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(\r\n\t\t\t\t() => _._source, _._source\r\n\t\t\t\t\t? (_._source.length - 1)\r\n\t\t\t\t\t: 0, -1\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tmemoize():ArrayEnumerable<T>\r\n\t{\r\n\t\treturn this.asEnumerable();\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\tif(Type.isArrayLike(second))\r\n\t\t\treturn Arrays.areEqual(this.source, second, true, equalityComparer);\r\n\r\n\t\tif(second instanceof ArrayEnumerable)\r\n\t\t\treturn second.sequenceEqual(this.source, equalityComparer);\r\n\r\n\t\treturn super.sequenceEqual(second, equalityComparer);\r\n\t}\r\n\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\treturn !selector && Array.isArray(s)\r\n\t\t\t? (<Array<T>>s).join(separator)\r\n\t\t\t: super.toJoinedString(separator, selector);\r\n\t}\r\n\r\n}\r\n\r\nclass Grouping<TKey, TElement>\r\nextends ArrayEnumerable<TElement> implements IGrouping<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _groupKey:TKey, elements:TElement[])\r\n\t{\r\n\t\tsuper(elements);\r\n\t}\r\n\r\n\tget key():TKey\r\n\t{\r\n\t\treturn this._groupKey;\r\n\t}\r\n}\r\n\r\nclass Lookup<TKey, TElement>\r\nimplements ILookup<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _dictionary:IDictionary<TKey, TElement[]>)\r\n\t{\r\n\t}\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this._dictionary.count;\r\n\t}\r\n\r\n\tget(key:TKey):TElement[]\r\n\t{\r\n\t\treturn this._dictionary.getValue(key);\r\n\t}\r\n\r\n\tcontains(key:TKey):boolean\r\n\t{\r\n\t\treturn this._dictionary.containsKey(key);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<Grouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\tvar enumerator:IEnumerator<IKeyValuePair<TKey, TElement[]>>;\r\n\r\n\t\treturn new EnumeratorBase<Grouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = _._dictionary.getEnumerator();\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\r\n\t\t\t\tif(!enumerator.moveNext())\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\tvar current = enumerator.current;\r\n\r\n\t\t\t\treturn yielder.yieldReturn(new Grouping<TKey, TElement>(current.key, current.value));\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass OrderedEnumerable<T,TOrderBy extends Comparable>\r\nextends FiniteEnumerable<T> implements IOrderedEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tprivate source:IEnumerable<T>,\r\n\t\tpublic keySelector:(value:T) => TOrderBy,\r\n\t\tpublic order:Order,\r\n\t\tpublic parent?:OrderedEnumerable<T,any>,\r\n\t\tpublic comparer:Comparison<T> = Values.compare)\r\n\t{\r\n\t\tsuper(null);\r\n\t\tthrowIfEndless(source && source.isEndless);\r\n\t}\r\n\r\n\tprivate createOrderedEnumerable(\r\n\t\tkeySelector:(value:T) => TOrderBy,\r\n\t\torder:Order):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TOrderBy>(this.source, keySelector, order, this);\r\n\t}\r\n\r\n\tthenBy(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Ascending);\r\n\t}\r\n\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Ascending, this, comparison);\r\n\t}\r\n\r\n\tthenByDescending(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Descending);\r\n\t}\r\n\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Descending, this, comparison);\r\n\t}\r\n\r\n\tgetEnumerator():EnumeratorBase<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar buffer:T[];\r\n\t\tvar indexes:number[];\r\n\t\tvar index:number = 0;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tindex = 0;\r\n\t\t\t\tbuffer = Enumerable.toArray(_.source);\r\n\t\t\t\tindexes = createSortContext(_).generateSortedIndexes(buffer);\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\treturn (index<indexes.length)\r\n\t\t\t\t\t? yielder.yieldReturn(buffer[indexes[index++]])\r\n\t\t\t\t\t: false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(buffer)\r\n\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\tbuffer = null;\r\n\t\t\t\tif(indexes)\r\n\t\t\t\t\tindexes.length = 0;\r\n\t\t\t\tindexes = null;\r\n\t\t\t},\r\n\r\n\t\t\tfalse\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.source = null;\r\n\t\tthis.keySelector = null;\r\n\t\tthis.order = null;\r\n\t\tthis.parent = null;\r\n\t}\r\n\r\n}\r\n\r\n// A private static helper for the weave function.\r\nfunction nextEnumerator<T>(queue:Queue<IEnumerator<T>>, e:IEnumerator<T>):IEnumerator<T>\r\n{\r\n\tif(e)\r\n\t{\r\n\t\tif(e.moveNext())\r\n\t\t{\r\n\t\t\tqueue.enqueue(e);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tdispose(e);\r\n\t\t\te = null;\r\n\t\t}\r\n\t}\r\n\treturn e;\r\n}\r\n\r\n/**\r\n * Recursively builds a SortContext chain.\r\n * @param orderedEnumerable\r\n * @param currentContext\r\n * @returns {any}\r\n */\r\nfunction createSortContext<T, TOrderBy extends Comparable>(\r\n\torderedEnumerable:OrderedEnumerable<T,TOrderBy>,\r\n\tcurrentContext:IComparer<T> = null):KeySortedContext<T, TOrderBy>\r\n{\r\n\r\n\tvar context = new KeySortedContext<T, TOrderBy>(\r\n\t\tcurrentContext,\r\n\t\torderedEnumerable.keySelector,\r\n\t\torderedEnumerable.order,\r\n\t\torderedEnumerable.comparer);\r\n\r\n\tif(orderedEnumerable.parent)\r\n\t\treturn createSortContext(orderedEnumerable.parent, context);\r\n\r\n\treturn context;\r\n}\r\n\r\n// #region Helper Functions...\r\n// This allows for the use of a boolean instead of calling this.throwIfDisposed()\r\n// since there is a strong chance of introducing a circular reference.\r\nfunction throwIfDisposed(disposed:boolean):void\r\n{\r\n\tif(disposed) throw new ObjectDisposedException(\"Enumerable\");\r\n}\r\n// #endregion\r\n\r\nexport default Enumerable;\r\n"]}