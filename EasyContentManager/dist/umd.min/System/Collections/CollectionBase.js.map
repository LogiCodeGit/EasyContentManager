{"version":3,"sources":["System/Collections/CollectionBase.js","System/Collections/CollectionBase.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Enumerator_1","Compare_1","ArgumentNullException_1","InvalidOperationException_1","DisposableBase_1","Types_1","extends_1","__extends","NAME","CMDC","CMRO","RESOLVE","LINQ_PATH","CollectionBase","_super","source","_equalityComparer","areEqual","call","this","_","_disposableObjectName","_importEntries","_updateRecursion","_modifiedCount","_version","Object","defineProperty","prototype","get","getCount","enumerable","configurable","getIsReadOnly","assertModifiable","throwIfDisposed","InvalidOperationException","assertVersion","version","_onModified","_signalModification","increment","ex","console","error","_incrementModified","handleUpdate","closure","updated","add","entry","_addInternal","remove","max","Infinity","n","_removeInternal","clear","_clearInternal","_onDispose","l","_linq","dispose","entries","_this","added","Array","isArray","_i","entries_1","length","e","forEach","importEntries","contains","found","equals","action","useCopy","getEnumerator","a","toArray","copyTo","target","index","ArgumentNullException","count","newLength","moveNext","current","Type","hasMember","from","DisposableBase"],"mappings":"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","file":"System/Collections/CollectionBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"./Enumeration/Enumerator\", \"../Compare\", \"../Exceptions/ArgumentNullException\", \"../Exceptions/InvalidOperationException\", \"../Disposable/DisposableBase\", \"../Types\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Enumerator_1 = require(\"./Enumeration/Enumerator\");\n    var Compare_1 = require(\"../Compare\");\n    var ArgumentNullException_1 = require(\"../Exceptions/ArgumentNullException\");\n    var InvalidOperationException_1 = require(\"../Exceptions/InvalidOperationException\");\n    var DisposableBase_1 = require(\"../Disposable/DisposableBase\");\n    var Types_1 = require(\"../Types\");\n    var extends_1 = require(\"../../extends\");\n    var __extends = extends_1.default;\n    var NAME = \"CollectionBase\", CMDC = \"Cannot modify a disposed collection.\", CMRO = \"Cannot modify a read-only collection.\", RESOLVE = \"resolve\", LINQ_PATH = \"../../System.Linq/Linq\";\n    var CollectionBase = (function (_super) {\n        __extends(CollectionBase, _super);\n        function CollectionBase(source, _equalityComparer) {\n            if (_equalityComparer === void 0) { _equalityComparer = Compare_1.areEqual; }\n            _super.call(this);\n            this._equalityComparer = _equalityComparer;\n            var _ = this;\n            _._disposableObjectName = NAME;\n            _._importEntries(source);\n            _._updateRecursion = 0;\n            _._modifiedCount = 0;\n            _._version = 0;\n        }\n        Object.defineProperty(CollectionBase.prototype, \"count\", {\n            get: function () {\n                return this.getCount();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CollectionBase.prototype.getIsReadOnly = function () {\n            return false;\n        };\n        Object.defineProperty(CollectionBase.prototype, \"isReadOnly\", {\n            get: function () {\n                return this.getIsReadOnly();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CollectionBase.prototype.assertModifiable = function () {\n            this.throwIfDisposed(CMDC);\n            if (this.getIsReadOnly())\n                throw new InvalidOperationException_1.InvalidOperationException(CMRO);\n        };\n        CollectionBase.prototype.assertVersion = function (version) {\n            if (version != this._version)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Collection was modified.\");\n        };\n        CollectionBase.prototype._onModified = function () { };\n        CollectionBase.prototype._signalModification = function (increment) {\n            var _ = this;\n            if (increment)\n                _._modifiedCount++;\n            if (_._modifiedCount && !this._updateRecursion) {\n                _._modifiedCount = 0;\n                _._version++;\n                try {\n                    _._onModified();\n                }\n                catch (ex) {\n                    console.error(ex);\n                }\n                return true;\n            }\n            return false;\n        };\n        CollectionBase.prototype._incrementModified = function () { this._modifiedCount++; };\n        Object.defineProperty(CollectionBase.prototype, \"isUpdating\", {\n            get: function () { return this._updateRecursion != 0; },\n            enumerable: true,\n            configurable: true\n        });\n        CollectionBase.prototype.handleUpdate = function (closure) {\n            if (!closure)\n                return false;\n            var _ = this;\n            _.assertModifiable();\n            _._updateRecursion++;\n            var updated = false;\n            try {\n                if (updated = closure())\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n            return updated;\n        };\n        CollectionBase.prototype.add = function (entry) {\n            var _ = this;\n            _.assertModifiable();\n            _._updateRecursion++;\n            try {\n                if (_._addInternal(entry))\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n        };\n        CollectionBase.prototype.remove = function (entry, max) {\n            if (max === void 0) { max = Infinity; }\n            var _ = this;\n            _.assertModifiable();\n            _._updateRecursion++;\n            var n;\n            try {\n                if (n = _._removeInternal(entry, max))\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n            return n;\n        };\n        CollectionBase.prototype.clear = function () {\n            var _ = this;\n            _.assertModifiable();\n            _._updateRecursion++;\n            var n;\n            try {\n                if (n = _._clearInternal())\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n            return n;\n        };\n        CollectionBase.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._clearInternal();\n            this._version = 0;\n            this._updateRecursion = 0;\n            this._modifiedCount = 0;\n            var l = this._linq;\n            this._linq = null;\n            if (l)\n                l.dispose();\n        };\n        CollectionBase.prototype._importEntries = function (entries) {\n            var _this = this;\n            var added = 0;\n            if (entries) {\n                if (Array.isArray(entries)) {\n                    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n                        var e = entries_1[_i];\n                        if (this._addInternal(e))\n                            added++;\n                    }\n                }\n                else {\n                    Enumerator_1.forEach(entries, function (e) {\n                        if (_this._addInternal(e))\n                            added++;\n                    });\n                }\n            }\n            return added;\n        };\n        CollectionBase.prototype.importEntries = function (entries) {\n            var _ = this;\n            _.assertModifiable();\n            _._updateRecursion++;\n            var n;\n            try {\n                if (n = _._importEntries(entries))\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n            return n;\n        };\n        CollectionBase.prototype.contains = function (entry) {\n            if (!this.getCount())\n                return false;\n            var found = false, equals = this._equalityComparer;\n            this.forEach(function (e) { return !(found = equals(entry, e)); });\n            return found;\n        };\n        CollectionBase.prototype.forEach = function (action, useCopy) {\n            if (useCopy) {\n                var a = this.toArray();\n                try {\n                    return Enumerator_1.forEach(a, action);\n                }\n                finally {\n                    a.length = 0;\n                }\n            }\n            else {\n                return Enumerator_1.forEach(this.getEnumerator(), action);\n            }\n        };\n        CollectionBase.prototype.copyTo = function (target, index) {\n            if (index === void 0) { index = 0; }\n            if (!target)\n                throw new ArgumentNullException_1.ArgumentNullException('target');\n            var count = this.getCount(), newLength = count + index;\n            if (target.length < newLength)\n                target.length = newLength;\n            var e = this.getEnumerator();\n            while (e.moveNext()) {\n                target[index++] = e.current;\n            }\n            return target;\n        };\n        CollectionBase.prototype.toArray = function () {\n            var count = this.getCount();\n            return this.copyTo(count > 65536 ? new Array(count) : []);\n        };\n        Object.defineProperty(CollectionBase.prototype, \"linq\", {\n            get: function () {\n                if (Types_1.Type.hasMember(require, RESOLVE) && require.length == 1) {\n                    var e = this._linq;\n                    if (!e)\n                        this._linq = e = require(LINQ_PATH).default.from(this);\n                    return e;\n                }\n                else {\n                    throw \".linq currently only supported within CommonJS.\\nImport System.Linq/Linq and use Enumerable.from(e) instead.\";\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return CollectionBase;\n    }(DisposableBase_1.DisposableBase));\n    exports.CollectionBase = CollectionBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {forEach} from \"./Enumeration/Enumerator\";\r\nimport {areEqual} from \"../Compare\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport {ICollection} from \"./ICollection\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IEnumerateEach} from \"./Enumeration/IEnumerateEach\";\r\nimport {EqualityComparison, Predicate, Action} from \"../FunctionTypes\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {IArray} from \"./Array/IArray\";\r\nimport {Type} from \"../Types\";\r\nimport {ILinqEnumerable} from \"../../System.Linq/Enumerable\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n//noinspection SpellCheckingInspection\r\nconst NAME      = \"CollectionBase\",\r\n      CMDC      = \"Cannot modify a disposed collection.\",\r\n      CMRO      = \"Cannot modify a read-only collection.\",\r\n      RESOLVE   = \"resolve\",\r\n      LINQ_PATH = \"../../System.Linq/Linq\";\r\n\r\nexport abstract class CollectionBase<T>\r\nextends DisposableBase implements ICollection<T>, IEnumerateEach<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>,\r\n\t\tprotected _equalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper();\r\n\t\tvar _ = this;\r\n\t\t_._disposableObjectName = NAME;\r\n\t\t_._importEntries(source);\r\n\t\t_._updateRecursion = 0;\r\n\t\t_._modifiedCount = 0;\r\n\t\t_._version = 0;\r\n\t}\r\n\r\n\r\n\tprotected abstract getCount():number;\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this.getCount();\r\n\t}\r\n\r\n\tprotected getIsReadOnly():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\tget isReadOnly():boolean\r\n\t{\r\n\t\treturn this.getIsReadOnly();\r\n\t}\r\n\r\n\tprotected assertModifiable():void\r\n\t{\r\n\t\tthis.throwIfDisposed(CMDC);\r\n\t\tif(this.getIsReadOnly())\r\n\t\t\tthrow new InvalidOperationException(CMRO);\r\n\t}\r\n\r\n\tprotected _version:number; // Provides an easy means of tracking changes and invalidating enumerables.\r\n\tassertVersion(version:number):void\r\n\t{\r\n\t\tif(version!=this._version)\r\n\t\t\tthrow new InvalidOperationException(\"Collection was modified.\");\r\n\t}\r\n\r\n\t/*\r\n\t * Note: Avoid changing modified count by any means but ++;\r\n\t * If setting modified count by the result of a closure it may be a negative number or NaN and ruin the pattern.\r\n\t */\r\n\tprivate _modifiedCount:number;\r\n\tprivate _updateRecursion:number;\r\n\r\n\tprotected _onModified():void {}\r\n\r\n\tprotected _signalModification(increment?:boolean):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(increment) _._modifiedCount++;\r\n\t\tif(_._modifiedCount && !this._updateRecursion)\r\n\t\t{\r\n\t\t\t_._modifiedCount = 0;\r\n\t\t\t_._version++;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\t_._onModified();\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\t// Avoid fatal errors which may have been caused by consumer.\r\n\t\t\t\tconsole.error(ex);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _incrementModified():void { this._modifiedCount++; }\r\n\r\n\tget isUpdating():boolean { return this._updateRecursion!=0; }\r\n\r\n\t/**\r\n\t * Takes a closure that if returning true will propagate an update signal.\r\n\t * Multiple update operations can be occurring at once or recursively and the onModified signal will only occur once they're done.\r\n\t * @param closure\r\n\t * @returns {boolean}\r\n\t */\r\n\thandleUpdate(closure?:() => boolean):boolean\r\n\t{\r\n\t\tif(!closure) return false;\r\n\t\tvar _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\t\tvar updated:boolean = false;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(updated = closure())\r\n\t\t\t\t_._modifiedCount++;\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\t_._updateRecursion--;\r\n\t\t}\r\n\r\n\t\t_._signalModification();\r\n\r\n\t\treturn updated;\r\n\t}\r\n\r\n\tprotected abstract _addInternal(entry:T):boolean;\r\n\r\n\t/*\r\n\t * Note: for a slight amount more code, we avoid creating functions/closures.\r\n\t * Calling handleUpdate is the correct pattern, but if possible avoid creating another function scope.\r\n\t */\r\n\r\n\tadd(entry:T):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\ttry\r\n\t\t{ if(_._addInternal(entry)) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\t}\r\n\r\n\tprotected abstract _removeInternal(entry:T, max?:number):number;\r\n\r\n\tremove(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\tvar n:number;\r\n\t\ttry\r\n\t\t{ if(n = _._removeInternal(entry, max)) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\t\treturn n;\r\n\t}\r\n\r\n\tprotected abstract _clearInternal():number;\r\n\r\n\tclear():number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\tvar n:number;\r\n\t\ttry\r\n\t\t{ if(n = _._clearInternal()) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\r\n\t\treturn n;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._clearInternal();\r\n\t\tthis._version = 0;\r\n\t\tthis._updateRecursion = 0;\r\n\t\tthis._modifiedCount = 0;\r\n\t\tvar l = this._linq;\r\n\t\tthis._linq = null;\r\n\t\tif(l) l.dispose();\r\n\t}\r\n\r\n\tprotected _importEntries(entries:IEnumerableOrArray<T>):number\r\n\t{\r\n\t\tvar added = 0;\r\n\t\tif(entries)\r\n\t\t{\r\n\t\t\tif(Array.isArray(entries))\r\n\t\t\t{\r\n\t\t\t\t// Optimize for avoiding a new closure.\r\n\t\t\t\tfor(let e of entries)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this._addInternal(e)) added++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tforEach(entries, e=>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this._addInternal(e)) added++;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn added;\r\n\t}\r\n\r\n\timportEntries(entries:IEnumerableOrArray<T>):number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\tvar n:number;\r\n\t\ttry\r\n\t\t{ if(n = _._importEntries(entries)) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\t\treturn n;\r\n\t}\r\n\r\n\t// Fundamentally the most important part of the collection.\r\n\tabstract getEnumerator():IEnumerator<T>;\r\n\r\n\tcontains(entry:T):boolean\r\n\t{\r\n\t\tif(!this.getCount()) return false;\r\n\t\tvar found:boolean = false, equals = this._equalityComparer;\r\n\t\tthis.forEach(e => !(found = equals(entry, e)));\r\n\t\treturn found;\r\n\t}\r\n\r\n\tforEach(action:Predicate<T>|Action<T>, useCopy?:boolean):number\r\n\t{\r\n\t\tif(useCopy)\r\n\t\t{\r\n\t\t\tvar a = this.toArray();\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\treturn forEach(a, action);\r\n\t\t\t}\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\ta.length = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn forEach(this.getEnumerator(), action);\r\n\t\t}\r\n\t}\r\n\r\n\tcopyTo<TTarget extends IArray<T>>(\r\n\t\ttarget:TTarget,\r\n\t\tindex:number = 0):TTarget\r\n\t{\r\n\t\tif(!target) throw new ArgumentNullException('target');\r\n\r\n\t\tvar count = this.getCount(), newLength = count + index;\r\n\t\tif(target.length<newLength) target.length = newLength;\r\n\r\n\t\tvar e = this.getEnumerator();\r\n\t\twhile(e.moveNext()) // Disposes when finished.\r\n\t\t{\r\n\t\t\ttarget[index++] = e.current;\r\n\t\t}\r\n\t\treturn target;\r\n\t}\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tvar count = this.getCount();\r\n\t\treturn this.copyTo(count>65536 ? new Array<T>(count) : []);\r\n\t}\r\n\r\n\tprivate _linq:ILinqEnumerable<T>;\r\n\tget linq():ILinqEnumerable<T>\r\n\t{\r\n\t\tif(Type.hasMember(require, RESOLVE) && require.length==1)\r\n\t\t{\r\n\t\t\tvar e = this._linq;\r\n\t\t\tif(!e) this._linq = e = require(LINQ_PATH).default.from(this);\r\n\t\t\treturn e;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthrow \".linq currently only supported within CommonJS.\\nImport System.Linq/Linq and use Enumerable.from(e) instead.\";\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\ndeclare var require:any;\r\n"]}